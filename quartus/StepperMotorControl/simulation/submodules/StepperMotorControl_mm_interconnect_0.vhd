-- StepperMotorControl_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 209 at 2014.11.14.10:57:41

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StepperMotorControl_mm_interconnect_0 is
	port (
		pll_100MHz_outclk0_clk                  : in  std_logic                     := '0';             --                pll_100MHz_outclk0.clk
		CPU_reset_n_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- CPU_reset_n_reset_bridge_in_reset.reset
		CPU_data_master_address                 : in  std_logic_vector(20 downto 0) := (others => '0'); --                   CPU_data_master.address
		CPU_data_master_waitrequest             : out std_logic;                                        --                                  .waitrequest
		CPU_data_master_byteenable              : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                  .byteenable
		CPU_data_master_read                    : in  std_logic                     := '0';             --                                  .read
		CPU_data_master_readdata                : out std_logic_vector(31 downto 0);                    --                                  .readdata
		CPU_data_master_write                   : in  std_logic                     := '0';             --                                  .write
		CPU_data_master_writedata               : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .writedata
		CPU_data_master_debugaccess             : in  std_logic                     := '0';             --                                  .debugaccess
		CPU_instruction_master_address          : in  std_logic_vector(20 downto 0) := (others => '0'); --            CPU_instruction_master.address
		CPU_instruction_master_waitrequest      : out std_logic;                                        --                                  .waitrequest
		CPU_instruction_master_read             : in  std_logic                     := '0';             --                                  .read
		CPU_instruction_master_readdata         : out std_logic_vector(31 downto 0);                    --                                  .readdata
		CPU_instruction_master_readdatavalid    : out std_logic;                                        --                                  .readdatavalid
		CPU_jtag_debug_module_address           : out std_logic_vector(8 downto 0);                     --             CPU_jtag_debug_module.address
		CPU_jtag_debug_module_write             : out std_logic;                                        --                                  .write
		CPU_jtag_debug_module_read              : out std_logic;                                        --                                  .read
		CPU_jtag_debug_module_readdata          : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		CPU_jtag_debug_module_writedata         : out std_logic_vector(31 downto 0);                    --                                  .writedata
		CPU_jtag_debug_module_byteenable        : out std_logic_vector(3 downto 0);                     --                                  .byteenable
		CPU_jtag_debug_module_waitrequest       : in  std_logic                     := '0';             --                                  .waitrequest
		CPU_jtag_debug_module_debugaccess       : out std_logic;                                        --                                  .debugaccess
		jtag_uart_avalon_jtag_slave_address     : out std_logic_vector(0 downto 0);                     --       jtag_uart_avalon_jtag_slave.address
		jtag_uart_avalon_jtag_slave_write       : out std_logic;                                        --                                  .write
		jtag_uart_avalon_jtag_slave_read        : out std_logic;                                        --                                  .read
		jtag_uart_avalon_jtag_slave_readdata    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		jtag_uart_avalon_jtag_slave_writedata   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		jtag_uart_avalon_jtag_slave_waitrequest : in  std_logic                     := '0';             --                                  .waitrequest
		jtag_uart_avalon_jtag_slave_chipselect  : out std_logic;                                        --                                  .chipselect
		lcd_control_slave_address               : out std_logic_vector(1 downto 0);                     --                 lcd_control_slave.address
		lcd_control_slave_write                 : out std_logic;                                        --                                  .write
		lcd_control_slave_read                  : out std_logic;                                        --                                  .read
		lcd_control_slave_readdata              : in  std_logic_vector(7 downto 0)  := (others => '0'); --                                  .readdata
		lcd_control_slave_writedata             : out std_logic_vector(7 downto 0);                     --                                  .writedata
		lcd_control_slave_begintransfer         : out std_logic;                                        --                                  .begintransfer
		pio_hex0_s1_address                     : out std_logic_vector(2 downto 0);                     --                       pio_hex0_s1.address
		pio_hex0_s1_write                       : out std_logic;                                        --                                  .write
		pio_hex0_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_hex0_s1_writedata                   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_hex0_s1_chipselect                  : out std_logic;                                        --                                  .chipselect
		pio_hex1_s1_address                     : out std_logic_vector(2 downto 0);                     --                       pio_hex1_s1.address
		pio_hex1_s1_write                       : out std_logic;                                        --                                  .write
		pio_hex1_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_hex1_s1_writedata                   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_hex1_s1_chipselect                  : out std_logic;                                        --                                  .chipselect
		pio_hex2_s1_address                     : out std_logic_vector(2 downto 0);                     --                       pio_hex2_s1.address
		pio_hex2_s1_write                       : out std_logic;                                        --                                  .write
		pio_hex2_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_hex2_s1_writedata                   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_hex2_s1_chipselect                  : out std_logic;                                        --                                  .chipselect
		pio_hex3_s1_address                     : out std_logic_vector(2 downto 0);                     --                       pio_hex3_s1.address
		pio_hex3_s1_write                       : out std_logic;                                        --                                  .write
		pio_hex3_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_hex3_s1_writedata                   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_hex3_s1_chipselect                  : out std_logic;                                        --                                  .chipselect
		pio_key_s1_address                      : out std_logic_vector(1 downto 0);                     --                        pio_key_s1.address
		pio_key_s1_write                        : out std_logic;                                        --                                  .write
		pio_key_s1_readdata                     : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_key_s1_writedata                    : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_key_s1_chipselect                   : out std_logic;                                        --                                  .chipselect
		pio_led9_s1_address                     : out std_logic_vector(1 downto 0);                     --                       pio_led9_s1.address
		pio_led9_s1_write                       : out std_logic;                                        --                                  .write
		pio_led9_s1_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_led9_s1_writedata                   : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_led9_s1_chipselect                  : out std_logic;                                        --                                  .chipselect
		pio_sw_s1_address                       : out std_logic_vector(2 downto 0);                     --                         pio_sw_s1.address
		pio_sw_s1_write                         : out std_logic;                                        --                                  .write
		pio_sw_s1_readdata                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                  .readdata
		pio_sw_s1_writedata                     : out std_logic_vector(31 downto 0);                    --                                  .writedata
		pio_sw_s1_chipselect                    : out std_logic;                                        --                                  .chipselect
		RTX_Timer_s1_address                    : out std_logic_vector(2 downto 0);                     --                      RTX_Timer_s1.address
		RTX_Timer_s1_write                      : out std_logic;                                        --                                  .write
		RTX_Timer_s1_readdata                   : in  std_logic_vector(15 downto 0) := (others => '0'); --                                  .readdata
		RTX_Timer_s1_writedata                  : out std_logic_vector(15 downto 0);                    --                                  .writedata
		RTX_Timer_s1_chipselect                 : out std_logic;                                        --                                  .chipselect
		SRAM_CVGX_uas_address                   : out std_logic_vector(18 downto 0);                    --                     SRAM_CVGX_uas.address
		SRAM_CVGX_uas_write                     : out std_logic;                                        --                                  .write
		SRAM_CVGX_uas_read                      : out std_logic;                                        --                                  .read
		SRAM_CVGX_uas_readdata                  : in  std_logic_vector(15 downto 0) := (others => '0'); --                                  .readdata
		SRAM_CVGX_uas_writedata                 : out std_logic_vector(15 downto 0);                    --                                  .writedata
		SRAM_CVGX_uas_burstcount                : out std_logic_vector(1 downto 0);                     --                                  .burstcount
		SRAM_CVGX_uas_byteenable                : out std_logic_vector(1 downto 0);                     --                                  .byteenable
		SRAM_CVGX_uas_readdatavalid             : in  std_logic                     := '0';             --                                  .readdatavalid
		SRAM_CVGX_uas_waitrequest               : in  std_logic                     := '0';             --                                  .waitrequest
		SRAM_CVGX_uas_lock                      : out std_logic;                                        --                                  .lock
		SRAM_CVGX_uas_debugaccess               : out std_logic;                                        --                                  .debugaccess
		sysid_qsys_0_control_slave_address      : out std_logic_vector(0 downto 0);                     --        sysid_qsys_0_control_slave.address
		sysid_qsys_0_control_slave_readdata     : in  std_logic_vector(31 downto 0) := (others => '0')  --                                  .readdata
	);
end entity StepperMotorControl_mm_interconnect_0;

architecture rtl of StepperMotorControl_mm_interconnect_0 is
	component altera_merlin_master_agent is
		generic (
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_DATA_SIDEBAND_H       : integer := 105;
			PKT_DATA_SIDEBAND_L       : integer := 98;
			PKT_QOS_H                 : integer := 109;
			PKT_QOS_L                 : integer := 106;
			PKT_ADDR_SIDEBAND_H       : integer := 97;
			PKT_ADDR_SIDEBAND_L       : integer := 93;
			PKT_RESPONSE_STATUS_H     : integer := 111;
			PKT_RESPONSE_STATUS_L     : integer := 110;
			PKT_ORI_BURST_SIZE_L      : integer := 112;
			PKT_ORI_BURST_SIZE_H      : integer := 114;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			av_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			av_write                : in  std_logic                     := 'X';             -- write
			av_read                 : in  std_logic                     := 'X';             -- read
			av_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			av_waitrequest          : out std_logic;                                        -- waitrequest
			av_readdatavalid        : out std_logic;                                        -- readdatavalid
			av_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			av_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_lock                 : in  std_logic                     := 'X';             -- lock
			cp_valid                : out std_logic;                                        -- valid
			cp_data                 : out std_logic_vector(98 downto 0);                    -- data
			cp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_endofpacket          : out std_logic;                                        -- endofpacket
			cp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : in  std_logic                     := 'X';             -- valid
			rp_data                 : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			rp_channel              : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			rp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			rp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			rp_ready                : out std_logic;                                        -- ready
			av_response             : out std_logic_vector(1 downto 0);                     -- response
			av_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			av_writeresponsevalid   : out std_logic                                         -- writeresponsevalid
		);
	end component altera_merlin_master_agent;

	component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			in_data           : in  std_logic_vector(99 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(99 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo;

	component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rsp_fifo is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			in_data           : in  std_logic_vector(81 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(81 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rsp_fifo;

	component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rdata_fifo is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset     : in  std_logic                     := 'X';             -- reset
			in_data   : in  std_logic_vector(17 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(17 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rdata_fifo;

	component StepperMotorControl_mm_interconnect_0_router is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(98 downto 0);                    -- data
			src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_router;

	component StepperMotorControl_mm_interconnect_0_router_001 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(98 downto 0);                    -- data
			src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_router_001;

	component StepperMotorControl_mm_interconnect_0_router_002 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(98 downto 0);                    -- data
			src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_router_002;

	component StepperMotorControl_mm_interconnect_0_router_003 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(80 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(80 downto 0);                    -- data
			src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_router_003;

	component StepperMotorControl_mm_interconnect_0_router_004 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(98 downto 0);                    -- data
			src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_router_004;

	component altera_merlin_traffic_limiter is
		generic (
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SRC_ID_H              : integer := 0;
			PKT_SRC_ID_L              : integer := 0;
			PKT_TRANS_POSTED          : integer := 0;
			PKT_TRANS_WRITE           : integer := 0;
			MAX_OUTSTANDING_RESPONSES : integer := 0;
			PIPELINED                 : integer := 0;
			ST_DATA_W                 : integer := 72;
			ST_CHANNEL_W              : integer := 1;
			VALID_WIDTH               : integer := 1;
			ENFORCE_ORDER             : integer := 1;
			PREVENT_HAZARDS           : integer := 0;
			PKT_BYTE_CNT_H            : integer := 0;
			PKT_BYTE_CNT_L            : integer := 0;
			PKT_BYTEEN_H              : integer := 0;
			PKT_BYTEEN_L              : integer := 0;
			REORDER                   : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			cmd_sink_ready         : out std_logic;                                        -- ready
			cmd_sink_valid         : in  std_logic                     := 'X';             -- valid
			cmd_sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			cmd_sink_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			cmd_sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			cmd_sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			cmd_src_ready          : in  std_logic                     := 'X';             -- ready
			cmd_src_data           : out std_logic_vector(98 downto 0);                    -- data
			cmd_src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			cmd_src_startofpacket  : out std_logic;                                        -- startofpacket
			cmd_src_endofpacket    : out std_logic;                                        -- endofpacket
			rsp_sink_ready         : out std_logic;                                        -- ready
			rsp_sink_valid         : in  std_logic                     := 'X';             -- valid
			rsp_sink_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			rsp_sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			rsp_sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			rsp_sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			rsp_src_ready          : in  std_logic                     := 'X';             -- ready
			rsp_src_valid          : out std_logic;                                        -- valid
			rsp_src_data           : out std_logic_vector(98 downto 0);                    -- data
			rsp_src_channel        : out std_logic_vector(12 downto 0);                    -- channel
			rsp_src_startofpacket  : out std_logic;                                        -- startofpacket
			rsp_src_endofpacket    : out std_logic;                                        -- endofpacket
			cmd_src_valid          : out std_logic_vector(12 downto 0)                     -- data
		);
	end component altera_merlin_traffic_limiter;

	component altera_merlin_burst_adapter is
		generic (
			PKT_ADDR_H                : integer := 79;
			PKT_ADDR_L                : integer := 48;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_BYTE_CNT_H            : integer := 5;
			PKT_BYTE_CNT_L            : integer := 0;
			PKT_BYTEEN_H              : integer := 83;
			PKT_BYTEEN_L              : integer := 80;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_BURST_TYPE_H          : integer := 88;
			PKT_BURST_TYPE_L          : integer := 87;
			PKT_BURSTWRAP_H           : integer := 11;
			PKT_BURSTWRAP_L           : integer := 6;
			PKT_TRANS_COMPRESSED_READ : integer := 14;
			PKT_TRANS_WRITE           : integer := 13;
			PKT_TRANS_READ            : integer := 12;
			OUT_NARROW_SIZE           : integer := 0;
			IN_NARROW_SIZE            : integer := 0;
			OUT_FIXED                 : integer := 0;
			OUT_COMPLETE_WRAP         : integer := 0;
			ST_DATA_W                 : integer := 89;
			ST_CHANNEL_W              : integer := 8;
			OUT_BYTE_CNT_H            : integer := 5;
			OUT_BURSTWRAP_H           : integer := 11;
			COMPRESSED_READ_SUPPORT   : integer := 1;
			BYTEENABLE_SYNTHESIS      : integer := 0;
			PIPE_INPUTS               : integer := 0;
			NO_WRAP_SUPPORT           : integer := 0;
			INCOMPLETE_WRAP_SUPPORT   : integer := 1;
			BURSTWRAP_CONST_MASK      : integer := 0;
			BURSTWRAP_CONST_VALUE     : integer := -1;
			ADAPTER_VERSION           : string  := "13.1"
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			sink0_valid           : in  std_logic                     := 'X';             -- valid
			sink0_data            : in  std_logic_vector(80 downto 0) := (others => 'X'); -- data
			sink0_channel         : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink0_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			sink0_ready           : out std_logic;                                        -- ready
			source0_valid         : out std_logic;                                        -- valid
			source0_data          : out std_logic_vector(80 downto 0);                    -- data
			source0_channel       : out std_logic_vector(12 downto 0);                    -- channel
			source0_startofpacket : out std_logic;                                        -- startofpacket
			source0_endofpacket   : out std_logic;                                        -- endofpacket
			source0_ready         : in  std_logic                     := 'X'              -- ready
		);
	end component altera_merlin_burst_adapter;

	component StepperMotorControl_mm_interconnect_0_cmd_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(12 downto 0) := (others => 'X'); -- data
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(98 downto 0);                    -- data
			src0_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(98 downto 0);                    -- data
			src1_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_cmd_demux;

	component StepperMotorControl_mm_interconnect_0_cmd_demux_001 is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			sink_ready          : out std_logic;                                        -- ready
			sink_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink_valid          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready          : in  std_logic                     := 'X';             -- ready
			src0_valid          : out std_logic;                                        -- valid
			src0_data           : out std_logic_vector(98 downto 0);                    -- data
			src0_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src0_startofpacket  : out std_logic;                                        -- startofpacket
			src0_endofpacket    : out std_logic;                                        -- endofpacket
			src1_ready          : in  std_logic                     := 'X';             -- ready
			src1_valid          : out std_logic;                                        -- valid
			src1_data           : out std_logic_vector(98 downto 0);                    -- data
			src1_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src1_startofpacket  : out std_logic;                                        -- startofpacket
			src1_endofpacket    : out std_logic;                                        -- endofpacket
			src2_ready          : in  std_logic                     := 'X';             -- ready
			src2_valid          : out std_logic;                                        -- valid
			src2_data           : out std_logic_vector(98 downto 0);                    -- data
			src2_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src2_startofpacket  : out std_logic;                                        -- startofpacket
			src2_endofpacket    : out std_logic;                                        -- endofpacket
			src3_ready          : in  std_logic                     := 'X';             -- ready
			src3_valid          : out std_logic;                                        -- valid
			src3_data           : out std_logic_vector(98 downto 0);                    -- data
			src3_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src3_startofpacket  : out std_logic;                                        -- startofpacket
			src3_endofpacket    : out std_logic;                                        -- endofpacket
			src4_ready          : in  std_logic                     := 'X';             -- ready
			src4_valid          : out std_logic;                                        -- valid
			src4_data           : out std_logic_vector(98 downto 0);                    -- data
			src4_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src4_startofpacket  : out std_logic;                                        -- startofpacket
			src4_endofpacket    : out std_logic;                                        -- endofpacket
			src5_ready          : in  std_logic                     := 'X';             -- ready
			src5_valid          : out std_logic;                                        -- valid
			src5_data           : out std_logic_vector(98 downto 0);                    -- data
			src5_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src5_startofpacket  : out std_logic;                                        -- startofpacket
			src5_endofpacket    : out std_logic;                                        -- endofpacket
			src6_ready          : in  std_logic                     := 'X';             -- ready
			src6_valid          : out std_logic;                                        -- valid
			src6_data           : out std_logic_vector(98 downto 0);                    -- data
			src6_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src6_startofpacket  : out std_logic;                                        -- startofpacket
			src6_endofpacket    : out std_logic;                                        -- endofpacket
			src7_ready          : in  std_logic                     := 'X';             -- ready
			src7_valid          : out std_logic;                                        -- valid
			src7_data           : out std_logic_vector(98 downto 0);                    -- data
			src7_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src7_startofpacket  : out std_logic;                                        -- startofpacket
			src7_endofpacket    : out std_logic;                                        -- endofpacket
			src8_ready          : in  std_logic                     := 'X';             -- ready
			src8_valid          : out std_logic;                                        -- valid
			src8_data           : out std_logic_vector(98 downto 0);                    -- data
			src8_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src8_startofpacket  : out std_logic;                                        -- startofpacket
			src8_endofpacket    : out std_logic;                                        -- endofpacket
			src9_ready          : in  std_logic                     := 'X';             -- ready
			src9_valid          : out std_logic;                                        -- valid
			src9_data           : out std_logic_vector(98 downto 0);                    -- data
			src9_channel        : out std_logic_vector(12 downto 0);                    -- channel
			src9_startofpacket  : out std_logic;                                        -- startofpacket
			src9_endofpacket    : out std_logic;                                        -- endofpacket
			src10_ready         : in  std_logic                     := 'X';             -- ready
			src10_valid         : out std_logic;                                        -- valid
			src10_data          : out std_logic_vector(98 downto 0);                    -- data
			src10_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src10_startofpacket : out std_logic;                                        -- startofpacket
			src10_endofpacket   : out std_logic;                                        -- endofpacket
			src11_ready         : in  std_logic                     := 'X';             -- ready
			src11_valid         : out std_logic;                                        -- valid
			src11_data          : out std_logic_vector(98 downto 0);                    -- data
			src11_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src11_startofpacket : out std_logic;                                        -- startofpacket
			src11_endofpacket   : out std_logic;                                        -- endofpacket
			src12_ready         : in  std_logic                     := 'X';             -- ready
			src12_valid         : out std_logic;                                        -- valid
			src12_data          : out std_logic_vector(98 downto 0);                    -- data
			src12_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src12_startofpacket : out std_logic;                                        -- startofpacket
			src12_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_cmd_demux_001;

	component StepperMotorControl_mm_interconnect_0_cmd_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(98 downto 0);                    -- data
			src_channel         : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_cmd_mux;

	component StepperMotorControl_mm_interconnect_0_cmd_mux_002 is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(98 downto 0);                    -- data
			src_channel         : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_cmd_mux_002;

	component StepperMotorControl_mm_interconnect_0_rsp_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(98 downto 0);                    -- data
			src0_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(98 downto 0);                    -- data
			src1_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_rsp_demux;

	component StepperMotorControl_mm_interconnect_0_rsp_demux_002 is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(98 downto 0);                    -- data
			src0_channel       : out std_logic_vector(12 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_rsp_demux_002;

	component StepperMotorControl_mm_interconnect_0_rsp_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(98 downto 0);                    -- data
			src_channel         : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_rsp_mux;

	component StepperMotorControl_mm_interconnect_0_rsp_mux_001 is
		port (
			clk                  : in  std_logic                     := 'X';             -- clk
			reset                : in  std_logic                     := 'X';             -- reset
			src_ready            : in  std_logic                     := 'X';             -- ready
			src_valid            : out std_logic;                                        -- valid
			src_data             : out std_logic_vector(98 downto 0);                    -- data
			src_channel          : out std_logic_vector(12 downto 0);                    -- channel
			src_startofpacket    : out std_logic;                                        -- startofpacket
			src_endofpacket      : out std_logic;                                        -- endofpacket
			sink0_ready          : out std_logic;                                        -- ready
			sink0_valid          : in  std_logic                     := 'X';             -- valid
			sink0_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink0_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink0_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready          : out std_logic;                                        -- ready
			sink1_valid          : in  std_logic                     := 'X';             -- valid
			sink1_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink1_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink1_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink2_ready          : out std_logic;                                        -- ready
			sink2_valid          : in  std_logic                     := 'X';             -- valid
			sink2_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink2_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink2_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink2_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink3_ready          : out std_logic;                                        -- ready
			sink3_valid          : in  std_logic                     := 'X';             -- valid
			sink3_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink3_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink3_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink3_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink4_ready          : out std_logic;                                        -- ready
			sink4_valid          : in  std_logic                     := 'X';             -- valid
			sink4_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink4_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink4_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink4_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink5_ready          : out std_logic;                                        -- ready
			sink5_valid          : in  std_logic                     := 'X';             -- valid
			sink5_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink5_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink5_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink5_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink6_ready          : out std_logic;                                        -- ready
			sink6_valid          : in  std_logic                     := 'X';             -- valid
			sink6_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink6_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink6_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink6_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink7_ready          : out std_logic;                                        -- ready
			sink7_valid          : in  std_logic                     := 'X';             -- valid
			sink7_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink7_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink7_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink7_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink8_ready          : out std_logic;                                        -- ready
			sink8_valid          : in  std_logic                     := 'X';             -- valid
			sink8_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink8_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink8_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink8_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink9_ready          : out std_logic;                                        -- ready
			sink9_valid          : in  std_logic                     := 'X';             -- valid
			sink9_channel        : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink9_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink9_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink9_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink10_ready         : out std_logic;                                        -- ready
			sink10_valid         : in  std_logic                     := 'X';             -- valid
			sink10_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink10_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink10_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink10_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink11_ready         : out std_logic;                                        -- ready
			sink11_valid         : in  std_logic                     := 'X';             -- valid
			sink11_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink11_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink11_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink11_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink12_ready         : out std_logic;                                        -- ready
			sink12_valid         : in  std_logic                     := 'X';             -- valid
			sink12_channel       : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			sink12_data          : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			sink12_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink12_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component StepperMotorControl_mm_interconnect_0_rsp_mux_001;

	component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(8 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_read                  : out std_logic;                                        -- read
			av_readdata              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable            : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable       : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_chipselect            : out std_logic;                                        -- chipselect
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_translator;

	component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(15 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(18 downto 0);                    -- address
			av_write                 : out std_logic;                                        -- write
			av_read                  : out std_logic;                                        -- read
			av_readdata              : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(15 downto 0);                    -- writedata
			av_burstcount            : out std_logic_vector(1 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(1 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_lock                  : out std_logic;                                        -- lock
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_writebyteenable       : out std_logic_vector(1 downto 0);                     -- writebyteenable
			av_chipselect            : out std_logic;                                        -- chipselect
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_translator;

	component steppermotorcontrol_mm_interconnect_0_jtag_uart_avalon_jtag_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(0 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_read                  : out std_logic;                                        -- read
			av_readdata              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_chipselect            : out std_logic;                                        -- chipselect
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable       : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_jtag_uart_avalon_jtag_slave_translator;

	component steppermotorcontrol_mm_interconnect_0_rtx_timer_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(2 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_readdata              : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(15 downto 0);                    -- writedata
			av_chipselect            : out std_logic;                                        -- chipselect
			av_read                  : out std_logic;                                        -- read
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable       : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_rtx_timer_s1_translator;

	component steppermotorcontrol_mm_interconnect_0_sysid_qsys_0_control_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(0 downto 0);                     -- address
			av_readdata              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_write                 : out std_logic;                                        -- write
			av_read                  : out std_logic;                                        -- read
			av_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable       : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_chipselect            : out std_logic;                                        -- chipselect
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_sysid_qsys_0_control_slave_translator;

	component steppermotorcontrol_mm_interconnect_0_lcd_control_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(1 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_read                  : out std_logic;                                        -- read
			av_readdata              : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(7 downto 0);                     -- writedata
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable       : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_chipselect            : out std_logic;                                        -- chipselect
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_lcd_control_slave_translator;

	component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(2 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_readdata              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			av_chipselect            : out std_logic;                                        -- chipselect
			av_read                  : out std_logic;                                        -- read
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable       : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator;

	component steppermotorcontrol_mm_interconnect_0_pio_key_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                     := 'X';             -- read
			uav_write                : in  std_logic                     := 'X';             -- write
			uav_waitrequest          : out std_logic;                                        -- waitrequest
			uav_readdatavalid        : out std_logic;                                        -- readdatavalid
			uav_byteenable           : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                     := 'X';             -- lock
			uav_debugaccess          : in  std_logic                     := 'X';             -- debugaccess
			av_address               : out std_logic_vector(1 downto 0);                     -- address
			av_write                 : out std_logic;                                        -- write
			av_readdata              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			av_chipselect            : out std_logic;                                        -- chipselect
			av_read                  : out std_logic;                                        -- read
			av_begintransfer         : out std_logic;                                        -- begintransfer
			av_beginbursttransfer    : out std_logic;                                        -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable            : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable       : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                        -- lock
			av_clken                 : out std_logic;                                        -- clken
			uav_clken                : in  std_logic                     := 'X';             -- clken
			av_debugaccess           : out std_logic;                                        -- debugaccess
			av_outputenable          : out std_logic;                                        -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                     -- response
			av_response              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                     := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                        -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                        -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_pio_key_s1_translator;

	component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent is
		generic (
			PKT_DATA_H                : integer := 31;
			PKT_DATA_L                : integer := 0;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_SYMBOL_W              : integer := 8;
			PKT_BYTEEN_H              : integer := 71;
			PKT_BYTEEN_L              : integer := 68;
			PKT_ADDR_H                : integer := 63;
			PKT_ADDR_L                : integer := 32;
			PKT_TRANS_COMPRESSED_READ : integer := 67;
			PKT_TRANS_POSTED          : integer := 66;
			PKT_TRANS_WRITE           : integer := 65;
			PKT_TRANS_READ            : integer := 64;
			PKT_TRANS_LOCK            : integer := 87;
			PKT_SRC_ID_H              : integer := 74;
			PKT_SRC_ID_L              : integer := 72;
			PKT_DEST_ID_H             : integer := 77;
			PKT_DEST_ID_L             : integer := 75;
			PKT_BURSTWRAP_H           : integer := 85;
			PKT_BURSTWRAP_L           : integer := 82;
			PKT_BYTE_CNT_H            : integer := 81;
			PKT_BYTE_CNT_L            : integer := 78;
			PKT_PROTECTION_H          : integer := 86;
			PKT_PROTECTION_L          : integer := 86;
			PKT_RESPONSE_STATUS_H     : integer := 89;
			PKT_RESPONSE_STATUS_L     : integer := 88;
			PKT_BURST_SIZE_H          : integer := 92;
			PKT_BURST_SIZE_L          : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 93;
			PKT_ORI_BURST_SIZE_H      : integer := 95;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			m0_address              : out std_logic_vector(20 downto 0);                    -- address
			m0_burstcount           : out std_logic_vector(2 downto 0);                     -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                     -- byteenable
			m0_debugaccess          : out std_logic;                                        -- debugaccess
			m0_lock                 : out std_logic;                                        -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                        -- read
			m0_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			m0_write                : out std_logic;                                        -- write
			rp_endofpacket          : out std_logic;                                        -- endofpacket
			rp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : out std_logic;                                        -- valid
			rp_data                 : out std_logic_vector(98 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_ready                : out std_logic;                                        -- ready
			cp_valid                : in  std_logic                     := 'X';             -- valid
			cp_data                 : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                        -- ready
			rf_sink_valid           : in  std_logic                     := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(99 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                     := 'X';             -- ready
			rf_source_valid         : out std_logic;                                        -- valid
			rf_source_startofpacket : out std_logic;                                        -- startofpacket
			rf_source_endofpacket   : out std_logic;                                        -- endofpacket
			rf_source_data          : out std_logic_vector(99 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                        -- ready
			rdata_fifo_sink_valid   : in  std_logic                     := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			rdata_fifo_src_ready    : in  std_logic                     := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                        -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                    -- data
			m0_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			m0_writeresponserequest : out std_logic;                                        -- writeresponserequest
			m0_writeresponsevalid   : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent;

	component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_agent is
		generic (
			PKT_DATA_H                : integer := 31;
			PKT_DATA_L                : integer := 0;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_SYMBOL_W              : integer := 8;
			PKT_BYTEEN_H              : integer := 71;
			PKT_BYTEEN_L              : integer := 68;
			PKT_ADDR_H                : integer := 63;
			PKT_ADDR_L                : integer := 32;
			PKT_TRANS_COMPRESSED_READ : integer := 67;
			PKT_TRANS_POSTED          : integer := 66;
			PKT_TRANS_WRITE           : integer := 65;
			PKT_TRANS_READ            : integer := 64;
			PKT_TRANS_LOCK            : integer := 87;
			PKT_SRC_ID_H              : integer := 74;
			PKT_SRC_ID_L              : integer := 72;
			PKT_DEST_ID_H             : integer := 77;
			PKT_DEST_ID_L             : integer := 75;
			PKT_BURSTWRAP_H           : integer := 85;
			PKT_BURSTWRAP_L           : integer := 82;
			PKT_BYTE_CNT_H            : integer := 81;
			PKT_BYTE_CNT_L            : integer := 78;
			PKT_PROTECTION_H          : integer := 86;
			PKT_PROTECTION_L          : integer := 86;
			PKT_RESPONSE_STATUS_H     : integer := 89;
			PKT_RESPONSE_STATUS_L     : integer := 88;
			PKT_BURST_SIZE_H          : integer := 92;
			PKT_BURST_SIZE_L          : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 93;
			PKT_ORI_BURST_SIZE_H      : integer := 95;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			m0_address              : out std_logic_vector(20 downto 0);                    -- address
			m0_burstcount           : out std_logic_vector(1 downto 0);                     -- burstcount
			m0_byteenable           : out std_logic_vector(1 downto 0);                     -- byteenable
			m0_debugaccess          : out std_logic;                                        -- debugaccess
			m0_lock                 : out std_logic;                                        -- lock
			m0_readdata             : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                        -- read
			m0_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(15 downto 0);                    -- writedata
			m0_write                : out std_logic;                                        -- write
			rp_endofpacket          : out std_logic;                                        -- endofpacket
			rp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : out std_logic;                                        -- valid
			rp_data                 : out std_logic_vector(80 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_ready                : out std_logic;                                        -- ready
			cp_valid                : in  std_logic                     := 'X';             -- valid
			cp_data                 : in  std_logic_vector(80 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                        -- ready
			rf_sink_valid           : in  std_logic                     := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(81 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                     := 'X';             -- ready
			rf_source_valid         : out std_logic;                                        -- valid
			rf_source_startofpacket : out std_logic;                                        -- startofpacket
			rf_source_endofpacket   : out std_logic;                                        -- endofpacket
			rf_source_data          : out std_logic_vector(81 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                        -- ready
			rdata_fifo_sink_valid   : in  std_logic                     := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(17 downto 0) := (others => 'X'); -- data
			rdata_fifo_src_ready    : in  std_logic                     := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                        -- valid
			rdata_fifo_src_data     : out std_logic_vector(17 downto 0);                    -- data
			m0_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			m0_writeresponserequest : out std_logic;                                        -- writeresponserequest
			m0_writeresponsevalid   : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_agent;

	component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_rsp_width_adapter is
		generic (
			IN_PKT_ADDR_H                 : integer := 60;
			IN_PKT_ADDR_L                 : integer := 36;
			IN_PKT_DATA_H                 : integer := 31;
			IN_PKT_DATA_L                 : integer := 0;
			IN_PKT_BYTEEN_H               : integer := 35;
			IN_PKT_BYTEEN_L               : integer := 32;
			IN_PKT_BYTE_CNT_H             : integer := 63;
			IN_PKT_BYTE_CNT_L             : integer := 61;
			IN_PKT_TRANS_COMPRESSED_READ  : integer := 65;
			IN_PKT_BURSTWRAP_H            : integer := 67;
			IN_PKT_BURSTWRAP_L            : integer := 66;
			IN_PKT_BURST_SIZE_H           : integer := 70;
			IN_PKT_BURST_SIZE_L           : integer := 68;
			IN_PKT_RESPONSE_STATUS_H      : integer := 72;
			IN_PKT_RESPONSE_STATUS_L      : integer := 71;
			IN_PKT_TRANS_EXCLUSIVE        : integer := 73;
			IN_PKT_BURST_TYPE_H           : integer := 75;
			IN_PKT_BURST_TYPE_L           : integer := 74;
			IN_PKT_ORI_BURST_SIZE_L       : integer := 110;
			IN_PKT_ORI_BURST_SIZE_H       : integer := 113;
			IN_ST_DATA_W                  : integer := 76;
			OUT_PKT_ADDR_H                : integer := 60;
			OUT_PKT_ADDR_L                : integer := 36;
			OUT_PKT_DATA_H                : integer := 31;
			OUT_PKT_DATA_L                : integer := 0;
			OUT_PKT_BYTEEN_H              : integer := 35;
			OUT_PKT_BYTEEN_L              : integer := 32;
			OUT_PKT_BYTE_CNT_H            : integer := 63;
			OUT_PKT_BYTE_CNT_L            : integer := 61;
			OUT_PKT_TRANS_COMPRESSED_READ : integer := 65;
			OUT_PKT_BURST_SIZE_H          : integer := 68;
			OUT_PKT_BURST_SIZE_L          : integer := 66;
			OUT_PKT_RESPONSE_STATUS_H     : integer := 70;
			OUT_PKT_RESPONSE_STATUS_L     : integer := 69;
			OUT_PKT_TRANS_EXCLUSIVE       : integer := 71;
			OUT_PKT_BURST_TYPE_H          : integer := 73;
			OUT_PKT_BURST_TYPE_L          : integer := 72;
			OUT_PKT_ORI_BURST_SIZE_L      : integer := 110;
			OUT_PKT_ORI_BURST_SIZE_H      : integer := 113;
			OUT_ST_DATA_W                 : integer := 74;
			ST_CHANNEL_W                  : integer := 32;
			OPTIMIZE_FOR_RSP              : integer := 0;
			RESPONSE_PATH                 : integer := 0;
			CONSTANT_BURST_SIZE           : integer := 1;
			PACKING                       : integer := 1;
			ENABLE_ADDRESS_ALIGNMENT      : integer := 1
		);
		port (
			clk                  : in  std_logic                     := 'X';             -- clk
			reset                : in  std_logic                     := 'X';             -- reset
			in_valid             : in  std_logic                     := 'X';             -- valid
			in_channel           : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			in_startofpacket     : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket       : in  std_logic                     := 'X';             -- endofpacket
			in_ready             : out std_logic;                                        -- ready
			in_data              : in  std_logic_vector(80 downto 0) := (others => 'X'); -- data
			out_endofpacket      : out std_logic;                                        -- endofpacket
			out_data             : out std_logic_vector(98 downto 0);                    -- data
			out_channel          : out std_logic_vector(12 downto 0);                    -- channel
			out_valid            : out std_logic;                                        -- valid
			out_ready            : in  std_logic                     := 'X';             -- ready
			out_startofpacket    : out std_logic;                                        -- startofpacket
			in_command_size_data : in  std_logic_vector(2 downto 0)  := (others => 'X')  -- data
		);
	end component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_rsp_width_adapter;

	component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_cmd_width_adapter is
		generic (
			IN_PKT_ADDR_H                 : integer := 60;
			IN_PKT_ADDR_L                 : integer := 36;
			IN_PKT_DATA_H                 : integer := 31;
			IN_PKT_DATA_L                 : integer := 0;
			IN_PKT_BYTEEN_H               : integer := 35;
			IN_PKT_BYTEEN_L               : integer := 32;
			IN_PKT_BYTE_CNT_H             : integer := 63;
			IN_PKT_BYTE_CNT_L             : integer := 61;
			IN_PKT_TRANS_COMPRESSED_READ  : integer := 65;
			IN_PKT_BURSTWRAP_H            : integer := 67;
			IN_PKT_BURSTWRAP_L            : integer := 66;
			IN_PKT_BURST_SIZE_H           : integer := 70;
			IN_PKT_BURST_SIZE_L           : integer := 68;
			IN_PKT_RESPONSE_STATUS_H      : integer := 72;
			IN_PKT_RESPONSE_STATUS_L      : integer := 71;
			IN_PKT_TRANS_EXCLUSIVE        : integer := 73;
			IN_PKT_BURST_TYPE_H           : integer := 75;
			IN_PKT_BURST_TYPE_L           : integer := 74;
			IN_PKT_ORI_BURST_SIZE_L       : integer := 110;
			IN_PKT_ORI_BURST_SIZE_H       : integer := 113;
			IN_ST_DATA_W                  : integer := 76;
			OUT_PKT_ADDR_H                : integer := 60;
			OUT_PKT_ADDR_L                : integer := 36;
			OUT_PKT_DATA_H                : integer := 31;
			OUT_PKT_DATA_L                : integer := 0;
			OUT_PKT_BYTEEN_H              : integer := 35;
			OUT_PKT_BYTEEN_L              : integer := 32;
			OUT_PKT_BYTE_CNT_H            : integer := 63;
			OUT_PKT_BYTE_CNT_L            : integer := 61;
			OUT_PKT_TRANS_COMPRESSED_READ : integer := 65;
			OUT_PKT_BURST_SIZE_H          : integer := 68;
			OUT_PKT_BURST_SIZE_L          : integer := 66;
			OUT_PKT_RESPONSE_STATUS_H     : integer := 70;
			OUT_PKT_RESPONSE_STATUS_L     : integer := 69;
			OUT_PKT_TRANS_EXCLUSIVE       : integer := 71;
			OUT_PKT_BURST_TYPE_H          : integer := 73;
			OUT_PKT_BURST_TYPE_L          : integer := 72;
			OUT_PKT_ORI_BURST_SIZE_L      : integer := 110;
			OUT_PKT_ORI_BURST_SIZE_H      : integer := 113;
			OUT_ST_DATA_W                 : integer := 74;
			ST_CHANNEL_W                  : integer := 32;
			OPTIMIZE_FOR_RSP              : integer := 0;
			RESPONSE_PATH                 : integer := 0;
			CONSTANT_BURST_SIZE           : integer := 1;
			PACKING                       : integer := 1;
			ENABLE_ADDRESS_ALIGNMENT      : integer := 1
		);
		port (
			clk                  : in  std_logic                     := 'X';             -- clk
			reset                : in  std_logic                     := 'X';             -- reset
			in_valid             : in  std_logic                     := 'X';             -- valid
			in_channel           : in  std_logic_vector(12 downto 0) := (others => 'X'); -- channel
			in_startofpacket     : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket       : in  std_logic                     := 'X';             -- endofpacket
			in_ready             : out std_logic;                                        -- ready
			in_data              : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			out_endofpacket      : out std_logic;                                        -- endofpacket
			out_data             : out std_logic_vector(80 downto 0);                    -- data
			out_channel          : out std_logic_vector(12 downto 0);                    -- channel
			out_valid            : out std_logic;                                        -- valid
			out_ready            : in  std_logic                     := 'X';             -- ready
			out_startofpacket    : out std_logic;                                        -- startofpacket
			in_command_size_data : in  std_logic_vector(2 downto 0)  := (others => 'X')  -- data
		);
	end component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_cmd_width_adapter;

	component steppermotorcontrol_mm_interconnect_0_cpu_instruction_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : out std_logic_vector(20 downto 0);                    -- address
			uav_burstcount           : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read                 : out std_logic;                                        -- read
			uav_write                : out std_logic;                                        -- write
			uav_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable           : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock                 : out std_logic;                                        -- lock
			uav_debugaccess          : out std_logic;                                        -- debugaccess
			av_address               : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			av_waitrequest           : out std_logic;                                        -- waitrequest
			av_read                  : in  std_logic                     := 'X';             -- read
			av_readdata              : out std_logic_vector(31 downto 0);                    -- readdata
			av_readdatavalid         : out std_logic;                                        -- readdatavalid
			av_burstcount            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable            : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer    : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer         : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect            : in  std_logic                     := 'X';             -- chipselect
			av_write                 : in  std_logic                     := 'X';             -- write
			av_writedata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_lock                  : in  std_logic                     := 'X';             -- lock
			av_debugaccess           : in  std_logic                     := 'X';             -- debugaccess
			uav_clken                : out std_logic;                                        -- clken
			av_clken                 : in  std_logic                     := 'X';             -- clken
			uav_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response              : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponserequest : out std_logic;                                        -- writeresponserequest
			uav_writeresponsevalid   : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponserequest  : in  std_logic                     := 'X';             -- writeresponserequest
			av_writeresponsevalid    : out std_logic                                         -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_cpu_instruction_master_translator;

	component steppermotorcontrol_mm_interconnect_0_cpu_data_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                      : in  std_logic                     := 'X';             -- clk
			reset                    : in  std_logic                     := 'X';             -- reset
			uav_address              : out std_logic_vector(20 downto 0);                    -- address
			uav_burstcount           : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read                 : out std_logic;                                        -- read
			uav_write                : out std_logic;                                        -- write
			uav_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable           : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock                 : out std_logic;                                        -- lock
			uav_debugaccess          : out std_logic;                                        -- debugaccess
			av_address               : in  std_logic_vector(20 downto 0) := (others => 'X'); -- address
			av_waitrequest           : out std_logic;                                        -- waitrequest
			av_byteenable            : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                  : in  std_logic                     := 'X';             -- read
			av_readdata              : out std_logic_vector(31 downto 0);                    -- readdata
			av_write                 : in  std_logic                     := 'X';             -- write
			av_writedata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_debugaccess           : in  std_logic                     := 'X';             -- debugaccess
			av_burstcount            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_beginbursttransfer    : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer         : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect            : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid         : out std_logic;                                        -- readdatavalid
			av_lock                  : in  std_logic                     := 'X';             -- lock
			uav_clken                : out std_logic;                                        -- clken
			av_clken                 : in  std_logic                     := 'X';             -- clken
			uav_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response              : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponserequest : out std_logic;                                        -- writeresponserequest
			uav_writeresponsevalid   : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponserequest  : in  std_logic                     := 'X';             -- writeresponserequest
			av_writeresponsevalid    : out std_logic                                         -- writeresponsevalid
		);
	end component steppermotorcontrol_mm_interconnect_0_cpu_data_master_translator;

	signal cpu_instruction_master_translator_avalon_universal_master_0_waitrequest   : std_logic;                     -- CPU_instruction_master_agent:av_waitrequest -> CPU_instruction_master_translator:uav_waitrequest
	signal cpu_instruction_master_translator_avalon_universal_master_0_burstcount    : std_logic_vector(2 downto 0);  -- CPU_instruction_master_translator:uav_burstcount -> CPU_instruction_master_agent:av_burstcount
	signal cpu_instruction_master_translator_avalon_universal_master_0_writedata     : std_logic_vector(31 downto 0); -- CPU_instruction_master_translator:uav_writedata -> CPU_instruction_master_agent:av_writedata
	signal cpu_instruction_master_translator_avalon_universal_master_0_address       : std_logic_vector(20 downto 0); -- CPU_instruction_master_translator:uav_address -> CPU_instruction_master_agent:av_address
	signal cpu_instruction_master_translator_avalon_universal_master_0_lock          : std_logic;                     -- CPU_instruction_master_translator:uav_lock -> CPU_instruction_master_agent:av_lock
	signal cpu_instruction_master_translator_avalon_universal_master_0_write         : std_logic;                     -- CPU_instruction_master_translator:uav_write -> CPU_instruction_master_agent:av_write
	signal cpu_instruction_master_translator_avalon_universal_master_0_read          : std_logic;                     -- CPU_instruction_master_translator:uav_read -> CPU_instruction_master_agent:av_read
	signal cpu_instruction_master_translator_avalon_universal_master_0_readdata      : std_logic_vector(31 downto 0); -- CPU_instruction_master_agent:av_readdata -> CPU_instruction_master_translator:uav_readdata
	signal cpu_instruction_master_translator_avalon_universal_master_0_debugaccess   : std_logic;                     -- CPU_instruction_master_translator:uav_debugaccess -> CPU_instruction_master_agent:av_debugaccess
	signal cpu_instruction_master_translator_avalon_universal_master_0_byteenable    : std_logic_vector(3 downto 0);  -- CPU_instruction_master_translator:uav_byteenable -> CPU_instruction_master_agent:av_byteenable
	signal cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid : std_logic;                     -- CPU_instruction_master_agent:av_readdatavalid -> CPU_instruction_master_translator:uav_readdatavalid
	signal cpu_data_master_translator_avalon_universal_master_0_waitrequest          : std_logic;                     -- CPU_data_master_agent:av_waitrequest -> CPU_data_master_translator:uav_waitrequest
	signal cpu_data_master_translator_avalon_universal_master_0_burstcount           : std_logic_vector(2 downto 0);  -- CPU_data_master_translator:uav_burstcount -> CPU_data_master_agent:av_burstcount
	signal cpu_data_master_translator_avalon_universal_master_0_writedata            : std_logic_vector(31 downto 0); -- CPU_data_master_translator:uav_writedata -> CPU_data_master_agent:av_writedata
	signal cpu_data_master_translator_avalon_universal_master_0_address              : std_logic_vector(20 downto 0); -- CPU_data_master_translator:uav_address -> CPU_data_master_agent:av_address
	signal cpu_data_master_translator_avalon_universal_master_0_lock                 : std_logic;                     -- CPU_data_master_translator:uav_lock -> CPU_data_master_agent:av_lock
	signal cpu_data_master_translator_avalon_universal_master_0_write                : std_logic;                     -- CPU_data_master_translator:uav_write -> CPU_data_master_agent:av_write
	signal cpu_data_master_translator_avalon_universal_master_0_read                 : std_logic;                     -- CPU_data_master_translator:uav_read -> CPU_data_master_agent:av_read
	signal cpu_data_master_translator_avalon_universal_master_0_readdata             : std_logic_vector(31 downto 0); -- CPU_data_master_agent:av_readdata -> CPU_data_master_translator:uav_readdata
	signal cpu_data_master_translator_avalon_universal_master_0_debugaccess          : std_logic;                     -- CPU_data_master_translator:uav_debugaccess -> CPU_data_master_agent:av_debugaccess
	signal cpu_data_master_translator_avalon_universal_master_0_byteenable           : std_logic_vector(3 downto 0);  -- CPU_data_master_translator:uav_byteenable -> CPU_data_master_agent:av_byteenable
	signal cpu_data_master_translator_avalon_universal_master_0_readdatavalid        : std_logic;                     -- CPU_data_master_agent:av_readdatavalid -> CPU_data_master_translator:uav_readdatavalid
	signal rsp_mux_001_src_endofpacket                                               : std_logic;                     -- rsp_mux_001:src_endofpacket -> CPU_data_master_agent:rp_endofpacket
	signal rsp_mux_001_src_valid                                                     : std_logic;                     -- rsp_mux_001:src_valid -> CPU_data_master_agent:rp_valid
	signal rsp_mux_001_src_startofpacket                                             : std_logic;                     -- rsp_mux_001:src_startofpacket -> CPU_data_master_agent:rp_startofpacket
	signal rsp_mux_001_src_data                                                      : std_logic_vector(98 downto 0); -- rsp_mux_001:src_data -> CPU_data_master_agent:rp_data
	signal rsp_mux_001_src_channel                                                   : std_logic_vector(12 downto 0); -- rsp_mux_001:src_channel -> CPU_data_master_agent:rp_channel
	signal rsp_mux_001_src_ready                                                     : std_logic;                     -- CPU_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	signal cpu_jtag_debug_module_agent_m0_waitrequest                                : std_logic;                     -- CPU_jtag_debug_module_translator:uav_waitrequest -> CPU_jtag_debug_module_agent:m0_waitrequest
	signal cpu_jtag_debug_module_agent_m0_burstcount                                 : std_logic_vector(2 downto 0);  -- CPU_jtag_debug_module_agent:m0_burstcount -> CPU_jtag_debug_module_translator:uav_burstcount
	signal cpu_jtag_debug_module_agent_m0_writedata                                  : std_logic_vector(31 downto 0); -- CPU_jtag_debug_module_agent:m0_writedata -> CPU_jtag_debug_module_translator:uav_writedata
	signal cpu_jtag_debug_module_agent_m0_address                                    : std_logic_vector(20 downto 0); -- CPU_jtag_debug_module_agent:m0_address -> CPU_jtag_debug_module_translator:uav_address
	signal cpu_jtag_debug_module_agent_m0_write                                      : std_logic;                     -- CPU_jtag_debug_module_agent:m0_write -> CPU_jtag_debug_module_translator:uav_write
	signal cpu_jtag_debug_module_agent_m0_lock                                       : std_logic;                     -- CPU_jtag_debug_module_agent:m0_lock -> CPU_jtag_debug_module_translator:uav_lock
	signal cpu_jtag_debug_module_agent_m0_read                                       : std_logic;                     -- CPU_jtag_debug_module_agent:m0_read -> CPU_jtag_debug_module_translator:uav_read
	signal cpu_jtag_debug_module_agent_m0_readdata                                   : std_logic_vector(31 downto 0); -- CPU_jtag_debug_module_translator:uav_readdata -> CPU_jtag_debug_module_agent:m0_readdata
	signal cpu_jtag_debug_module_agent_m0_readdatavalid                              : std_logic;                     -- CPU_jtag_debug_module_translator:uav_readdatavalid -> CPU_jtag_debug_module_agent:m0_readdatavalid
	signal cpu_jtag_debug_module_agent_m0_debugaccess                                : std_logic;                     -- CPU_jtag_debug_module_agent:m0_debugaccess -> CPU_jtag_debug_module_translator:uav_debugaccess
	signal cpu_jtag_debug_module_agent_m0_byteenable                                 : std_logic_vector(3 downto 0);  -- CPU_jtag_debug_module_agent:m0_byteenable -> CPU_jtag_debug_module_translator:uav_byteenable
	signal cpu_jtag_debug_module_agent_rf_source_endofpacket                         : std_logic;                     -- CPU_jtag_debug_module_agent:rf_source_endofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	signal cpu_jtag_debug_module_agent_rf_source_valid                               : std_logic;                     -- CPU_jtag_debug_module_agent:rf_source_valid -> CPU_jtag_debug_module_agent_rsp_fifo:in_valid
	signal cpu_jtag_debug_module_agent_rf_source_startofpacket                       : std_logic;                     -- CPU_jtag_debug_module_agent:rf_source_startofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	signal cpu_jtag_debug_module_agent_rf_source_data                                : std_logic_vector(99 downto 0); -- CPU_jtag_debug_module_agent:rf_source_data -> CPU_jtag_debug_module_agent_rsp_fifo:in_data
	signal cpu_jtag_debug_module_agent_rf_source_ready                               : std_logic;                     -- CPU_jtag_debug_module_agent_rsp_fifo:in_ready -> CPU_jtag_debug_module_agent:rf_source_ready
	signal cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket                      : std_logic;                     -- CPU_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> CPU_jtag_debug_module_agent:rf_sink_endofpacket
	signal cpu_jtag_debug_module_agent_rsp_fifo_out_valid                            : std_logic;                     -- CPU_jtag_debug_module_agent_rsp_fifo:out_valid -> CPU_jtag_debug_module_agent:rf_sink_valid
	signal cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket                    : std_logic;                     -- CPU_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> CPU_jtag_debug_module_agent:rf_sink_startofpacket
	signal cpu_jtag_debug_module_agent_rsp_fifo_out_data                             : std_logic_vector(99 downto 0); -- CPU_jtag_debug_module_agent_rsp_fifo:out_data -> CPU_jtag_debug_module_agent:rf_sink_data
	signal cpu_jtag_debug_module_agent_rsp_fifo_out_ready                            : std_logic;                     -- CPU_jtag_debug_module_agent:rf_sink_ready -> CPU_jtag_debug_module_agent_rsp_fifo:out_ready
	signal cpu_jtag_debug_module_agent_rdata_fifo_src_valid                          : std_logic;                     -- CPU_jtag_debug_module_agent:rdata_fifo_src_valid -> CPU_jtag_debug_module_agent:rdata_fifo_sink_valid
	signal cpu_jtag_debug_module_agent_rdata_fifo_src_data                           : std_logic_vector(33 downto 0); -- CPU_jtag_debug_module_agent:rdata_fifo_src_data -> CPU_jtag_debug_module_agent:rdata_fifo_sink_data
	signal cpu_jtag_debug_module_agent_rdata_fifo_src_ready                          : std_logic;                     -- CPU_jtag_debug_module_agent:rdata_fifo_sink_ready -> CPU_jtag_debug_module_agent:rdata_fifo_src_ready
	signal cmd_mux_src_endofpacket                                                   : std_logic;                     -- cmd_mux:src_endofpacket -> CPU_jtag_debug_module_agent:cp_endofpacket
	signal cmd_mux_src_valid                                                         : std_logic;                     -- cmd_mux:src_valid -> CPU_jtag_debug_module_agent:cp_valid
	signal cmd_mux_src_startofpacket                                                 : std_logic;                     -- cmd_mux:src_startofpacket -> CPU_jtag_debug_module_agent:cp_startofpacket
	signal cmd_mux_src_data                                                          : std_logic_vector(98 downto 0); -- cmd_mux:src_data -> CPU_jtag_debug_module_agent:cp_data
	signal cmd_mux_src_channel                                                       : std_logic_vector(12 downto 0); -- cmd_mux:src_channel -> CPU_jtag_debug_module_agent:cp_channel
	signal cmd_mux_src_ready                                                         : std_logic;                     -- CPU_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	signal sram_cvgx_uas_agent_m0_waitrequest                                        : std_logic;                     -- SRAM_CVGX_uas_translator:uav_waitrequest -> SRAM_CVGX_uas_agent:m0_waitrequest
	signal sram_cvgx_uas_agent_m0_burstcount                                         : std_logic_vector(1 downto 0);  -- SRAM_CVGX_uas_agent:m0_burstcount -> SRAM_CVGX_uas_translator:uav_burstcount
	signal sram_cvgx_uas_agent_m0_writedata                                          : std_logic_vector(15 downto 0); -- SRAM_CVGX_uas_agent:m0_writedata -> SRAM_CVGX_uas_translator:uav_writedata
	signal sram_cvgx_uas_agent_m0_address                                            : std_logic_vector(20 downto 0); -- SRAM_CVGX_uas_agent:m0_address -> SRAM_CVGX_uas_translator:uav_address
	signal sram_cvgx_uas_agent_m0_write                                              : std_logic;                     -- SRAM_CVGX_uas_agent:m0_write -> SRAM_CVGX_uas_translator:uav_write
	signal sram_cvgx_uas_agent_m0_lock                                               : std_logic;                     -- SRAM_CVGX_uas_agent:m0_lock -> SRAM_CVGX_uas_translator:uav_lock
	signal sram_cvgx_uas_agent_m0_read                                               : std_logic;                     -- SRAM_CVGX_uas_agent:m0_read -> SRAM_CVGX_uas_translator:uav_read
	signal sram_cvgx_uas_agent_m0_readdata                                           : std_logic_vector(15 downto 0); -- SRAM_CVGX_uas_translator:uav_readdata -> SRAM_CVGX_uas_agent:m0_readdata
	signal sram_cvgx_uas_agent_m0_readdatavalid                                      : std_logic;                     -- SRAM_CVGX_uas_translator:uav_readdatavalid -> SRAM_CVGX_uas_agent:m0_readdatavalid
	signal sram_cvgx_uas_agent_m0_debugaccess                                        : std_logic;                     -- SRAM_CVGX_uas_agent:m0_debugaccess -> SRAM_CVGX_uas_translator:uav_debugaccess
	signal sram_cvgx_uas_agent_m0_byteenable                                         : std_logic_vector(1 downto 0);  -- SRAM_CVGX_uas_agent:m0_byteenable -> SRAM_CVGX_uas_translator:uav_byteenable
	signal sram_cvgx_uas_agent_rf_source_endofpacket                                 : std_logic;                     -- SRAM_CVGX_uas_agent:rf_source_endofpacket -> SRAM_CVGX_uas_agent_rsp_fifo:in_endofpacket
	signal sram_cvgx_uas_agent_rf_source_valid                                       : std_logic;                     -- SRAM_CVGX_uas_agent:rf_source_valid -> SRAM_CVGX_uas_agent_rsp_fifo:in_valid
	signal sram_cvgx_uas_agent_rf_source_startofpacket                               : std_logic;                     -- SRAM_CVGX_uas_agent:rf_source_startofpacket -> SRAM_CVGX_uas_agent_rsp_fifo:in_startofpacket
	signal sram_cvgx_uas_agent_rf_source_data                                        : std_logic_vector(81 downto 0); -- SRAM_CVGX_uas_agent:rf_source_data -> SRAM_CVGX_uas_agent_rsp_fifo:in_data
	signal sram_cvgx_uas_agent_rf_source_ready                                       : std_logic;                     -- SRAM_CVGX_uas_agent_rsp_fifo:in_ready -> SRAM_CVGX_uas_agent:rf_source_ready
	signal sram_cvgx_uas_agent_rsp_fifo_out_endofpacket                              : std_logic;                     -- SRAM_CVGX_uas_agent_rsp_fifo:out_endofpacket -> SRAM_CVGX_uas_agent:rf_sink_endofpacket
	signal sram_cvgx_uas_agent_rsp_fifo_out_valid                                    : std_logic;                     -- SRAM_CVGX_uas_agent_rsp_fifo:out_valid -> SRAM_CVGX_uas_agent:rf_sink_valid
	signal sram_cvgx_uas_agent_rsp_fifo_out_startofpacket                            : std_logic;                     -- SRAM_CVGX_uas_agent_rsp_fifo:out_startofpacket -> SRAM_CVGX_uas_agent:rf_sink_startofpacket
	signal sram_cvgx_uas_agent_rsp_fifo_out_data                                     : std_logic_vector(81 downto 0); -- SRAM_CVGX_uas_agent_rsp_fifo:out_data -> SRAM_CVGX_uas_agent:rf_sink_data
	signal sram_cvgx_uas_agent_rsp_fifo_out_ready                                    : std_logic;                     -- SRAM_CVGX_uas_agent:rf_sink_ready -> SRAM_CVGX_uas_agent_rsp_fifo:out_ready
	signal sram_cvgx_uas_agent_rdata_fifo_src_valid                                  : std_logic;                     -- SRAM_CVGX_uas_agent:rdata_fifo_src_valid -> SRAM_CVGX_uas_agent_rdata_fifo:in_valid
	signal sram_cvgx_uas_agent_rdata_fifo_src_data                                   : std_logic_vector(17 downto 0); -- SRAM_CVGX_uas_agent:rdata_fifo_src_data -> SRAM_CVGX_uas_agent_rdata_fifo:in_data
	signal sram_cvgx_uas_agent_rdata_fifo_src_ready                                  : std_logic;                     -- SRAM_CVGX_uas_agent_rdata_fifo:in_ready -> SRAM_CVGX_uas_agent:rdata_fifo_src_ready
	signal sram_cvgx_uas_agent_rdata_fifo_out_valid                                  : std_logic;                     -- SRAM_CVGX_uas_agent_rdata_fifo:out_valid -> SRAM_CVGX_uas_agent:rdata_fifo_sink_valid
	signal sram_cvgx_uas_agent_rdata_fifo_out_data                                   : std_logic_vector(17 downto 0); -- SRAM_CVGX_uas_agent_rdata_fifo:out_data -> SRAM_CVGX_uas_agent:rdata_fifo_sink_data
	signal sram_cvgx_uas_agent_rdata_fifo_out_ready                                  : std_logic;                     -- SRAM_CVGX_uas_agent:rdata_fifo_sink_ready -> SRAM_CVGX_uas_agent_rdata_fifo:out_ready
	signal jtag_uart_avalon_jtag_slave_agent_m0_waitrequest                          : std_logic;                     -- jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	signal jtag_uart_avalon_jtag_slave_agent_m0_burstcount                           : std_logic_vector(2 downto 0);  -- jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	signal jtag_uart_avalon_jtag_slave_agent_m0_writedata                            : std_logic_vector(31 downto 0); -- jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	signal jtag_uart_avalon_jtag_slave_agent_m0_address                              : std_logic_vector(20 downto 0); -- jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	signal jtag_uart_avalon_jtag_slave_agent_m0_write                                : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	signal jtag_uart_avalon_jtag_slave_agent_m0_lock                                 : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	signal jtag_uart_avalon_jtag_slave_agent_m0_read                                 : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	signal jtag_uart_avalon_jtag_slave_agent_m0_readdata                             : std_logic_vector(31 downto 0); -- jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	signal jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid                        : std_logic;                     -- jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	signal jtag_uart_avalon_jtag_slave_agent_m0_debugaccess                          : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	signal jtag_uart_avalon_jtag_slave_agent_m0_byteenable                           : std_logic_vector(3 downto 0);  -- jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	signal jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket                   : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rf_source_valid                         : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	signal jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket                 : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rf_source_data                          : std_logic_vector(99 downto 0); -- jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	signal jtag_uart_avalon_jtag_slave_agent_rf_source_ready                         : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	signal jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket                : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid                      : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	signal jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket              : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data                       : std_logic_vector(99 downto 0); -- jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	signal jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready                      : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	signal jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid                    : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	signal jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data                     : std_logic_vector(33 downto 0); -- jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	signal jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready                    : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_002_src_endofpacket                                               : std_logic;                     -- cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	signal cmd_mux_002_src_valid                                                     : std_logic;                     -- cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	signal cmd_mux_002_src_startofpacket                                             : std_logic;                     -- cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	signal cmd_mux_002_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	signal cmd_mux_002_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	signal cmd_mux_002_src_ready                                                     : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	signal rtx_timer_s1_agent_m0_waitrequest                                         : std_logic;                     -- RTX_Timer_s1_translator:uav_waitrequest -> RTX_Timer_s1_agent:m0_waitrequest
	signal rtx_timer_s1_agent_m0_burstcount                                          : std_logic_vector(2 downto 0);  -- RTX_Timer_s1_agent:m0_burstcount -> RTX_Timer_s1_translator:uav_burstcount
	signal rtx_timer_s1_agent_m0_writedata                                           : std_logic_vector(31 downto 0); -- RTX_Timer_s1_agent:m0_writedata -> RTX_Timer_s1_translator:uav_writedata
	signal rtx_timer_s1_agent_m0_address                                             : std_logic_vector(20 downto 0); -- RTX_Timer_s1_agent:m0_address -> RTX_Timer_s1_translator:uav_address
	signal rtx_timer_s1_agent_m0_write                                               : std_logic;                     -- RTX_Timer_s1_agent:m0_write -> RTX_Timer_s1_translator:uav_write
	signal rtx_timer_s1_agent_m0_lock                                                : std_logic;                     -- RTX_Timer_s1_agent:m0_lock -> RTX_Timer_s1_translator:uav_lock
	signal rtx_timer_s1_agent_m0_read                                                : std_logic;                     -- RTX_Timer_s1_agent:m0_read -> RTX_Timer_s1_translator:uav_read
	signal rtx_timer_s1_agent_m0_readdata                                            : std_logic_vector(31 downto 0); -- RTX_Timer_s1_translator:uav_readdata -> RTX_Timer_s1_agent:m0_readdata
	signal rtx_timer_s1_agent_m0_readdatavalid                                       : std_logic;                     -- RTX_Timer_s1_translator:uav_readdatavalid -> RTX_Timer_s1_agent:m0_readdatavalid
	signal rtx_timer_s1_agent_m0_debugaccess                                         : std_logic;                     -- RTX_Timer_s1_agent:m0_debugaccess -> RTX_Timer_s1_translator:uav_debugaccess
	signal rtx_timer_s1_agent_m0_byteenable                                          : std_logic_vector(3 downto 0);  -- RTX_Timer_s1_agent:m0_byteenable -> RTX_Timer_s1_translator:uav_byteenable
	signal rtx_timer_s1_agent_rf_source_endofpacket                                  : std_logic;                     -- RTX_Timer_s1_agent:rf_source_endofpacket -> RTX_Timer_s1_agent_rsp_fifo:in_endofpacket
	signal rtx_timer_s1_agent_rf_source_valid                                        : std_logic;                     -- RTX_Timer_s1_agent:rf_source_valid -> RTX_Timer_s1_agent_rsp_fifo:in_valid
	signal rtx_timer_s1_agent_rf_source_startofpacket                                : std_logic;                     -- RTX_Timer_s1_agent:rf_source_startofpacket -> RTX_Timer_s1_agent_rsp_fifo:in_startofpacket
	signal rtx_timer_s1_agent_rf_source_data                                         : std_logic_vector(99 downto 0); -- RTX_Timer_s1_agent:rf_source_data -> RTX_Timer_s1_agent_rsp_fifo:in_data
	signal rtx_timer_s1_agent_rf_source_ready                                        : std_logic;                     -- RTX_Timer_s1_agent_rsp_fifo:in_ready -> RTX_Timer_s1_agent:rf_source_ready
	signal rtx_timer_s1_agent_rsp_fifo_out_endofpacket                               : std_logic;                     -- RTX_Timer_s1_agent_rsp_fifo:out_endofpacket -> RTX_Timer_s1_agent:rf_sink_endofpacket
	signal rtx_timer_s1_agent_rsp_fifo_out_valid                                     : std_logic;                     -- RTX_Timer_s1_agent_rsp_fifo:out_valid -> RTX_Timer_s1_agent:rf_sink_valid
	signal rtx_timer_s1_agent_rsp_fifo_out_startofpacket                             : std_logic;                     -- RTX_Timer_s1_agent_rsp_fifo:out_startofpacket -> RTX_Timer_s1_agent:rf_sink_startofpacket
	signal rtx_timer_s1_agent_rsp_fifo_out_data                                      : std_logic_vector(99 downto 0); -- RTX_Timer_s1_agent_rsp_fifo:out_data -> RTX_Timer_s1_agent:rf_sink_data
	signal rtx_timer_s1_agent_rsp_fifo_out_ready                                     : std_logic;                     -- RTX_Timer_s1_agent:rf_sink_ready -> RTX_Timer_s1_agent_rsp_fifo:out_ready
	signal rtx_timer_s1_agent_rdata_fifo_src_valid                                   : std_logic;                     -- RTX_Timer_s1_agent:rdata_fifo_src_valid -> RTX_Timer_s1_agent:rdata_fifo_sink_valid
	signal rtx_timer_s1_agent_rdata_fifo_src_data                                    : std_logic_vector(33 downto 0); -- RTX_Timer_s1_agent:rdata_fifo_src_data -> RTX_Timer_s1_agent:rdata_fifo_sink_data
	signal rtx_timer_s1_agent_rdata_fifo_src_ready                                   : std_logic;                     -- RTX_Timer_s1_agent:rdata_fifo_sink_ready -> RTX_Timer_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_003_src_endofpacket                                               : std_logic;                     -- cmd_mux_003:src_endofpacket -> RTX_Timer_s1_agent:cp_endofpacket
	signal cmd_mux_003_src_valid                                                     : std_logic;                     -- cmd_mux_003:src_valid -> RTX_Timer_s1_agent:cp_valid
	signal cmd_mux_003_src_startofpacket                                             : std_logic;                     -- cmd_mux_003:src_startofpacket -> RTX_Timer_s1_agent:cp_startofpacket
	signal cmd_mux_003_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_003:src_data -> RTX_Timer_s1_agent:cp_data
	signal cmd_mux_003_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_003:src_channel -> RTX_Timer_s1_agent:cp_channel
	signal cmd_mux_003_src_ready                                                     : std_logic;                     -- RTX_Timer_s1_agent:cp_ready -> cmd_mux_003:src_ready
	signal sysid_qsys_0_control_slave_agent_m0_waitrequest                           : std_logic;                     -- sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	signal sysid_qsys_0_control_slave_agent_m0_burstcount                            : std_logic_vector(2 downto 0);  -- sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	signal sysid_qsys_0_control_slave_agent_m0_writedata                             : std_logic_vector(31 downto 0); -- sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	signal sysid_qsys_0_control_slave_agent_m0_address                               : std_logic_vector(20 downto 0); -- sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	signal sysid_qsys_0_control_slave_agent_m0_write                                 : std_logic;                     -- sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	signal sysid_qsys_0_control_slave_agent_m0_lock                                  : std_logic;                     -- sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	signal sysid_qsys_0_control_slave_agent_m0_read                                  : std_logic;                     -- sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	signal sysid_qsys_0_control_slave_agent_m0_readdata                              : std_logic_vector(31 downto 0); -- sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	signal sysid_qsys_0_control_slave_agent_m0_readdatavalid                         : std_logic;                     -- sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	signal sysid_qsys_0_control_slave_agent_m0_debugaccess                           : std_logic;                     -- sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	signal sysid_qsys_0_control_slave_agent_m0_byteenable                            : std_logic_vector(3 downto 0);  -- sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	signal sysid_qsys_0_control_slave_agent_rf_source_endofpacket                    : std_logic;                     -- sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	signal sysid_qsys_0_control_slave_agent_rf_source_valid                          : std_logic;                     -- sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	signal sysid_qsys_0_control_slave_agent_rf_source_startofpacket                  : std_logic;                     -- sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	signal sysid_qsys_0_control_slave_agent_rf_source_data                           : std_logic_vector(99 downto 0); -- sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	signal sysid_qsys_0_control_slave_agent_rf_source_ready                          : std_logic;                     -- sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket                 : std_logic;                     -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid                       : std_logic;                     -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket               : std_logic;                     -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_data                        : std_logic_vector(99 downto 0); -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready                       : std_logic;                     -- sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid                     : std_logic;                     -- sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_data                      : std_logic_vector(33 downto 0); -- sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready                     : std_logic;                     -- sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_004_src_endofpacket                                               : std_logic;                     -- cmd_mux_004:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	signal cmd_mux_004_src_valid                                                     : std_logic;                     -- cmd_mux_004:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	signal cmd_mux_004_src_startofpacket                                             : std_logic;                     -- cmd_mux_004:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	signal cmd_mux_004_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_004:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	signal cmd_mux_004_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_004:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	signal cmd_mux_004_src_ready                                                     : std_logic;                     -- sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	signal lcd_control_slave_agent_m0_waitrequest                                    : std_logic;                     -- lcd_control_slave_translator:uav_waitrequest -> lcd_control_slave_agent:m0_waitrequest
	signal lcd_control_slave_agent_m0_burstcount                                     : std_logic_vector(2 downto 0);  -- lcd_control_slave_agent:m0_burstcount -> lcd_control_slave_translator:uav_burstcount
	signal lcd_control_slave_agent_m0_writedata                                      : std_logic_vector(31 downto 0); -- lcd_control_slave_agent:m0_writedata -> lcd_control_slave_translator:uav_writedata
	signal lcd_control_slave_agent_m0_address                                        : std_logic_vector(20 downto 0); -- lcd_control_slave_agent:m0_address -> lcd_control_slave_translator:uav_address
	signal lcd_control_slave_agent_m0_write                                          : std_logic;                     -- lcd_control_slave_agent:m0_write -> lcd_control_slave_translator:uav_write
	signal lcd_control_slave_agent_m0_lock                                           : std_logic;                     -- lcd_control_slave_agent:m0_lock -> lcd_control_slave_translator:uav_lock
	signal lcd_control_slave_agent_m0_read                                           : std_logic;                     -- lcd_control_slave_agent:m0_read -> lcd_control_slave_translator:uav_read
	signal lcd_control_slave_agent_m0_readdata                                       : std_logic_vector(31 downto 0); -- lcd_control_slave_translator:uav_readdata -> lcd_control_slave_agent:m0_readdata
	signal lcd_control_slave_agent_m0_readdatavalid                                  : std_logic;                     -- lcd_control_slave_translator:uav_readdatavalid -> lcd_control_slave_agent:m0_readdatavalid
	signal lcd_control_slave_agent_m0_debugaccess                                    : std_logic;                     -- lcd_control_slave_agent:m0_debugaccess -> lcd_control_slave_translator:uav_debugaccess
	signal lcd_control_slave_agent_m0_byteenable                                     : std_logic_vector(3 downto 0);  -- lcd_control_slave_agent:m0_byteenable -> lcd_control_slave_translator:uav_byteenable
	signal lcd_control_slave_agent_rf_source_endofpacket                             : std_logic;                     -- lcd_control_slave_agent:rf_source_endofpacket -> lcd_control_slave_agent_rsp_fifo:in_endofpacket
	signal lcd_control_slave_agent_rf_source_valid                                   : std_logic;                     -- lcd_control_slave_agent:rf_source_valid -> lcd_control_slave_agent_rsp_fifo:in_valid
	signal lcd_control_slave_agent_rf_source_startofpacket                           : std_logic;                     -- lcd_control_slave_agent:rf_source_startofpacket -> lcd_control_slave_agent_rsp_fifo:in_startofpacket
	signal lcd_control_slave_agent_rf_source_data                                    : std_logic_vector(99 downto 0); -- lcd_control_slave_agent:rf_source_data -> lcd_control_slave_agent_rsp_fifo:in_data
	signal lcd_control_slave_agent_rf_source_ready                                   : std_logic;                     -- lcd_control_slave_agent_rsp_fifo:in_ready -> lcd_control_slave_agent:rf_source_ready
	signal lcd_control_slave_agent_rsp_fifo_out_endofpacket                          : std_logic;                     -- lcd_control_slave_agent_rsp_fifo:out_endofpacket -> lcd_control_slave_agent:rf_sink_endofpacket
	signal lcd_control_slave_agent_rsp_fifo_out_valid                                : std_logic;                     -- lcd_control_slave_agent_rsp_fifo:out_valid -> lcd_control_slave_agent:rf_sink_valid
	signal lcd_control_slave_agent_rsp_fifo_out_startofpacket                        : std_logic;                     -- lcd_control_slave_agent_rsp_fifo:out_startofpacket -> lcd_control_slave_agent:rf_sink_startofpacket
	signal lcd_control_slave_agent_rsp_fifo_out_data                                 : std_logic_vector(99 downto 0); -- lcd_control_slave_agent_rsp_fifo:out_data -> lcd_control_slave_agent:rf_sink_data
	signal lcd_control_slave_agent_rsp_fifo_out_ready                                : std_logic;                     -- lcd_control_slave_agent:rf_sink_ready -> lcd_control_slave_agent_rsp_fifo:out_ready
	signal lcd_control_slave_agent_rdata_fifo_src_valid                              : std_logic;                     -- lcd_control_slave_agent:rdata_fifo_src_valid -> lcd_control_slave_agent:rdata_fifo_sink_valid
	signal lcd_control_slave_agent_rdata_fifo_src_data                               : std_logic_vector(33 downto 0); -- lcd_control_slave_agent:rdata_fifo_src_data -> lcd_control_slave_agent:rdata_fifo_sink_data
	signal lcd_control_slave_agent_rdata_fifo_src_ready                              : std_logic;                     -- lcd_control_slave_agent:rdata_fifo_sink_ready -> lcd_control_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_005_src_endofpacket                                               : std_logic;                     -- cmd_mux_005:src_endofpacket -> lcd_control_slave_agent:cp_endofpacket
	signal cmd_mux_005_src_valid                                                     : std_logic;                     -- cmd_mux_005:src_valid -> lcd_control_slave_agent:cp_valid
	signal cmd_mux_005_src_startofpacket                                             : std_logic;                     -- cmd_mux_005:src_startofpacket -> lcd_control_slave_agent:cp_startofpacket
	signal cmd_mux_005_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_005:src_data -> lcd_control_slave_agent:cp_data
	signal cmd_mux_005_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_005:src_channel -> lcd_control_slave_agent:cp_channel
	signal cmd_mux_005_src_ready                                                     : std_logic;                     -- lcd_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	signal pio_sw_s1_agent_m0_waitrequest                                            : std_logic;                     -- pio_sw_s1_translator:uav_waitrequest -> pio_sw_s1_agent:m0_waitrequest
	signal pio_sw_s1_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);  -- pio_sw_s1_agent:m0_burstcount -> pio_sw_s1_translator:uav_burstcount
	signal pio_sw_s1_agent_m0_writedata                                              : std_logic_vector(31 downto 0); -- pio_sw_s1_agent:m0_writedata -> pio_sw_s1_translator:uav_writedata
	signal pio_sw_s1_agent_m0_address                                                : std_logic_vector(20 downto 0); -- pio_sw_s1_agent:m0_address -> pio_sw_s1_translator:uav_address
	signal pio_sw_s1_agent_m0_write                                                  : std_logic;                     -- pio_sw_s1_agent:m0_write -> pio_sw_s1_translator:uav_write
	signal pio_sw_s1_agent_m0_lock                                                   : std_logic;                     -- pio_sw_s1_agent:m0_lock -> pio_sw_s1_translator:uav_lock
	signal pio_sw_s1_agent_m0_read                                                   : std_logic;                     -- pio_sw_s1_agent:m0_read -> pio_sw_s1_translator:uav_read
	signal pio_sw_s1_agent_m0_readdata                                               : std_logic_vector(31 downto 0); -- pio_sw_s1_translator:uav_readdata -> pio_sw_s1_agent:m0_readdata
	signal pio_sw_s1_agent_m0_readdatavalid                                          : std_logic;                     -- pio_sw_s1_translator:uav_readdatavalid -> pio_sw_s1_agent:m0_readdatavalid
	signal pio_sw_s1_agent_m0_debugaccess                                            : std_logic;                     -- pio_sw_s1_agent:m0_debugaccess -> pio_sw_s1_translator:uav_debugaccess
	signal pio_sw_s1_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);  -- pio_sw_s1_agent:m0_byteenable -> pio_sw_s1_translator:uav_byteenable
	signal pio_sw_s1_agent_rf_source_endofpacket                                     : std_logic;                     -- pio_sw_s1_agent:rf_source_endofpacket -> pio_sw_s1_agent_rsp_fifo:in_endofpacket
	signal pio_sw_s1_agent_rf_source_valid                                           : std_logic;                     -- pio_sw_s1_agent:rf_source_valid -> pio_sw_s1_agent_rsp_fifo:in_valid
	signal pio_sw_s1_agent_rf_source_startofpacket                                   : std_logic;                     -- pio_sw_s1_agent:rf_source_startofpacket -> pio_sw_s1_agent_rsp_fifo:in_startofpacket
	signal pio_sw_s1_agent_rf_source_data                                            : std_logic_vector(99 downto 0); -- pio_sw_s1_agent:rf_source_data -> pio_sw_s1_agent_rsp_fifo:in_data
	signal pio_sw_s1_agent_rf_source_ready                                           : std_logic;                     -- pio_sw_s1_agent_rsp_fifo:in_ready -> pio_sw_s1_agent:rf_source_ready
	signal pio_sw_s1_agent_rsp_fifo_out_endofpacket                                  : std_logic;                     -- pio_sw_s1_agent_rsp_fifo:out_endofpacket -> pio_sw_s1_agent:rf_sink_endofpacket
	signal pio_sw_s1_agent_rsp_fifo_out_valid                                        : std_logic;                     -- pio_sw_s1_agent_rsp_fifo:out_valid -> pio_sw_s1_agent:rf_sink_valid
	signal pio_sw_s1_agent_rsp_fifo_out_startofpacket                                : std_logic;                     -- pio_sw_s1_agent_rsp_fifo:out_startofpacket -> pio_sw_s1_agent:rf_sink_startofpacket
	signal pio_sw_s1_agent_rsp_fifo_out_data                                         : std_logic_vector(99 downto 0); -- pio_sw_s1_agent_rsp_fifo:out_data -> pio_sw_s1_agent:rf_sink_data
	signal pio_sw_s1_agent_rsp_fifo_out_ready                                        : std_logic;                     -- pio_sw_s1_agent:rf_sink_ready -> pio_sw_s1_agent_rsp_fifo:out_ready
	signal pio_sw_s1_agent_rdata_fifo_src_valid                                      : std_logic;                     -- pio_sw_s1_agent:rdata_fifo_src_valid -> pio_sw_s1_agent:rdata_fifo_sink_valid
	signal pio_sw_s1_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0); -- pio_sw_s1_agent:rdata_fifo_src_data -> pio_sw_s1_agent:rdata_fifo_sink_data
	signal pio_sw_s1_agent_rdata_fifo_src_ready                                      : std_logic;                     -- pio_sw_s1_agent:rdata_fifo_sink_ready -> pio_sw_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_006_src_endofpacket                                               : std_logic;                     -- cmd_mux_006:src_endofpacket -> pio_sw_s1_agent:cp_endofpacket
	signal cmd_mux_006_src_valid                                                     : std_logic;                     -- cmd_mux_006:src_valid -> pio_sw_s1_agent:cp_valid
	signal cmd_mux_006_src_startofpacket                                             : std_logic;                     -- cmd_mux_006:src_startofpacket -> pio_sw_s1_agent:cp_startofpacket
	signal cmd_mux_006_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_006:src_data -> pio_sw_s1_agent:cp_data
	signal cmd_mux_006_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_006:src_channel -> pio_sw_s1_agent:cp_channel
	signal cmd_mux_006_src_ready                                                     : std_logic;                     -- pio_sw_s1_agent:cp_ready -> cmd_mux_006:src_ready
	signal pio_key_s1_agent_m0_waitrequest                                           : std_logic;                     -- pio_key_s1_translator:uav_waitrequest -> pio_key_s1_agent:m0_waitrequest
	signal pio_key_s1_agent_m0_burstcount                                            : std_logic_vector(2 downto 0);  -- pio_key_s1_agent:m0_burstcount -> pio_key_s1_translator:uav_burstcount
	signal pio_key_s1_agent_m0_writedata                                             : std_logic_vector(31 downto 0); -- pio_key_s1_agent:m0_writedata -> pio_key_s1_translator:uav_writedata
	signal pio_key_s1_agent_m0_address                                               : std_logic_vector(20 downto 0); -- pio_key_s1_agent:m0_address -> pio_key_s1_translator:uav_address
	signal pio_key_s1_agent_m0_write                                                 : std_logic;                     -- pio_key_s1_agent:m0_write -> pio_key_s1_translator:uav_write
	signal pio_key_s1_agent_m0_lock                                                  : std_logic;                     -- pio_key_s1_agent:m0_lock -> pio_key_s1_translator:uav_lock
	signal pio_key_s1_agent_m0_read                                                  : std_logic;                     -- pio_key_s1_agent:m0_read -> pio_key_s1_translator:uav_read
	signal pio_key_s1_agent_m0_readdata                                              : std_logic_vector(31 downto 0); -- pio_key_s1_translator:uav_readdata -> pio_key_s1_agent:m0_readdata
	signal pio_key_s1_agent_m0_readdatavalid                                         : std_logic;                     -- pio_key_s1_translator:uav_readdatavalid -> pio_key_s1_agent:m0_readdatavalid
	signal pio_key_s1_agent_m0_debugaccess                                           : std_logic;                     -- pio_key_s1_agent:m0_debugaccess -> pio_key_s1_translator:uav_debugaccess
	signal pio_key_s1_agent_m0_byteenable                                            : std_logic_vector(3 downto 0);  -- pio_key_s1_agent:m0_byteenable -> pio_key_s1_translator:uav_byteenable
	signal pio_key_s1_agent_rf_source_endofpacket                                    : std_logic;                     -- pio_key_s1_agent:rf_source_endofpacket -> pio_key_s1_agent_rsp_fifo:in_endofpacket
	signal pio_key_s1_agent_rf_source_valid                                          : std_logic;                     -- pio_key_s1_agent:rf_source_valid -> pio_key_s1_agent_rsp_fifo:in_valid
	signal pio_key_s1_agent_rf_source_startofpacket                                  : std_logic;                     -- pio_key_s1_agent:rf_source_startofpacket -> pio_key_s1_agent_rsp_fifo:in_startofpacket
	signal pio_key_s1_agent_rf_source_data                                           : std_logic_vector(99 downto 0); -- pio_key_s1_agent:rf_source_data -> pio_key_s1_agent_rsp_fifo:in_data
	signal pio_key_s1_agent_rf_source_ready                                          : std_logic;                     -- pio_key_s1_agent_rsp_fifo:in_ready -> pio_key_s1_agent:rf_source_ready
	signal pio_key_s1_agent_rsp_fifo_out_endofpacket                                 : std_logic;                     -- pio_key_s1_agent_rsp_fifo:out_endofpacket -> pio_key_s1_agent:rf_sink_endofpacket
	signal pio_key_s1_agent_rsp_fifo_out_valid                                       : std_logic;                     -- pio_key_s1_agent_rsp_fifo:out_valid -> pio_key_s1_agent:rf_sink_valid
	signal pio_key_s1_agent_rsp_fifo_out_startofpacket                               : std_logic;                     -- pio_key_s1_agent_rsp_fifo:out_startofpacket -> pio_key_s1_agent:rf_sink_startofpacket
	signal pio_key_s1_agent_rsp_fifo_out_data                                        : std_logic_vector(99 downto 0); -- pio_key_s1_agent_rsp_fifo:out_data -> pio_key_s1_agent:rf_sink_data
	signal pio_key_s1_agent_rsp_fifo_out_ready                                       : std_logic;                     -- pio_key_s1_agent:rf_sink_ready -> pio_key_s1_agent_rsp_fifo:out_ready
	signal pio_key_s1_agent_rdata_fifo_src_valid                                     : std_logic;                     -- pio_key_s1_agent:rdata_fifo_src_valid -> pio_key_s1_agent:rdata_fifo_sink_valid
	signal pio_key_s1_agent_rdata_fifo_src_data                                      : std_logic_vector(33 downto 0); -- pio_key_s1_agent:rdata_fifo_src_data -> pio_key_s1_agent:rdata_fifo_sink_data
	signal pio_key_s1_agent_rdata_fifo_src_ready                                     : std_logic;                     -- pio_key_s1_agent:rdata_fifo_sink_ready -> pio_key_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_007_src_endofpacket                                               : std_logic;                     -- cmd_mux_007:src_endofpacket -> pio_key_s1_agent:cp_endofpacket
	signal cmd_mux_007_src_valid                                                     : std_logic;                     -- cmd_mux_007:src_valid -> pio_key_s1_agent:cp_valid
	signal cmd_mux_007_src_startofpacket                                             : std_logic;                     -- cmd_mux_007:src_startofpacket -> pio_key_s1_agent:cp_startofpacket
	signal cmd_mux_007_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_007:src_data -> pio_key_s1_agent:cp_data
	signal cmd_mux_007_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_007:src_channel -> pio_key_s1_agent:cp_channel
	signal cmd_mux_007_src_ready                                                     : std_logic;                     -- pio_key_s1_agent:cp_ready -> cmd_mux_007:src_ready
	signal pio_hex0_s1_agent_m0_waitrequest                                          : std_logic;                     -- pio_hex0_s1_translator:uav_waitrequest -> pio_hex0_s1_agent:m0_waitrequest
	signal pio_hex0_s1_agent_m0_burstcount                                           : std_logic_vector(2 downto 0);  -- pio_hex0_s1_agent:m0_burstcount -> pio_hex0_s1_translator:uav_burstcount
	signal pio_hex0_s1_agent_m0_writedata                                            : std_logic_vector(31 downto 0); -- pio_hex0_s1_agent:m0_writedata -> pio_hex0_s1_translator:uav_writedata
	signal pio_hex0_s1_agent_m0_address                                              : std_logic_vector(20 downto 0); -- pio_hex0_s1_agent:m0_address -> pio_hex0_s1_translator:uav_address
	signal pio_hex0_s1_agent_m0_write                                                : std_logic;                     -- pio_hex0_s1_agent:m0_write -> pio_hex0_s1_translator:uav_write
	signal pio_hex0_s1_agent_m0_lock                                                 : std_logic;                     -- pio_hex0_s1_agent:m0_lock -> pio_hex0_s1_translator:uav_lock
	signal pio_hex0_s1_agent_m0_read                                                 : std_logic;                     -- pio_hex0_s1_agent:m0_read -> pio_hex0_s1_translator:uav_read
	signal pio_hex0_s1_agent_m0_readdata                                             : std_logic_vector(31 downto 0); -- pio_hex0_s1_translator:uav_readdata -> pio_hex0_s1_agent:m0_readdata
	signal pio_hex0_s1_agent_m0_readdatavalid                                        : std_logic;                     -- pio_hex0_s1_translator:uav_readdatavalid -> pio_hex0_s1_agent:m0_readdatavalid
	signal pio_hex0_s1_agent_m0_debugaccess                                          : std_logic;                     -- pio_hex0_s1_agent:m0_debugaccess -> pio_hex0_s1_translator:uav_debugaccess
	signal pio_hex0_s1_agent_m0_byteenable                                           : std_logic_vector(3 downto 0);  -- pio_hex0_s1_agent:m0_byteenable -> pio_hex0_s1_translator:uav_byteenable
	signal pio_hex0_s1_agent_rf_source_endofpacket                                   : std_logic;                     -- pio_hex0_s1_agent:rf_source_endofpacket -> pio_hex0_s1_agent_rsp_fifo:in_endofpacket
	signal pio_hex0_s1_agent_rf_source_valid                                         : std_logic;                     -- pio_hex0_s1_agent:rf_source_valid -> pio_hex0_s1_agent_rsp_fifo:in_valid
	signal pio_hex0_s1_agent_rf_source_startofpacket                                 : std_logic;                     -- pio_hex0_s1_agent:rf_source_startofpacket -> pio_hex0_s1_agent_rsp_fifo:in_startofpacket
	signal pio_hex0_s1_agent_rf_source_data                                          : std_logic_vector(99 downto 0); -- pio_hex0_s1_agent:rf_source_data -> pio_hex0_s1_agent_rsp_fifo:in_data
	signal pio_hex0_s1_agent_rf_source_ready                                         : std_logic;                     -- pio_hex0_s1_agent_rsp_fifo:in_ready -> pio_hex0_s1_agent:rf_source_ready
	signal pio_hex0_s1_agent_rsp_fifo_out_endofpacket                                : std_logic;                     -- pio_hex0_s1_agent_rsp_fifo:out_endofpacket -> pio_hex0_s1_agent:rf_sink_endofpacket
	signal pio_hex0_s1_agent_rsp_fifo_out_valid                                      : std_logic;                     -- pio_hex0_s1_agent_rsp_fifo:out_valid -> pio_hex0_s1_agent:rf_sink_valid
	signal pio_hex0_s1_agent_rsp_fifo_out_startofpacket                              : std_logic;                     -- pio_hex0_s1_agent_rsp_fifo:out_startofpacket -> pio_hex0_s1_agent:rf_sink_startofpacket
	signal pio_hex0_s1_agent_rsp_fifo_out_data                                       : std_logic_vector(99 downto 0); -- pio_hex0_s1_agent_rsp_fifo:out_data -> pio_hex0_s1_agent:rf_sink_data
	signal pio_hex0_s1_agent_rsp_fifo_out_ready                                      : std_logic;                     -- pio_hex0_s1_agent:rf_sink_ready -> pio_hex0_s1_agent_rsp_fifo:out_ready
	signal pio_hex0_s1_agent_rdata_fifo_src_valid                                    : std_logic;                     -- pio_hex0_s1_agent:rdata_fifo_src_valid -> pio_hex0_s1_agent:rdata_fifo_sink_valid
	signal pio_hex0_s1_agent_rdata_fifo_src_data                                     : std_logic_vector(33 downto 0); -- pio_hex0_s1_agent:rdata_fifo_src_data -> pio_hex0_s1_agent:rdata_fifo_sink_data
	signal pio_hex0_s1_agent_rdata_fifo_src_ready                                    : std_logic;                     -- pio_hex0_s1_agent:rdata_fifo_sink_ready -> pio_hex0_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_008_src_endofpacket                                               : std_logic;                     -- cmd_mux_008:src_endofpacket -> pio_hex0_s1_agent:cp_endofpacket
	signal cmd_mux_008_src_valid                                                     : std_logic;                     -- cmd_mux_008:src_valid -> pio_hex0_s1_agent:cp_valid
	signal cmd_mux_008_src_startofpacket                                             : std_logic;                     -- cmd_mux_008:src_startofpacket -> pio_hex0_s1_agent:cp_startofpacket
	signal cmd_mux_008_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_008:src_data -> pio_hex0_s1_agent:cp_data
	signal cmd_mux_008_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_008:src_channel -> pio_hex0_s1_agent:cp_channel
	signal cmd_mux_008_src_ready                                                     : std_logic;                     -- pio_hex0_s1_agent:cp_ready -> cmd_mux_008:src_ready
	signal pio_hex1_s1_agent_m0_waitrequest                                          : std_logic;                     -- pio_hex1_s1_translator:uav_waitrequest -> pio_hex1_s1_agent:m0_waitrequest
	signal pio_hex1_s1_agent_m0_burstcount                                           : std_logic_vector(2 downto 0);  -- pio_hex1_s1_agent:m0_burstcount -> pio_hex1_s1_translator:uav_burstcount
	signal pio_hex1_s1_agent_m0_writedata                                            : std_logic_vector(31 downto 0); -- pio_hex1_s1_agent:m0_writedata -> pio_hex1_s1_translator:uav_writedata
	signal pio_hex1_s1_agent_m0_address                                              : std_logic_vector(20 downto 0); -- pio_hex1_s1_agent:m0_address -> pio_hex1_s1_translator:uav_address
	signal pio_hex1_s1_agent_m0_write                                                : std_logic;                     -- pio_hex1_s1_agent:m0_write -> pio_hex1_s1_translator:uav_write
	signal pio_hex1_s1_agent_m0_lock                                                 : std_logic;                     -- pio_hex1_s1_agent:m0_lock -> pio_hex1_s1_translator:uav_lock
	signal pio_hex1_s1_agent_m0_read                                                 : std_logic;                     -- pio_hex1_s1_agent:m0_read -> pio_hex1_s1_translator:uav_read
	signal pio_hex1_s1_agent_m0_readdata                                             : std_logic_vector(31 downto 0); -- pio_hex1_s1_translator:uav_readdata -> pio_hex1_s1_agent:m0_readdata
	signal pio_hex1_s1_agent_m0_readdatavalid                                        : std_logic;                     -- pio_hex1_s1_translator:uav_readdatavalid -> pio_hex1_s1_agent:m0_readdatavalid
	signal pio_hex1_s1_agent_m0_debugaccess                                          : std_logic;                     -- pio_hex1_s1_agent:m0_debugaccess -> pio_hex1_s1_translator:uav_debugaccess
	signal pio_hex1_s1_agent_m0_byteenable                                           : std_logic_vector(3 downto 0);  -- pio_hex1_s1_agent:m0_byteenable -> pio_hex1_s1_translator:uav_byteenable
	signal pio_hex1_s1_agent_rf_source_endofpacket                                   : std_logic;                     -- pio_hex1_s1_agent:rf_source_endofpacket -> pio_hex1_s1_agent_rsp_fifo:in_endofpacket
	signal pio_hex1_s1_agent_rf_source_valid                                         : std_logic;                     -- pio_hex1_s1_agent:rf_source_valid -> pio_hex1_s1_agent_rsp_fifo:in_valid
	signal pio_hex1_s1_agent_rf_source_startofpacket                                 : std_logic;                     -- pio_hex1_s1_agent:rf_source_startofpacket -> pio_hex1_s1_agent_rsp_fifo:in_startofpacket
	signal pio_hex1_s1_agent_rf_source_data                                          : std_logic_vector(99 downto 0); -- pio_hex1_s1_agent:rf_source_data -> pio_hex1_s1_agent_rsp_fifo:in_data
	signal pio_hex1_s1_agent_rf_source_ready                                         : std_logic;                     -- pio_hex1_s1_agent_rsp_fifo:in_ready -> pio_hex1_s1_agent:rf_source_ready
	signal pio_hex1_s1_agent_rsp_fifo_out_endofpacket                                : std_logic;                     -- pio_hex1_s1_agent_rsp_fifo:out_endofpacket -> pio_hex1_s1_agent:rf_sink_endofpacket
	signal pio_hex1_s1_agent_rsp_fifo_out_valid                                      : std_logic;                     -- pio_hex1_s1_agent_rsp_fifo:out_valid -> pio_hex1_s1_agent:rf_sink_valid
	signal pio_hex1_s1_agent_rsp_fifo_out_startofpacket                              : std_logic;                     -- pio_hex1_s1_agent_rsp_fifo:out_startofpacket -> pio_hex1_s1_agent:rf_sink_startofpacket
	signal pio_hex1_s1_agent_rsp_fifo_out_data                                       : std_logic_vector(99 downto 0); -- pio_hex1_s1_agent_rsp_fifo:out_data -> pio_hex1_s1_agent:rf_sink_data
	signal pio_hex1_s1_agent_rsp_fifo_out_ready                                      : std_logic;                     -- pio_hex1_s1_agent:rf_sink_ready -> pio_hex1_s1_agent_rsp_fifo:out_ready
	signal pio_hex1_s1_agent_rdata_fifo_src_valid                                    : std_logic;                     -- pio_hex1_s1_agent:rdata_fifo_src_valid -> pio_hex1_s1_agent:rdata_fifo_sink_valid
	signal pio_hex1_s1_agent_rdata_fifo_src_data                                     : std_logic_vector(33 downto 0); -- pio_hex1_s1_agent:rdata_fifo_src_data -> pio_hex1_s1_agent:rdata_fifo_sink_data
	signal pio_hex1_s1_agent_rdata_fifo_src_ready                                    : std_logic;                     -- pio_hex1_s1_agent:rdata_fifo_sink_ready -> pio_hex1_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_009_src_endofpacket                                               : std_logic;                     -- cmd_mux_009:src_endofpacket -> pio_hex1_s1_agent:cp_endofpacket
	signal cmd_mux_009_src_valid                                                     : std_logic;                     -- cmd_mux_009:src_valid -> pio_hex1_s1_agent:cp_valid
	signal cmd_mux_009_src_startofpacket                                             : std_logic;                     -- cmd_mux_009:src_startofpacket -> pio_hex1_s1_agent:cp_startofpacket
	signal cmd_mux_009_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_009:src_data -> pio_hex1_s1_agent:cp_data
	signal cmd_mux_009_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_009:src_channel -> pio_hex1_s1_agent:cp_channel
	signal cmd_mux_009_src_ready                                                     : std_logic;                     -- pio_hex1_s1_agent:cp_ready -> cmd_mux_009:src_ready
	signal pio_hex2_s1_agent_m0_waitrequest                                          : std_logic;                     -- pio_hex2_s1_translator:uav_waitrequest -> pio_hex2_s1_agent:m0_waitrequest
	signal pio_hex2_s1_agent_m0_burstcount                                           : std_logic_vector(2 downto 0);  -- pio_hex2_s1_agent:m0_burstcount -> pio_hex2_s1_translator:uav_burstcount
	signal pio_hex2_s1_agent_m0_writedata                                            : std_logic_vector(31 downto 0); -- pio_hex2_s1_agent:m0_writedata -> pio_hex2_s1_translator:uav_writedata
	signal pio_hex2_s1_agent_m0_address                                              : std_logic_vector(20 downto 0); -- pio_hex2_s1_agent:m0_address -> pio_hex2_s1_translator:uav_address
	signal pio_hex2_s1_agent_m0_write                                                : std_logic;                     -- pio_hex2_s1_agent:m0_write -> pio_hex2_s1_translator:uav_write
	signal pio_hex2_s1_agent_m0_lock                                                 : std_logic;                     -- pio_hex2_s1_agent:m0_lock -> pio_hex2_s1_translator:uav_lock
	signal pio_hex2_s1_agent_m0_read                                                 : std_logic;                     -- pio_hex2_s1_agent:m0_read -> pio_hex2_s1_translator:uav_read
	signal pio_hex2_s1_agent_m0_readdata                                             : std_logic_vector(31 downto 0); -- pio_hex2_s1_translator:uav_readdata -> pio_hex2_s1_agent:m0_readdata
	signal pio_hex2_s1_agent_m0_readdatavalid                                        : std_logic;                     -- pio_hex2_s1_translator:uav_readdatavalid -> pio_hex2_s1_agent:m0_readdatavalid
	signal pio_hex2_s1_agent_m0_debugaccess                                          : std_logic;                     -- pio_hex2_s1_agent:m0_debugaccess -> pio_hex2_s1_translator:uav_debugaccess
	signal pio_hex2_s1_agent_m0_byteenable                                           : std_logic_vector(3 downto 0);  -- pio_hex2_s1_agent:m0_byteenable -> pio_hex2_s1_translator:uav_byteenable
	signal pio_hex2_s1_agent_rf_source_endofpacket                                   : std_logic;                     -- pio_hex2_s1_agent:rf_source_endofpacket -> pio_hex2_s1_agent_rsp_fifo:in_endofpacket
	signal pio_hex2_s1_agent_rf_source_valid                                         : std_logic;                     -- pio_hex2_s1_agent:rf_source_valid -> pio_hex2_s1_agent_rsp_fifo:in_valid
	signal pio_hex2_s1_agent_rf_source_startofpacket                                 : std_logic;                     -- pio_hex2_s1_agent:rf_source_startofpacket -> pio_hex2_s1_agent_rsp_fifo:in_startofpacket
	signal pio_hex2_s1_agent_rf_source_data                                          : std_logic_vector(99 downto 0); -- pio_hex2_s1_agent:rf_source_data -> pio_hex2_s1_agent_rsp_fifo:in_data
	signal pio_hex2_s1_agent_rf_source_ready                                         : std_logic;                     -- pio_hex2_s1_agent_rsp_fifo:in_ready -> pio_hex2_s1_agent:rf_source_ready
	signal pio_hex2_s1_agent_rsp_fifo_out_endofpacket                                : std_logic;                     -- pio_hex2_s1_agent_rsp_fifo:out_endofpacket -> pio_hex2_s1_agent:rf_sink_endofpacket
	signal pio_hex2_s1_agent_rsp_fifo_out_valid                                      : std_logic;                     -- pio_hex2_s1_agent_rsp_fifo:out_valid -> pio_hex2_s1_agent:rf_sink_valid
	signal pio_hex2_s1_agent_rsp_fifo_out_startofpacket                              : std_logic;                     -- pio_hex2_s1_agent_rsp_fifo:out_startofpacket -> pio_hex2_s1_agent:rf_sink_startofpacket
	signal pio_hex2_s1_agent_rsp_fifo_out_data                                       : std_logic_vector(99 downto 0); -- pio_hex2_s1_agent_rsp_fifo:out_data -> pio_hex2_s1_agent:rf_sink_data
	signal pio_hex2_s1_agent_rsp_fifo_out_ready                                      : std_logic;                     -- pio_hex2_s1_agent:rf_sink_ready -> pio_hex2_s1_agent_rsp_fifo:out_ready
	signal pio_hex2_s1_agent_rdata_fifo_src_valid                                    : std_logic;                     -- pio_hex2_s1_agent:rdata_fifo_src_valid -> pio_hex2_s1_agent:rdata_fifo_sink_valid
	signal pio_hex2_s1_agent_rdata_fifo_src_data                                     : std_logic_vector(33 downto 0); -- pio_hex2_s1_agent:rdata_fifo_src_data -> pio_hex2_s1_agent:rdata_fifo_sink_data
	signal pio_hex2_s1_agent_rdata_fifo_src_ready                                    : std_logic;                     -- pio_hex2_s1_agent:rdata_fifo_sink_ready -> pio_hex2_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_010_src_endofpacket                                               : std_logic;                     -- cmd_mux_010:src_endofpacket -> pio_hex2_s1_agent:cp_endofpacket
	signal cmd_mux_010_src_valid                                                     : std_logic;                     -- cmd_mux_010:src_valid -> pio_hex2_s1_agent:cp_valid
	signal cmd_mux_010_src_startofpacket                                             : std_logic;                     -- cmd_mux_010:src_startofpacket -> pio_hex2_s1_agent:cp_startofpacket
	signal cmd_mux_010_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_010:src_data -> pio_hex2_s1_agent:cp_data
	signal cmd_mux_010_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_010:src_channel -> pio_hex2_s1_agent:cp_channel
	signal cmd_mux_010_src_ready                                                     : std_logic;                     -- pio_hex2_s1_agent:cp_ready -> cmd_mux_010:src_ready
	signal pio_hex3_s1_agent_m0_waitrequest                                          : std_logic;                     -- pio_hex3_s1_translator:uav_waitrequest -> pio_hex3_s1_agent:m0_waitrequest
	signal pio_hex3_s1_agent_m0_burstcount                                           : std_logic_vector(2 downto 0);  -- pio_hex3_s1_agent:m0_burstcount -> pio_hex3_s1_translator:uav_burstcount
	signal pio_hex3_s1_agent_m0_writedata                                            : std_logic_vector(31 downto 0); -- pio_hex3_s1_agent:m0_writedata -> pio_hex3_s1_translator:uav_writedata
	signal pio_hex3_s1_agent_m0_address                                              : std_logic_vector(20 downto 0); -- pio_hex3_s1_agent:m0_address -> pio_hex3_s1_translator:uav_address
	signal pio_hex3_s1_agent_m0_write                                                : std_logic;                     -- pio_hex3_s1_agent:m0_write -> pio_hex3_s1_translator:uav_write
	signal pio_hex3_s1_agent_m0_lock                                                 : std_logic;                     -- pio_hex3_s1_agent:m0_lock -> pio_hex3_s1_translator:uav_lock
	signal pio_hex3_s1_agent_m0_read                                                 : std_logic;                     -- pio_hex3_s1_agent:m0_read -> pio_hex3_s1_translator:uav_read
	signal pio_hex3_s1_agent_m0_readdata                                             : std_logic_vector(31 downto 0); -- pio_hex3_s1_translator:uav_readdata -> pio_hex3_s1_agent:m0_readdata
	signal pio_hex3_s1_agent_m0_readdatavalid                                        : std_logic;                     -- pio_hex3_s1_translator:uav_readdatavalid -> pio_hex3_s1_agent:m0_readdatavalid
	signal pio_hex3_s1_agent_m0_debugaccess                                          : std_logic;                     -- pio_hex3_s1_agent:m0_debugaccess -> pio_hex3_s1_translator:uav_debugaccess
	signal pio_hex3_s1_agent_m0_byteenable                                           : std_logic_vector(3 downto 0);  -- pio_hex3_s1_agent:m0_byteenable -> pio_hex3_s1_translator:uav_byteenable
	signal pio_hex3_s1_agent_rf_source_endofpacket                                   : std_logic;                     -- pio_hex3_s1_agent:rf_source_endofpacket -> pio_hex3_s1_agent_rsp_fifo:in_endofpacket
	signal pio_hex3_s1_agent_rf_source_valid                                         : std_logic;                     -- pio_hex3_s1_agent:rf_source_valid -> pio_hex3_s1_agent_rsp_fifo:in_valid
	signal pio_hex3_s1_agent_rf_source_startofpacket                                 : std_logic;                     -- pio_hex3_s1_agent:rf_source_startofpacket -> pio_hex3_s1_agent_rsp_fifo:in_startofpacket
	signal pio_hex3_s1_agent_rf_source_data                                          : std_logic_vector(99 downto 0); -- pio_hex3_s1_agent:rf_source_data -> pio_hex3_s1_agent_rsp_fifo:in_data
	signal pio_hex3_s1_agent_rf_source_ready                                         : std_logic;                     -- pio_hex3_s1_agent_rsp_fifo:in_ready -> pio_hex3_s1_agent:rf_source_ready
	signal pio_hex3_s1_agent_rsp_fifo_out_endofpacket                                : std_logic;                     -- pio_hex3_s1_agent_rsp_fifo:out_endofpacket -> pio_hex3_s1_agent:rf_sink_endofpacket
	signal pio_hex3_s1_agent_rsp_fifo_out_valid                                      : std_logic;                     -- pio_hex3_s1_agent_rsp_fifo:out_valid -> pio_hex3_s1_agent:rf_sink_valid
	signal pio_hex3_s1_agent_rsp_fifo_out_startofpacket                              : std_logic;                     -- pio_hex3_s1_agent_rsp_fifo:out_startofpacket -> pio_hex3_s1_agent:rf_sink_startofpacket
	signal pio_hex3_s1_agent_rsp_fifo_out_data                                       : std_logic_vector(99 downto 0); -- pio_hex3_s1_agent_rsp_fifo:out_data -> pio_hex3_s1_agent:rf_sink_data
	signal pio_hex3_s1_agent_rsp_fifo_out_ready                                      : std_logic;                     -- pio_hex3_s1_agent:rf_sink_ready -> pio_hex3_s1_agent_rsp_fifo:out_ready
	signal pio_hex3_s1_agent_rdata_fifo_src_valid                                    : std_logic;                     -- pio_hex3_s1_agent:rdata_fifo_src_valid -> pio_hex3_s1_agent:rdata_fifo_sink_valid
	signal pio_hex3_s1_agent_rdata_fifo_src_data                                     : std_logic_vector(33 downto 0); -- pio_hex3_s1_agent:rdata_fifo_src_data -> pio_hex3_s1_agent:rdata_fifo_sink_data
	signal pio_hex3_s1_agent_rdata_fifo_src_ready                                    : std_logic;                     -- pio_hex3_s1_agent:rdata_fifo_sink_ready -> pio_hex3_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_011_src_endofpacket                                               : std_logic;                     -- cmd_mux_011:src_endofpacket -> pio_hex3_s1_agent:cp_endofpacket
	signal cmd_mux_011_src_valid                                                     : std_logic;                     -- cmd_mux_011:src_valid -> pio_hex3_s1_agent:cp_valid
	signal cmd_mux_011_src_startofpacket                                             : std_logic;                     -- cmd_mux_011:src_startofpacket -> pio_hex3_s1_agent:cp_startofpacket
	signal cmd_mux_011_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_011:src_data -> pio_hex3_s1_agent:cp_data
	signal cmd_mux_011_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_011:src_channel -> pio_hex3_s1_agent:cp_channel
	signal cmd_mux_011_src_ready                                                     : std_logic;                     -- pio_hex3_s1_agent:cp_ready -> cmd_mux_011:src_ready
	signal pio_led9_s1_agent_m0_waitrequest                                          : std_logic;                     -- pio_led9_s1_translator:uav_waitrequest -> pio_led9_s1_agent:m0_waitrequest
	signal pio_led9_s1_agent_m0_burstcount                                           : std_logic_vector(2 downto 0);  -- pio_led9_s1_agent:m0_burstcount -> pio_led9_s1_translator:uav_burstcount
	signal pio_led9_s1_agent_m0_writedata                                            : std_logic_vector(31 downto 0); -- pio_led9_s1_agent:m0_writedata -> pio_led9_s1_translator:uav_writedata
	signal pio_led9_s1_agent_m0_address                                              : std_logic_vector(20 downto 0); -- pio_led9_s1_agent:m0_address -> pio_led9_s1_translator:uav_address
	signal pio_led9_s1_agent_m0_write                                                : std_logic;                     -- pio_led9_s1_agent:m0_write -> pio_led9_s1_translator:uav_write
	signal pio_led9_s1_agent_m0_lock                                                 : std_logic;                     -- pio_led9_s1_agent:m0_lock -> pio_led9_s1_translator:uav_lock
	signal pio_led9_s1_agent_m0_read                                                 : std_logic;                     -- pio_led9_s1_agent:m0_read -> pio_led9_s1_translator:uav_read
	signal pio_led9_s1_agent_m0_readdata                                             : std_logic_vector(31 downto 0); -- pio_led9_s1_translator:uav_readdata -> pio_led9_s1_agent:m0_readdata
	signal pio_led9_s1_agent_m0_readdatavalid                                        : std_logic;                     -- pio_led9_s1_translator:uav_readdatavalid -> pio_led9_s1_agent:m0_readdatavalid
	signal pio_led9_s1_agent_m0_debugaccess                                          : std_logic;                     -- pio_led9_s1_agent:m0_debugaccess -> pio_led9_s1_translator:uav_debugaccess
	signal pio_led9_s1_agent_m0_byteenable                                           : std_logic_vector(3 downto 0);  -- pio_led9_s1_agent:m0_byteenable -> pio_led9_s1_translator:uav_byteenable
	signal pio_led9_s1_agent_rf_source_endofpacket                                   : std_logic;                     -- pio_led9_s1_agent:rf_source_endofpacket -> pio_led9_s1_agent_rsp_fifo:in_endofpacket
	signal pio_led9_s1_agent_rf_source_valid                                         : std_logic;                     -- pio_led9_s1_agent:rf_source_valid -> pio_led9_s1_agent_rsp_fifo:in_valid
	signal pio_led9_s1_agent_rf_source_startofpacket                                 : std_logic;                     -- pio_led9_s1_agent:rf_source_startofpacket -> pio_led9_s1_agent_rsp_fifo:in_startofpacket
	signal pio_led9_s1_agent_rf_source_data                                          : std_logic_vector(99 downto 0); -- pio_led9_s1_agent:rf_source_data -> pio_led9_s1_agent_rsp_fifo:in_data
	signal pio_led9_s1_agent_rf_source_ready                                         : std_logic;                     -- pio_led9_s1_agent_rsp_fifo:in_ready -> pio_led9_s1_agent:rf_source_ready
	signal pio_led9_s1_agent_rsp_fifo_out_endofpacket                                : std_logic;                     -- pio_led9_s1_agent_rsp_fifo:out_endofpacket -> pio_led9_s1_agent:rf_sink_endofpacket
	signal pio_led9_s1_agent_rsp_fifo_out_valid                                      : std_logic;                     -- pio_led9_s1_agent_rsp_fifo:out_valid -> pio_led9_s1_agent:rf_sink_valid
	signal pio_led9_s1_agent_rsp_fifo_out_startofpacket                              : std_logic;                     -- pio_led9_s1_agent_rsp_fifo:out_startofpacket -> pio_led9_s1_agent:rf_sink_startofpacket
	signal pio_led9_s1_agent_rsp_fifo_out_data                                       : std_logic_vector(99 downto 0); -- pio_led9_s1_agent_rsp_fifo:out_data -> pio_led9_s1_agent:rf_sink_data
	signal pio_led9_s1_agent_rsp_fifo_out_ready                                      : std_logic;                     -- pio_led9_s1_agent:rf_sink_ready -> pio_led9_s1_agent_rsp_fifo:out_ready
	signal pio_led9_s1_agent_rdata_fifo_src_valid                                    : std_logic;                     -- pio_led9_s1_agent:rdata_fifo_src_valid -> pio_led9_s1_agent:rdata_fifo_sink_valid
	signal pio_led9_s1_agent_rdata_fifo_src_data                                     : std_logic_vector(33 downto 0); -- pio_led9_s1_agent:rdata_fifo_src_data -> pio_led9_s1_agent:rdata_fifo_sink_data
	signal pio_led9_s1_agent_rdata_fifo_src_ready                                    : std_logic;                     -- pio_led9_s1_agent:rdata_fifo_sink_ready -> pio_led9_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_012_src_endofpacket                                               : std_logic;                     -- cmd_mux_012:src_endofpacket -> pio_led9_s1_agent:cp_endofpacket
	signal cmd_mux_012_src_valid                                                     : std_logic;                     -- cmd_mux_012:src_valid -> pio_led9_s1_agent:cp_valid
	signal cmd_mux_012_src_startofpacket                                             : std_logic;                     -- cmd_mux_012:src_startofpacket -> pio_led9_s1_agent:cp_startofpacket
	signal cmd_mux_012_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_012:src_data -> pio_led9_s1_agent:cp_data
	signal cmd_mux_012_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_012:src_channel -> pio_led9_s1_agent:cp_channel
	signal cmd_mux_012_src_ready                                                     : std_logic;                     -- pio_led9_s1_agent:cp_ready -> cmd_mux_012:src_ready
	signal cpu_instruction_master_agent_cp_endofpacket                               : std_logic;                     -- CPU_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	signal cpu_instruction_master_agent_cp_valid                                     : std_logic;                     -- CPU_instruction_master_agent:cp_valid -> router:sink_valid
	signal cpu_instruction_master_agent_cp_startofpacket                             : std_logic;                     -- CPU_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	signal cpu_instruction_master_agent_cp_data                                      : std_logic_vector(98 downto 0); -- CPU_instruction_master_agent:cp_data -> router:sink_data
	signal cpu_instruction_master_agent_cp_ready                                     : std_logic;                     -- router:sink_ready -> CPU_instruction_master_agent:cp_ready
	signal cpu_data_master_agent_cp_endofpacket                                      : std_logic;                     -- CPU_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	signal cpu_data_master_agent_cp_valid                                            : std_logic;                     -- CPU_data_master_agent:cp_valid -> router_001:sink_valid
	signal cpu_data_master_agent_cp_startofpacket                                    : std_logic;                     -- CPU_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	signal cpu_data_master_agent_cp_data                                             : std_logic_vector(98 downto 0); -- CPU_data_master_agent:cp_data -> router_001:sink_data
	signal cpu_data_master_agent_cp_ready                                            : std_logic;                     -- router_001:sink_ready -> CPU_data_master_agent:cp_ready
	signal router_001_src_endofpacket                                                : std_logic;                     -- router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	signal router_001_src_valid                                                      : std_logic;                     -- router_001:src_valid -> cmd_demux_001:sink_valid
	signal router_001_src_startofpacket                                              : std_logic;                     -- router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	signal router_001_src_data                                                       : std_logic_vector(98 downto 0); -- router_001:src_data -> cmd_demux_001:sink_data
	signal router_001_src_channel                                                    : std_logic_vector(12 downto 0); -- router_001:src_channel -> cmd_demux_001:sink_channel
	signal router_001_src_ready                                                      : std_logic;                     -- cmd_demux_001:sink_ready -> router_001:src_ready
	signal cpu_jtag_debug_module_agent_rp_endofpacket                                : std_logic;                     -- CPU_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	signal cpu_jtag_debug_module_agent_rp_valid                                      : std_logic;                     -- CPU_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	signal cpu_jtag_debug_module_agent_rp_startofpacket                              : std_logic;                     -- CPU_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	signal cpu_jtag_debug_module_agent_rp_data                                       : std_logic_vector(98 downto 0); -- CPU_jtag_debug_module_agent:rp_data -> router_002:sink_data
	signal cpu_jtag_debug_module_agent_rp_ready                                      : std_logic;                     -- router_002:sink_ready -> CPU_jtag_debug_module_agent:rp_ready
	signal router_002_src_endofpacket                                                : std_logic;                     -- router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	signal router_002_src_valid                                                      : std_logic;                     -- router_002:src_valid -> rsp_demux:sink_valid
	signal router_002_src_startofpacket                                              : std_logic;                     -- router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	signal router_002_src_data                                                       : std_logic_vector(98 downto 0); -- router_002:src_data -> rsp_demux:sink_data
	signal router_002_src_channel                                                    : std_logic_vector(12 downto 0); -- router_002:src_channel -> rsp_demux:sink_channel
	signal router_002_src_ready                                                      : std_logic;                     -- rsp_demux:sink_ready -> router_002:src_ready
	signal sram_cvgx_uas_agent_rp_endofpacket                                        : std_logic;                     -- SRAM_CVGX_uas_agent:rp_endofpacket -> router_003:sink_endofpacket
	signal sram_cvgx_uas_agent_rp_valid                                              : std_logic;                     -- SRAM_CVGX_uas_agent:rp_valid -> router_003:sink_valid
	signal sram_cvgx_uas_agent_rp_startofpacket                                      : std_logic;                     -- SRAM_CVGX_uas_agent:rp_startofpacket -> router_003:sink_startofpacket
	signal sram_cvgx_uas_agent_rp_data                                               : std_logic_vector(80 downto 0); -- SRAM_CVGX_uas_agent:rp_data -> router_003:sink_data
	signal sram_cvgx_uas_agent_rp_ready                                              : std_logic;                     -- router_003:sink_ready -> SRAM_CVGX_uas_agent:rp_ready
	signal jtag_uart_avalon_jtag_slave_agent_rp_endofpacket                          : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rp_valid                                : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	signal jtag_uart_avalon_jtag_slave_agent_rp_startofpacket                        : std_logic;                     -- jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	signal jtag_uart_avalon_jtag_slave_agent_rp_data                                 : std_logic_vector(98 downto 0); -- jtag_uart_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	signal jtag_uart_avalon_jtag_slave_agent_rp_ready                                : std_logic;                     -- router_004:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	signal router_004_src_endofpacket                                                : std_logic;                     -- router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	signal router_004_src_valid                                                      : std_logic;                     -- router_004:src_valid -> rsp_demux_002:sink_valid
	signal router_004_src_startofpacket                                              : std_logic;                     -- router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	signal router_004_src_data                                                       : std_logic_vector(98 downto 0); -- router_004:src_data -> rsp_demux_002:sink_data
	signal router_004_src_channel                                                    : std_logic_vector(12 downto 0); -- router_004:src_channel -> rsp_demux_002:sink_channel
	signal router_004_src_ready                                                      : std_logic;                     -- rsp_demux_002:sink_ready -> router_004:src_ready
	signal rtx_timer_s1_agent_rp_endofpacket                                         : std_logic;                     -- RTX_Timer_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	signal rtx_timer_s1_agent_rp_valid                                               : std_logic;                     -- RTX_Timer_s1_agent:rp_valid -> router_005:sink_valid
	signal rtx_timer_s1_agent_rp_startofpacket                                       : std_logic;                     -- RTX_Timer_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	signal rtx_timer_s1_agent_rp_data                                                : std_logic_vector(98 downto 0); -- RTX_Timer_s1_agent:rp_data -> router_005:sink_data
	signal rtx_timer_s1_agent_rp_ready                                               : std_logic;                     -- router_005:sink_ready -> RTX_Timer_s1_agent:rp_ready
	signal router_005_src_endofpacket                                                : std_logic;                     -- router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	signal router_005_src_valid                                                      : std_logic;                     -- router_005:src_valid -> rsp_demux_003:sink_valid
	signal router_005_src_startofpacket                                              : std_logic;                     -- router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	signal router_005_src_data                                                       : std_logic_vector(98 downto 0); -- router_005:src_data -> rsp_demux_003:sink_data
	signal router_005_src_channel                                                    : std_logic_vector(12 downto 0); -- router_005:src_channel -> rsp_demux_003:sink_channel
	signal router_005_src_ready                                                      : std_logic;                     -- rsp_demux_003:sink_ready -> router_005:src_ready
	signal sysid_qsys_0_control_slave_agent_rp_endofpacket                           : std_logic;                     -- sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	signal sysid_qsys_0_control_slave_agent_rp_valid                                 : std_logic;                     -- sysid_qsys_0_control_slave_agent:rp_valid -> router_006:sink_valid
	signal sysid_qsys_0_control_slave_agent_rp_startofpacket                         : std_logic;                     -- sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	signal sysid_qsys_0_control_slave_agent_rp_data                                  : std_logic_vector(98 downto 0); -- sysid_qsys_0_control_slave_agent:rp_data -> router_006:sink_data
	signal sysid_qsys_0_control_slave_agent_rp_ready                                 : std_logic;                     -- router_006:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	signal router_006_src_endofpacket                                                : std_logic;                     -- router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	signal router_006_src_valid                                                      : std_logic;                     -- router_006:src_valid -> rsp_demux_004:sink_valid
	signal router_006_src_startofpacket                                              : std_logic;                     -- router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	signal router_006_src_data                                                       : std_logic_vector(98 downto 0); -- router_006:src_data -> rsp_demux_004:sink_data
	signal router_006_src_channel                                                    : std_logic_vector(12 downto 0); -- router_006:src_channel -> rsp_demux_004:sink_channel
	signal router_006_src_ready                                                      : std_logic;                     -- rsp_demux_004:sink_ready -> router_006:src_ready
	signal lcd_control_slave_agent_rp_endofpacket                                    : std_logic;                     -- lcd_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	signal lcd_control_slave_agent_rp_valid                                          : std_logic;                     -- lcd_control_slave_agent:rp_valid -> router_007:sink_valid
	signal lcd_control_slave_agent_rp_startofpacket                                  : std_logic;                     -- lcd_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	signal lcd_control_slave_agent_rp_data                                           : std_logic_vector(98 downto 0); -- lcd_control_slave_agent:rp_data -> router_007:sink_data
	signal lcd_control_slave_agent_rp_ready                                          : std_logic;                     -- router_007:sink_ready -> lcd_control_slave_agent:rp_ready
	signal router_007_src_endofpacket                                                : std_logic;                     -- router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	signal router_007_src_valid                                                      : std_logic;                     -- router_007:src_valid -> rsp_demux_005:sink_valid
	signal router_007_src_startofpacket                                              : std_logic;                     -- router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	signal router_007_src_data                                                       : std_logic_vector(98 downto 0); -- router_007:src_data -> rsp_demux_005:sink_data
	signal router_007_src_channel                                                    : std_logic_vector(12 downto 0); -- router_007:src_channel -> rsp_demux_005:sink_channel
	signal router_007_src_ready                                                      : std_logic;                     -- rsp_demux_005:sink_ready -> router_007:src_ready
	signal pio_sw_s1_agent_rp_endofpacket                                            : std_logic;                     -- pio_sw_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	signal pio_sw_s1_agent_rp_valid                                                  : std_logic;                     -- pio_sw_s1_agent:rp_valid -> router_008:sink_valid
	signal pio_sw_s1_agent_rp_startofpacket                                          : std_logic;                     -- pio_sw_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	signal pio_sw_s1_agent_rp_data                                                   : std_logic_vector(98 downto 0); -- pio_sw_s1_agent:rp_data -> router_008:sink_data
	signal pio_sw_s1_agent_rp_ready                                                  : std_logic;                     -- router_008:sink_ready -> pio_sw_s1_agent:rp_ready
	signal router_008_src_endofpacket                                                : std_logic;                     -- router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	signal router_008_src_valid                                                      : std_logic;                     -- router_008:src_valid -> rsp_demux_006:sink_valid
	signal router_008_src_startofpacket                                              : std_logic;                     -- router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	signal router_008_src_data                                                       : std_logic_vector(98 downto 0); -- router_008:src_data -> rsp_demux_006:sink_data
	signal router_008_src_channel                                                    : std_logic_vector(12 downto 0); -- router_008:src_channel -> rsp_demux_006:sink_channel
	signal router_008_src_ready                                                      : std_logic;                     -- rsp_demux_006:sink_ready -> router_008:src_ready
	signal pio_key_s1_agent_rp_endofpacket                                           : std_logic;                     -- pio_key_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	signal pio_key_s1_agent_rp_valid                                                 : std_logic;                     -- pio_key_s1_agent:rp_valid -> router_009:sink_valid
	signal pio_key_s1_agent_rp_startofpacket                                         : std_logic;                     -- pio_key_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	signal pio_key_s1_agent_rp_data                                                  : std_logic_vector(98 downto 0); -- pio_key_s1_agent:rp_data -> router_009:sink_data
	signal pio_key_s1_agent_rp_ready                                                 : std_logic;                     -- router_009:sink_ready -> pio_key_s1_agent:rp_ready
	signal router_009_src_endofpacket                                                : std_logic;                     -- router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	signal router_009_src_valid                                                      : std_logic;                     -- router_009:src_valid -> rsp_demux_007:sink_valid
	signal router_009_src_startofpacket                                              : std_logic;                     -- router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	signal router_009_src_data                                                       : std_logic_vector(98 downto 0); -- router_009:src_data -> rsp_demux_007:sink_data
	signal router_009_src_channel                                                    : std_logic_vector(12 downto 0); -- router_009:src_channel -> rsp_demux_007:sink_channel
	signal router_009_src_ready                                                      : std_logic;                     -- rsp_demux_007:sink_ready -> router_009:src_ready
	signal pio_hex0_s1_agent_rp_endofpacket                                          : std_logic;                     -- pio_hex0_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	signal pio_hex0_s1_agent_rp_valid                                                : std_logic;                     -- pio_hex0_s1_agent:rp_valid -> router_010:sink_valid
	signal pio_hex0_s1_agent_rp_startofpacket                                        : std_logic;                     -- pio_hex0_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	signal pio_hex0_s1_agent_rp_data                                                 : std_logic_vector(98 downto 0); -- pio_hex0_s1_agent:rp_data -> router_010:sink_data
	signal pio_hex0_s1_agent_rp_ready                                                : std_logic;                     -- router_010:sink_ready -> pio_hex0_s1_agent:rp_ready
	signal router_010_src_endofpacket                                                : std_logic;                     -- router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	signal router_010_src_valid                                                      : std_logic;                     -- router_010:src_valid -> rsp_demux_008:sink_valid
	signal router_010_src_startofpacket                                              : std_logic;                     -- router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	signal router_010_src_data                                                       : std_logic_vector(98 downto 0); -- router_010:src_data -> rsp_demux_008:sink_data
	signal router_010_src_channel                                                    : std_logic_vector(12 downto 0); -- router_010:src_channel -> rsp_demux_008:sink_channel
	signal router_010_src_ready                                                      : std_logic;                     -- rsp_demux_008:sink_ready -> router_010:src_ready
	signal pio_hex1_s1_agent_rp_endofpacket                                          : std_logic;                     -- pio_hex1_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	signal pio_hex1_s1_agent_rp_valid                                                : std_logic;                     -- pio_hex1_s1_agent:rp_valid -> router_011:sink_valid
	signal pio_hex1_s1_agent_rp_startofpacket                                        : std_logic;                     -- pio_hex1_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	signal pio_hex1_s1_agent_rp_data                                                 : std_logic_vector(98 downto 0); -- pio_hex1_s1_agent:rp_data -> router_011:sink_data
	signal pio_hex1_s1_agent_rp_ready                                                : std_logic;                     -- router_011:sink_ready -> pio_hex1_s1_agent:rp_ready
	signal router_011_src_endofpacket                                                : std_logic;                     -- router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	signal router_011_src_valid                                                      : std_logic;                     -- router_011:src_valid -> rsp_demux_009:sink_valid
	signal router_011_src_startofpacket                                              : std_logic;                     -- router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	signal router_011_src_data                                                       : std_logic_vector(98 downto 0); -- router_011:src_data -> rsp_demux_009:sink_data
	signal router_011_src_channel                                                    : std_logic_vector(12 downto 0); -- router_011:src_channel -> rsp_demux_009:sink_channel
	signal router_011_src_ready                                                      : std_logic;                     -- rsp_demux_009:sink_ready -> router_011:src_ready
	signal pio_hex2_s1_agent_rp_endofpacket                                          : std_logic;                     -- pio_hex2_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	signal pio_hex2_s1_agent_rp_valid                                                : std_logic;                     -- pio_hex2_s1_agent:rp_valid -> router_012:sink_valid
	signal pio_hex2_s1_agent_rp_startofpacket                                        : std_logic;                     -- pio_hex2_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	signal pio_hex2_s1_agent_rp_data                                                 : std_logic_vector(98 downto 0); -- pio_hex2_s1_agent:rp_data -> router_012:sink_data
	signal pio_hex2_s1_agent_rp_ready                                                : std_logic;                     -- router_012:sink_ready -> pio_hex2_s1_agent:rp_ready
	signal router_012_src_endofpacket                                                : std_logic;                     -- router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	signal router_012_src_valid                                                      : std_logic;                     -- router_012:src_valid -> rsp_demux_010:sink_valid
	signal router_012_src_startofpacket                                              : std_logic;                     -- router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	signal router_012_src_data                                                       : std_logic_vector(98 downto 0); -- router_012:src_data -> rsp_demux_010:sink_data
	signal router_012_src_channel                                                    : std_logic_vector(12 downto 0); -- router_012:src_channel -> rsp_demux_010:sink_channel
	signal router_012_src_ready                                                      : std_logic;                     -- rsp_demux_010:sink_ready -> router_012:src_ready
	signal pio_hex3_s1_agent_rp_endofpacket                                          : std_logic;                     -- pio_hex3_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	signal pio_hex3_s1_agent_rp_valid                                                : std_logic;                     -- pio_hex3_s1_agent:rp_valid -> router_013:sink_valid
	signal pio_hex3_s1_agent_rp_startofpacket                                        : std_logic;                     -- pio_hex3_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	signal pio_hex3_s1_agent_rp_data                                                 : std_logic_vector(98 downto 0); -- pio_hex3_s1_agent:rp_data -> router_013:sink_data
	signal pio_hex3_s1_agent_rp_ready                                                : std_logic;                     -- router_013:sink_ready -> pio_hex3_s1_agent:rp_ready
	signal router_013_src_endofpacket                                                : std_logic;                     -- router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	signal router_013_src_valid                                                      : std_logic;                     -- router_013:src_valid -> rsp_demux_011:sink_valid
	signal router_013_src_startofpacket                                              : std_logic;                     -- router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	signal router_013_src_data                                                       : std_logic_vector(98 downto 0); -- router_013:src_data -> rsp_demux_011:sink_data
	signal router_013_src_channel                                                    : std_logic_vector(12 downto 0); -- router_013:src_channel -> rsp_demux_011:sink_channel
	signal router_013_src_ready                                                      : std_logic;                     -- rsp_demux_011:sink_ready -> router_013:src_ready
	signal pio_led9_s1_agent_rp_endofpacket                                          : std_logic;                     -- pio_led9_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	signal pio_led9_s1_agent_rp_valid                                                : std_logic;                     -- pio_led9_s1_agent:rp_valid -> router_014:sink_valid
	signal pio_led9_s1_agent_rp_startofpacket                                        : std_logic;                     -- pio_led9_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	signal pio_led9_s1_agent_rp_data                                                 : std_logic_vector(98 downto 0); -- pio_led9_s1_agent:rp_data -> router_014:sink_data
	signal pio_led9_s1_agent_rp_ready                                                : std_logic;                     -- router_014:sink_ready -> pio_led9_s1_agent:rp_ready
	signal router_014_src_endofpacket                                                : std_logic;                     -- router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	signal router_014_src_valid                                                      : std_logic;                     -- router_014:src_valid -> rsp_demux_012:sink_valid
	signal router_014_src_startofpacket                                              : std_logic;                     -- router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	signal router_014_src_data                                                       : std_logic_vector(98 downto 0); -- router_014:src_data -> rsp_demux_012:sink_data
	signal router_014_src_channel                                                    : std_logic_vector(12 downto 0); -- router_014:src_channel -> rsp_demux_012:sink_channel
	signal router_014_src_ready                                                      : std_logic;                     -- rsp_demux_012:sink_ready -> router_014:src_ready
	signal router_src_endofpacket                                                    : std_logic;                     -- router:src_endofpacket -> CPU_instruction_master_limiter:cmd_sink_endofpacket
	signal router_src_valid                                                          : std_logic;                     -- router:src_valid -> CPU_instruction_master_limiter:cmd_sink_valid
	signal router_src_startofpacket                                                  : std_logic;                     -- router:src_startofpacket -> CPU_instruction_master_limiter:cmd_sink_startofpacket
	signal router_src_data                                                           : std_logic_vector(98 downto 0); -- router:src_data -> CPU_instruction_master_limiter:cmd_sink_data
	signal router_src_channel                                                        : std_logic_vector(12 downto 0); -- router:src_channel -> CPU_instruction_master_limiter:cmd_sink_channel
	signal router_src_ready                                                          : std_logic;                     -- CPU_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	signal cpu_instruction_master_limiter_cmd_src_endofpacket                        : std_logic;                     -- CPU_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	signal cpu_instruction_master_limiter_cmd_src_startofpacket                      : std_logic;                     -- CPU_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	signal cpu_instruction_master_limiter_cmd_src_data                               : std_logic_vector(98 downto 0); -- CPU_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	signal cpu_instruction_master_limiter_cmd_src_channel                            : std_logic_vector(12 downto 0); -- CPU_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	signal cpu_instruction_master_limiter_cmd_src_ready                              : std_logic;                     -- cmd_demux:sink_ready -> CPU_instruction_master_limiter:cmd_src_ready
	signal rsp_mux_src_endofpacket                                                   : std_logic;                     -- rsp_mux:src_endofpacket -> CPU_instruction_master_limiter:rsp_sink_endofpacket
	signal rsp_mux_src_valid                                                         : std_logic;                     -- rsp_mux:src_valid -> CPU_instruction_master_limiter:rsp_sink_valid
	signal rsp_mux_src_startofpacket                                                 : std_logic;                     -- rsp_mux:src_startofpacket -> CPU_instruction_master_limiter:rsp_sink_startofpacket
	signal rsp_mux_src_data                                                          : std_logic_vector(98 downto 0); -- rsp_mux:src_data -> CPU_instruction_master_limiter:rsp_sink_data
	signal rsp_mux_src_channel                                                       : std_logic_vector(12 downto 0); -- rsp_mux:src_channel -> CPU_instruction_master_limiter:rsp_sink_channel
	signal rsp_mux_src_ready                                                         : std_logic;                     -- CPU_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	signal cpu_instruction_master_limiter_rsp_src_endofpacket                        : std_logic;                     -- CPU_instruction_master_limiter:rsp_src_endofpacket -> CPU_instruction_master_agent:rp_endofpacket
	signal cpu_instruction_master_limiter_rsp_src_valid                              : std_logic;                     -- CPU_instruction_master_limiter:rsp_src_valid -> CPU_instruction_master_agent:rp_valid
	signal cpu_instruction_master_limiter_rsp_src_startofpacket                      : std_logic;                     -- CPU_instruction_master_limiter:rsp_src_startofpacket -> CPU_instruction_master_agent:rp_startofpacket
	signal cpu_instruction_master_limiter_rsp_src_data                               : std_logic_vector(98 downto 0); -- CPU_instruction_master_limiter:rsp_src_data -> CPU_instruction_master_agent:rp_data
	signal cpu_instruction_master_limiter_rsp_src_channel                            : std_logic_vector(12 downto 0); -- CPU_instruction_master_limiter:rsp_src_channel -> CPU_instruction_master_agent:rp_channel
	signal cpu_instruction_master_limiter_rsp_src_ready                              : std_logic;                     -- CPU_instruction_master_agent:rp_ready -> CPU_instruction_master_limiter:rsp_src_ready
	signal sram_cvgx_uas_burst_adapter_source0_endofpacket                           : std_logic;                     -- SRAM_CVGX_uas_burst_adapter:source0_endofpacket -> SRAM_CVGX_uas_agent:cp_endofpacket
	signal sram_cvgx_uas_burst_adapter_source0_valid                                 : std_logic;                     -- SRAM_CVGX_uas_burst_adapter:source0_valid -> SRAM_CVGX_uas_agent:cp_valid
	signal sram_cvgx_uas_burst_adapter_source0_startofpacket                         : std_logic;                     -- SRAM_CVGX_uas_burst_adapter:source0_startofpacket -> SRAM_CVGX_uas_agent:cp_startofpacket
	signal sram_cvgx_uas_burst_adapter_source0_data                                  : std_logic_vector(80 downto 0); -- SRAM_CVGX_uas_burst_adapter:source0_data -> SRAM_CVGX_uas_agent:cp_data
	signal sram_cvgx_uas_burst_adapter_source0_ready                                 : std_logic;                     -- SRAM_CVGX_uas_agent:cp_ready -> SRAM_CVGX_uas_burst_adapter:source0_ready
	signal sram_cvgx_uas_burst_adapter_source0_channel                               : std_logic_vector(12 downto 0); -- SRAM_CVGX_uas_burst_adapter:source0_channel -> SRAM_CVGX_uas_agent:cp_channel
	signal cmd_demux_src0_endofpacket                                                : std_logic;                     -- cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	signal cmd_demux_src0_valid                                                      : std_logic;                     -- cmd_demux:src0_valid -> cmd_mux:sink0_valid
	signal cmd_demux_src0_startofpacket                                              : std_logic;                     -- cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	signal cmd_demux_src0_data                                                       : std_logic_vector(98 downto 0); -- cmd_demux:src0_data -> cmd_mux:sink0_data
	signal cmd_demux_src0_channel                                                    : std_logic_vector(12 downto 0); -- cmd_demux:src0_channel -> cmd_mux:sink0_channel
	signal cmd_demux_src0_ready                                                      : std_logic;                     -- cmd_mux:sink0_ready -> cmd_demux:src0_ready
	signal cmd_demux_src1_endofpacket                                                : std_logic;                     -- cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	signal cmd_demux_src1_valid                                                      : std_logic;                     -- cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	signal cmd_demux_src1_startofpacket                                              : std_logic;                     -- cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	signal cmd_demux_src1_data                                                       : std_logic_vector(98 downto 0); -- cmd_demux:src1_data -> cmd_mux_001:sink0_data
	signal cmd_demux_src1_channel                                                    : std_logic_vector(12 downto 0); -- cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	signal cmd_demux_src1_ready                                                      : std_logic;                     -- cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	signal cmd_demux_001_src0_endofpacket                                            : std_logic;                     -- cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	signal cmd_demux_001_src0_valid                                                  : std_logic;                     -- cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	signal cmd_demux_001_src0_startofpacket                                          : std_logic;                     -- cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	signal cmd_demux_001_src0_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src0_data -> cmd_mux:sink1_data
	signal cmd_demux_001_src0_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	signal cmd_demux_001_src0_ready                                                  : std_logic;                     -- cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	signal cmd_demux_001_src1_endofpacket                                            : std_logic;                     -- cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	signal cmd_demux_001_src1_valid                                                  : std_logic;                     -- cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	signal cmd_demux_001_src1_startofpacket                                          : std_logic;                     -- cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	signal cmd_demux_001_src1_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	signal cmd_demux_001_src1_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	signal cmd_demux_001_src1_ready                                                  : std_logic;                     -- cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	signal cmd_demux_001_src2_endofpacket                                            : std_logic;                     -- cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	signal cmd_demux_001_src2_valid                                                  : std_logic;                     -- cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	signal cmd_demux_001_src2_startofpacket                                          : std_logic;                     -- cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	signal cmd_demux_001_src2_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	signal cmd_demux_001_src2_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	signal cmd_demux_001_src2_ready                                                  : std_logic;                     -- cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	signal cmd_demux_001_src3_endofpacket                                            : std_logic;                     -- cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	signal cmd_demux_001_src3_valid                                                  : std_logic;                     -- cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	signal cmd_demux_001_src3_startofpacket                                          : std_logic;                     -- cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	signal cmd_demux_001_src3_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	signal cmd_demux_001_src3_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	signal cmd_demux_001_src3_ready                                                  : std_logic;                     -- cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	signal cmd_demux_001_src4_endofpacket                                            : std_logic;                     -- cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	signal cmd_demux_001_src4_valid                                                  : std_logic;                     -- cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	signal cmd_demux_001_src4_startofpacket                                          : std_logic;                     -- cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	signal cmd_demux_001_src4_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	signal cmd_demux_001_src4_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	signal cmd_demux_001_src4_ready                                                  : std_logic;                     -- cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	signal cmd_demux_001_src5_endofpacket                                            : std_logic;                     -- cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	signal cmd_demux_001_src5_valid                                                  : std_logic;                     -- cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	signal cmd_demux_001_src5_startofpacket                                          : std_logic;                     -- cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	signal cmd_demux_001_src5_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	signal cmd_demux_001_src5_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	signal cmd_demux_001_src5_ready                                                  : std_logic;                     -- cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	signal cmd_demux_001_src6_endofpacket                                            : std_logic;                     -- cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	signal cmd_demux_001_src6_valid                                                  : std_logic;                     -- cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	signal cmd_demux_001_src6_startofpacket                                          : std_logic;                     -- cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	signal cmd_demux_001_src6_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	signal cmd_demux_001_src6_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	signal cmd_demux_001_src6_ready                                                  : std_logic;                     -- cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	signal cmd_demux_001_src7_endofpacket                                            : std_logic;                     -- cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	signal cmd_demux_001_src7_valid                                                  : std_logic;                     -- cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	signal cmd_demux_001_src7_startofpacket                                          : std_logic;                     -- cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	signal cmd_demux_001_src7_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	signal cmd_demux_001_src7_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	signal cmd_demux_001_src7_ready                                                  : std_logic;                     -- cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	signal cmd_demux_001_src8_endofpacket                                            : std_logic;                     -- cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	signal cmd_demux_001_src8_valid                                                  : std_logic;                     -- cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	signal cmd_demux_001_src8_startofpacket                                          : std_logic;                     -- cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	signal cmd_demux_001_src8_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	signal cmd_demux_001_src8_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	signal cmd_demux_001_src8_ready                                                  : std_logic;                     -- cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	signal cmd_demux_001_src9_endofpacket                                            : std_logic;                     -- cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	signal cmd_demux_001_src9_valid                                                  : std_logic;                     -- cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	signal cmd_demux_001_src9_startofpacket                                          : std_logic;                     -- cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	signal cmd_demux_001_src9_data                                                   : std_logic_vector(98 downto 0); -- cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	signal cmd_demux_001_src9_channel                                                : std_logic_vector(12 downto 0); -- cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	signal cmd_demux_001_src9_ready                                                  : std_logic;                     -- cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	signal cmd_demux_001_src10_endofpacket                                           : std_logic;                     -- cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	signal cmd_demux_001_src10_valid                                                 : std_logic;                     -- cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	signal cmd_demux_001_src10_startofpacket                                         : std_logic;                     -- cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	signal cmd_demux_001_src10_data                                                  : std_logic_vector(98 downto 0); -- cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	signal cmd_demux_001_src10_channel                                               : std_logic_vector(12 downto 0); -- cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	signal cmd_demux_001_src10_ready                                                 : std_logic;                     -- cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	signal cmd_demux_001_src11_endofpacket                                           : std_logic;                     -- cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	signal cmd_demux_001_src11_valid                                                 : std_logic;                     -- cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	signal cmd_demux_001_src11_startofpacket                                         : std_logic;                     -- cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	signal cmd_demux_001_src11_data                                                  : std_logic_vector(98 downto 0); -- cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	signal cmd_demux_001_src11_channel                                               : std_logic_vector(12 downto 0); -- cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	signal cmd_demux_001_src11_ready                                                 : std_logic;                     -- cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	signal cmd_demux_001_src12_endofpacket                                           : std_logic;                     -- cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	signal cmd_demux_001_src12_valid                                                 : std_logic;                     -- cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	signal cmd_demux_001_src12_startofpacket                                         : std_logic;                     -- cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	signal cmd_demux_001_src12_data                                                  : std_logic_vector(98 downto 0); -- cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	signal cmd_demux_001_src12_channel                                               : std_logic_vector(12 downto 0); -- cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	signal cmd_demux_001_src12_ready                                                 : std_logic;                     -- cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	signal rsp_demux_src0_endofpacket                                                : std_logic;                     -- rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	signal rsp_demux_src0_valid                                                      : std_logic;                     -- rsp_demux:src0_valid -> rsp_mux:sink0_valid
	signal rsp_demux_src0_startofpacket                                              : std_logic;                     -- rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	signal rsp_demux_src0_data                                                       : std_logic_vector(98 downto 0); -- rsp_demux:src0_data -> rsp_mux:sink0_data
	signal rsp_demux_src0_channel                                                    : std_logic_vector(12 downto 0); -- rsp_demux:src0_channel -> rsp_mux:sink0_channel
	signal rsp_demux_src0_ready                                                      : std_logic;                     -- rsp_mux:sink0_ready -> rsp_demux:src0_ready
	signal rsp_demux_src1_endofpacket                                                : std_logic;                     -- rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	signal rsp_demux_src1_valid                                                      : std_logic;                     -- rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	signal rsp_demux_src1_startofpacket                                              : std_logic;                     -- rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	signal rsp_demux_src1_data                                                       : std_logic_vector(98 downto 0); -- rsp_demux:src1_data -> rsp_mux_001:sink0_data
	signal rsp_demux_src1_channel                                                    : std_logic_vector(12 downto 0); -- rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	signal rsp_demux_src1_ready                                                      : std_logic;                     -- rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	signal rsp_demux_001_src0_endofpacket                                            : std_logic;                     -- rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	signal rsp_demux_001_src0_valid                                                  : std_logic;                     -- rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	signal rsp_demux_001_src0_startofpacket                                          : std_logic;                     -- rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	signal rsp_demux_001_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_001:src0_data -> rsp_mux:sink1_data
	signal rsp_demux_001_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	signal rsp_demux_001_src0_ready                                                  : std_logic;                     -- rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	signal rsp_demux_001_src1_endofpacket                                            : std_logic;                     -- rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	signal rsp_demux_001_src1_valid                                                  : std_logic;                     -- rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	signal rsp_demux_001_src1_startofpacket                                          : std_logic;                     -- rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	signal rsp_demux_001_src1_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	signal rsp_demux_001_src1_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	signal rsp_demux_001_src1_ready                                                  : std_logic;                     -- rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	signal rsp_demux_002_src0_endofpacket                                            : std_logic;                     -- rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	signal rsp_demux_002_src0_valid                                                  : std_logic;                     -- rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	signal rsp_demux_002_src0_startofpacket                                          : std_logic;                     -- rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	signal rsp_demux_002_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	signal rsp_demux_002_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	signal rsp_demux_002_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	signal rsp_demux_003_src0_endofpacket                                            : std_logic;                     -- rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	signal rsp_demux_003_src0_valid                                                  : std_logic;                     -- rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	signal rsp_demux_003_src0_startofpacket                                          : std_logic;                     -- rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	signal rsp_demux_003_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	signal rsp_demux_003_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	signal rsp_demux_003_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	signal rsp_demux_004_src0_endofpacket                                            : std_logic;                     -- rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	signal rsp_demux_004_src0_valid                                                  : std_logic;                     -- rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	signal rsp_demux_004_src0_startofpacket                                          : std_logic;                     -- rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	signal rsp_demux_004_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	signal rsp_demux_004_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	signal rsp_demux_004_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	signal rsp_demux_005_src0_endofpacket                                            : std_logic;                     -- rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	signal rsp_demux_005_src0_valid                                                  : std_logic;                     -- rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	signal rsp_demux_005_src0_startofpacket                                          : std_logic;                     -- rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	signal rsp_demux_005_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	signal rsp_demux_005_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	signal rsp_demux_005_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	signal rsp_demux_006_src0_endofpacket                                            : std_logic;                     -- rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	signal rsp_demux_006_src0_valid                                                  : std_logic;                     -- rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	signal rsp_demux_006_src0_startofpacket                                          : std_logic;                     -- rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	signal rsp_demux_006_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	signal rsp_demux_006_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	signal rsp_demux_006_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	signal rsp_demux_007_src0_endofpacket                                            : std_logic;                     -- rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	signal rsp_demux_007_src0_valid                                                  : std_logic;                     -- rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	signal rsp_demux_007_src0_startofpacket                                          : std_logic;                     -- rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	signal rsp_demux_007_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	signal rsp_demux_007_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	signal rsp_demux_007_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	signal rsp_demux_008_src0_endofpacket                                            : std_logic;                     -- rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	signal rsp_demux_008_src0_valid                                                  : std_logic;                     -- rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	signal rsp_demux_008_src0_startofpacket                                          : std_logic;                     -- rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	signal rsp_demux_008_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	signal rsp_demux_008_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	signal rsp_demux_008_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	signal rsp_demux_009_src0_endofpacket                                            : std_logic;                     -- rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	signal rsp_demux_009_src0_valid                                                  : std_logic;                     -- rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	signal rsp_demux_009_src0_startofpacket                                          : std_logic;                     -- rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	signal rsp_demux_009_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	signal rsp_demux_009_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	signal rsp_demux_009_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	signal rsp_demux_010_src0_endofpacket                                            : std_logic;                     -- rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	signal rsp_demux_010_src0_valid                                                  : std_logic;                     -- rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	signal rsp_demux_010_src0_startofpacket                                          : std_logic;                     -- rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	signal rsp_demux_010_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	signal rsp_demux_010_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	signal rsp_demux_010_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	signal rsp_demux_011_src0_endofpacket                                            : std_logic;                     -- rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	signal rsp_demux_011_src0_valid                                                  : std_logic;                     -- rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	signal rsp_demux_011_src0_startofpacket                                          : std_logic;                     -- rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	signal rsp_demux_011_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	signal rsp_demux_011_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	signal rsp_demux_011_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	signal rsp_demux_012_src0_endofpacket                                            : std_logic;                     -- rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	signal rsp_demux_012_src0_valid                                                  : std_logic;                     -- rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	signal rsp_demux_012_src0_startofpacket                                          : std_logic;                     -- rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	signal rsp_demux_012_src0_data                                                   : std_logic_vector(98 downto 0); -- rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	signal rsp_demux_012_src0_channel                                                : std_logic_vector(12 downto 0); -- rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	signal rsp_demux_012_src0_ready                                                  : std_logic;                     -- rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	signal router_003_src_endofpacket                                                : std_logic;                     -- router_003:src_endofpacket -> SRAM_CVGX_uas_rsp_width_adapter:in_endofpacket
	signal router_003_src_valid                                                      : std_logic;                     -- router_003:src_valid -> SRAM_CVGX_uas_rsp_width_adapter:in_valid
	signal router_003_src_startofpacket                                              : std_logic;                     -- router_003:src_startofpacket -> SRAM_CVGX_uas_rsp_width_adapter:in_startofpacket
	signal router_003_src_data                                                       : std_logic_vector(80 downto 0); -- router_003:src_data -> SRAM_CVGX_uas_rsp_width_adapter:in_data
	signal router_003_src_channel                                                    : std_logic_vector(12 downto 0); -- router_003:src_channel -> SRAM_CVGX_uas_rsp_width_adapter:in_channel
	signal router_003_src_ready                                                      : std_logic;                     -- SRAM_CVGX_uas_rsp_width_adapter:in_ready -> router_003:src_ready
	signal sram_cvgx_uas_rsp_width_adapter_src_endofpacket                           : std_logic;                     -- SRAM_CVGX_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	signal sram_cvgx_uas_rsp_width_adapter_src_valid                                 : std_logic;                     -- SRAM_CVGX_uas_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	signal sram_cvgx_uas_rsp_width_adapter_src_startofpacket                         : std_logic;                     -- SRAM_CVGX_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	signal sram_cvgx_uas_rsp_width_adapter_src_data                                  : std_logic_vector(98 downto 0); -- SRAM_CVGX_uas_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	signal sram_cvgx_uas_rsp_width_adapter_src_ready                                 : std_logic;                     -- rsp_demux_001:sink_ready -> SRAM_CVGX_uas_rsp_width_adapter:out_ready
	signal sram_cvgx_uas_rsp_width_adapter_src_channel                               : std_logic_vector(12 downto 0); -- SRAM_CVGX_uas_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	signal cmd_mux_001_src_endofpacket                                               : std_logic;                     -- cmd_mux_001:src_endofpacket -> SRAM_CVGX_uas_cmd_width_adapter:in_endofpacket
	signal cmd_mux_001_src_valid                                                     : std_logic;                     -- cmd_mux_001:src_valid -> SRAM_CVGX_uas_cmd_width_adapter:in_valid
	signal cmd_mux_001_src_startofpacket                                             : std_logic;                     -- cmd_mux_001:src_startofpacket -> SRAM_CVGX_uas_cmd_width_adapter:in_startofpacket
	signal cmd_mux_001_src_data                                                      : std_logic_vector(98 downto 0); -- cmd_mux_001:src_data -> SRAM_CVGX_uas_cmd_width_adapter:in_data
	signal cmd_mux_001_src_channel                                                   : std_logic_vector(12 downto 0); -- cmd_mux_001:src_channel -> SRAM_CVGX_uas_cmd_width_adapter:in_channel
	signal cmd_mux_001_src_ready                                                     : std_logic;                     -- SRAM_CVGX_uas_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	signal sram_cvgx_uas_cmd_width_adapter_src_endofpacket                           : std_logic;                     -- SRAM_CVGX_uas_cmd_width_adapter:out_endofpacket -> SRAM_CVGX_uas_burst_adapter:sink0_endofpacket
	signal sram_cvgx_uas_cmd_width_adapter_src_valid                                 : std_logic;                     -- SRAM_CVGX_uas_cmd_width_adapter:out_valid -> SRAM_CVGX_uas_burst_adapter:sink0_valid
	signal sram_cvgx_uas_cmd_width_adapter_src_startofpacket                         : std_logic;                     -- SRAM_CVGX_uas_cmd_width_adapter:out_startofpacket -> SRAM_CVGX_uas_burst_adapter:sink0_startofpacket
	signal sram_cvgx_uas_cmd_width_adapter_src_data                                  : std_logic_vector(80 downto 0); -- SRAM_CVGX_uas_cmd_width_adapter:out_data -> SRAM_CVGX_uas_burst_adapter:sink0_data
	signal sram_cvgx_uas_cmd_width_adapter_src_ready                                 : std_logic;                     -- SRAM_CVGX_uas_burst_adapter:sink0_ready -> SRAM_CVGX_uas_cmd_width_adapter:out_ready
	signal sram_cvgx_uas_cmd_width_adapter_src_channel                               : std_logic_vector(12 downto 0); -- SRAM_CVGX_uas_cmd_width_adapter:out_channel -> SRAM_CVGX_uas_burst_adapter:sink0_channel
	signal cpu_instruction_master_limiter_cmd_valid_data                             : std_logic_vector(12 downto 0); -- CPU_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

begin

	cpu_instruction_master_translator : component steppermotorcontrol_mm_interconnect_0_cpu_instruction_master_translator
		generic map (
			AV_ADDRESS_W                => 21,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 21,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 0,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 1,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                                                    --                       clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,                                   --                     reset.reset
			uav_address              => cpu_instruction_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount           => cpu_instruction_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read                 => cpu_instruction_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write                => cpu_instruction_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest          => cpu_instruction_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid        => cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable           => cpu_instruction_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata             => cpu_instruction_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata            => cpu_instruction_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock                 => cpu_instruction_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess          => cpu_instruction_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address               => CPU_instruction_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest           => CPU_instruction_master_waitrequest,                                        --                          .waitrequest
			av_read                  => CPU_instruction_master_read,                                               --                          .read
			av_readdata              => CPU_instruction_master_readdata,                                           --                          .readdata
			av_readdatavalid         => CPU_instruction_master_readdatavalid,                                      --                          .readdatavalid
			av_burstcount            => "1",                                                                       --               (terminated)
			av_byteenable            => "1111",                                                                    --               (terminated)
			av_beginbursttransfer    => '0',                                                                       --               (terminated)
			av_begintransfer         => '0',                                                                       --               (terminated)
			av_chipselect            => '0',                                                                       --               (terminated)
			av_write                 => '0',                                                                       --               (terminated)
			av_writedata             => "00000000000000000000000000000000",                                        --               (terminated)
			av_lock                  => '0',                                                                       --               (terminated)
			av_debugaccess           => '0',                                                                       --               (terminated)
			uav_clken                => open,                                                                      --               (terminated)
			av_clken                 => '1',                                                                       --               (terminated)
			uav_response             => "00",                                                                      --               (terminated)
			av_response              => open,                                                                      --               (terminated)
			uav_writeresponserequest => open,                                                                      --               (terminated)
			uav_writeresponsevalid   => '0',                                                                       --               (terminated)
			av_writeresponserequest  => '0',                                                                       --               (terminated)
			av_writeresponsevalid    => open                                                                       --               (terminated)
		);

	cpu_data_master_translator : component steppermotorcontrol_mm_interconnect_0_cpu_data_master_translator
		generic map (
			AV_ADDRESS_W                => 21,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 21,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                                             --                       clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,                            --                     reset.reset
			uav_address              => cpu_data_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount           => cpu_data_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read                 => cpu_data_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write                => cpu_data_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest          => cpu_data_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid        => cpu_data_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable           => cpu_data_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata             => cpu_data_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata            => cpu_data_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock                 => cpu_data_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess          => cpu_data_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address               => CPU_data_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest           => CPU_data_master_waitrequest,                                        --                          .waitrequest
			av_byteenable            => CPU_data_master_byteenable,                                         --                          .byteenable
			av_read                  => CPU_data_master_read,                                               --                          .read
			av_readdata              => CPU_data_master_readdata,                                           --                          .readdata
			av_write                 => CPU_data_master_write,                                              --                          .write
			av_writedata             => CPU_data_master_writedata,                                          --                          .writedata
			av_debugaccess           => CPU_data_master_debugaccess,                                        --                          .debugaccess
			av_burstcount            => "1",                                                                --               (terminated)
			av_beginbursttransfer    => '0',                                                                --               (terminated)
			av_begintransfer         => '0',                                                                --               (terminated)
			av_chipselect            => '0',                                                                --               (terminated)
			av_readdatavalid         => open,                                                               --               (terminated)
			av_lock                  => '0',                                                                --               (terminated)
			uav_clken                => open,                                                               --               (terminated)
			av_clken                 => '1',                                                                --               (terminated)
			uav_response             => "00",                                                               --               (terminated)
			av_response              => open,                                                               --               (terminated)
			uav_writeresponserequest => open,                                                               --               (terminated)
			uav_writeresponsevalid   => '0',                                                                --               (terminated)
			av_writeresponserequest  => '0',                                                                --               (terminated)
			av_writeresponsevalid    => open                                                                --               (terminated)
		);

	cpu_jtag_debug_module_translator : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_translator
		generic map (
			AV_ADDRESS_W                   => 9,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                       --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,      --                    reset.reset
			uav_address              => cpu_jtag_debug_module_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount           => cpu_jtag_debug_module_agent_m0_burstcount,    --                         .burstcount
			uav_read                 => cpu_jtag_debug_module_agent_m0_read,          --                         .read
			uav_write                => cpu_jtag_debug_module_agent_m0_write,         --                         .write
			uav_waitrequest          => cpu_jtag_debug_module_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid        => cpu_jtag_debug_module_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable           => cpu_jtag_debug_module_agent_m0_byteenable,    --                         .byteenable
			uav_readdata             => cpu_jtag_debug_module_agent_m0_readdata,      --                         .readdata
			uav_writedata            => cpu_jtag_debug_module_agent_m0_writedata,     --                         .writedata
			uav_lock                 => cpu_jtag_debug_module_agent_m0_lock,          --                         .lock
			uav_debugaccess          => cpu_jtag_debug_module_agent_m0_debugaccess,   --                         .debugaccess
			av_address               => CPU_jtag_debug_module_address,                --      avalon_anti_slave_0.address
			av_write                 => CPU_jtag_debug_module_write,                  --                         .write
			av_read                  => CPU_jtag_debug_module_read,                   --                         .read
			av_readdata              => CPU_jtag_debug_module_readdata,               --                         .readdata
			av_writedata             => CPU_jtag_debug_module_writedata,              --                         .writedata
			av_byteenable            => CPU_jtag_debug_module_byteenable,             --                         .byteenable
			av_waitrequest           => CPU_jtag_debug_module_waitrequest,            --                         .waitrequest
			av_debugaccess           => CPU_jtag_debug_module_debugaccess,            --                         .debugaccess
			av_begintransfer         => open,                                         --              (terminated)
			av_beginbursttransfer    => open,                                         --              (terminated)
			av_burstcount            => open,                                         --              (terminated)
			av_readdatavalid         => '0',                                          --              (terminated)
			av_writebyteenable       => open,                                         --              (terminated)
			av_lock                  => open,                                         --              (terminated)
			av_chipselect            => open,                                         --              (terminated)
			av_clken                 => open,                                         --              (terminated)
			uav_clken                => '0',                                          --              (terminated)
			av_outputenable          => open,                                         --              (terminated)
			uav_response             => open,                                         --              (terminated)
			av_response              => "00",                                         --              (terminated)
			uav_writeresponserequest => '0',                                          --              (terminated)
			uav_writeresponsevalid   => open,                                         --              (terminated)
			av_writeresponserequest  => open,                                         --              (terminated)
			av_writeresponsevalid    => '0'                                           --              (terminated)
		);

	sram_cvgx_uas_translator : component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_translator
		generic map (
			AV_ADDRESS_W                   => 19,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 16,
			AV_BURSTCOUNT_W                => 2,
			AV_BYTEENABLE_W                => 2,
			UAV_BYTEENABLE_W               => 2,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 2,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 1,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 2,
			AV_ADDRESS_SYMBOLS             => 1,
			AV_BURSTCOUNT_SYMBOLS          => 1,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => sram_cvgx_uas_agent_m0_address,          -- avalon_universal_slave_0.address
			uav_burstcount           => sram_cvgx_uas_agent_m0_burstcount,       --                         .burstcount
			uav_read                 => sram_cvgx_uas_agent_m0_read,             --                         .read
			uav_write                => sram_cvgx_uas_agent_m0_write,            --                         .write
			uav_waitrequest          => sram_cvgx_uas_agent_m0_waitrequest,      --                         .waitrequest
			uav_readdatavalid        => sram_cvgx_uas_agent_m0_readdatavalid,    --                         .readdatavalid
			uav_byteenable           => sram_cvgx_uas_agent_m0_byteenable,       --                         .byteenable
			uav_readdata             => sram_cvgx_uas_agent_m0_readdata,         --                         .readdata
			uav_writedata            => sram_cvgx_uas_agent_m0_writedata,        --                         .writedata
			uav_lock                 => sram_cvgx_uas_agent_m0_lock,             --                         .lock
			uav_debugaccess          => sram_cvgx_uas_agent_m0_debugaccess,      --                         .debugaccess
			av_address               => SRAM_CVGX_uas_address,                   --      avalon_anti_slave_0.address
			av_write                 => SRAM_CVGX_uas_write,                     --                         .write
			av_read                  => SRAM_CVGX_uas_read,                      --                         .read
			av_readdata              => SRAM_CVGX_uas_readdata,                  --                         .readdata
			av_writedata             => SRAM_CVGX_uas_writedata,                 --                         .writedata
			av_burstcount            => SRAM_CVGX_uas_burstcount,                --                         .burstcount
			av_byteenable            => SRAM_CVGX_uas_byteenable,                --                         .byteenable
			av_readdatavalid         => SRAM_CVGX_uas_readdatavalid,             --                         .readdatavalid
			av_waitrequest           => SRAM_CVGX_uas_waitrequest,               --                         .waitrequest
			av_lock                  => SRAM_CVGX_uas_lock,                      --                         .lock
			av_debugaccess           => SRAM_CVGX_uas_debugaccess,               --                         .debugaccess
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_chipselect            => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	jtag_uart_avalon_jtag_slave_translator : component steppermotorcontrol_mm_interconnect_0_jtag_uart_avalon_jtag_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                             --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,            --                    reset.reset
			uav_address              => jtag_uart_avalon_jtag_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount           => jtag_uart_avalon_jtag_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read                 => jtag_uart_avalon_jtag_slave_agent_m0_read,          --                         .read
			uav_write                => jtag_uart_avalon_jtag_slave_agent_m0_write,         --                         .write
			uav_waitrequest          => jtag_uart_avalon_jtag_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid        => jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable           => jtag_uart_avalon_jtag_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata             => jtag_uart_avalon_jtag_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata            => jtag_uart_avalon_jtag_slave_agent_m0_writedata,     --                         .writedata
			uav_lock                 => jtag_uart_avalon_jtag_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess          => jtag_uart_avalon_jtag_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address               => jtag_uart_avalon_jtag_slave_address,                --      avalon_anti_slave_0.address
			av_write                 => jtag_uart_avalon_jtag_slave_write,                  --                         .write
			av_read                  => jtag_uart_avalon_jtag_slave_read,                   --                         .read
			av_readdata              => jtag_uart_avalon_jtag_slave_readdata,               --                         .readdata
			av_writedata             => jtag_uart_avalon_jtag_slave_writedata,              --                         .writedata
			av_waitrequest           => jtag_uart_avalon_jtag_slave_waitrequest,            --                         .waitrequest
			av_chipselect            => jtag_uart_avalon_jtag_slave_chipselect,             --                         .chipselect
			av_begintransfer         => open,                                               --              (terminated)
			av_beginbursttransfer    => open,                                               --              (terminated)
			av_burstcount            => open,                                               --              (terminated)
			av_byteenable            => open,                                               --              (terminated)
			av_readdatavalid         => '0',                                                --              (terminated)
			av_writebyteenable       => open,                                               --              (terminated)
			av_lock                  => open,                                               --              (terminated)
			av_clken                 => open,                                               --              (terminated)
			uav_clken                => '0',                                                --              (terminated)
			av_debugaccess           => open,                                               --              (terminated)
			av_outputenable          => open,                                               --              (terminated)
			uav_response             => open,                                               --              (terminated)
			av_response              => "00",                                               --              (terminated)
			uav_writeresponserequest => '0',                                                --              (terminated)
			uav_writeresponsevalid   => open,                                               --              (terminated)
			av_writeresponserequest  => open,                                               --              (terminated)
			av_writeresponsevalid    => '0'                                                 --              (terminated)
		);

	rtx_timer_s1_translator : component steppermotorcontrol_mm_interconnect_0_rtx_timer_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => rtx_timer_s1_agent_m0_address,           -- avalon_universal_slave_0.address
			uav_burstcount           => rtx_timer_s1_agent_m0_burstcount,        --                         .burstcount
			uav_read                 => rtx_timer_s1_agent_m0_read,              --                         .read
			uav_write                => rtx_timer_s1_agent_m0_write,             --                         .write
			uav_waitrequest          => rtx_timer_s1_agent_m0_waitrequest,       --                         .waitrequest
			uav_readdatavalid        => rtx_timer_s1_agent_m0_readdatavalid,     --                         .readdatavalid
			uav_byteenable           => rtx_timer_s1_agent_m0_byteenable,        --                         .byteenable
			uav_readdata             => rtx_timer_s1_agent_m0_readdata,          --                         .readdata
			uav_writedata            => rtx_timer_s1_agent_m0_writedata,         --                         .writedata
			uav_lock                 => rtx_timer_s1_agent_m0_lock,              --                         .lock
			uav_debugaccess          => rtx_timer_s1_agent_m0_debugaccess,       --                         .debugaccess
			av_address               => RTX_Timer_s1_address,                    --      avalon_anti_slave_0.address
			av_write                 => RTX_Timer_s1_write,                      --                         .write
			av_readdata              => RTX_Timer_s1_readdata,                   --                         .readdata
			av_writedata             => RTX_Timer_s1_writedata,                  --                         .writedata
			av_chipselect            => RTX_Timer_s1_chipselect,                 --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	sysid_qsys_0_control_slave_translator : component steppermotorcontrol_mm_interconnect_0_sysid_qsys_0_control_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                            --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,           --                    reset.reset
			uav_address              => sysid_qsys_0_control_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount           => sysid_qsys_0_control_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read                 => sysid_qsys_0_control_slave_agent_m0_read,          --                         .read
			uav_write                => sysid_qsys_0_control_slave_agent_m0_write,         --                         .write
			uav_waitrequest          => sysid_qsys_0_control_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid        => sysid_qsys_0_control_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable           => sysid_qsys_0_control_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata             => sysid_qsys_0_control_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata            => sysid_qsys_0_control_slave_agent_m0_writedata,     --                         .writedata
			uav_lock                 => sysid_qsys_0_control_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess          => sysid_qsys_0_control_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address               => sysid_qsys_0_control_slave_address,                --      avalon_anti_slave_0.address
			av_readdata              => sysid_qsys_0_control_slave_readdata,               --                         .readdata
			av_write                 => open,                                              --              (terminated)
			av_read                  => open,                                              --              (terminated)
			av_writedata             => open,                                              --              (terminated)
			av_begintransfer         => open,                                              --              (terminated)
			av_beginbursttransfer    => open,                                              --              (terminated)
			av_burstcount            => open,                                              --              (terminated)
			av_byteenable            => open,                                              --              (terminated)
			av_readdatavalid         => '0',                                               --              (terminated)
			av_waitrequest           => '0',                                               --              (terminated)
			av_writebyteenable       => open,                                              --              (terminated)
			av_lock                  => open,                                              --              (terminated)
			av_chipselect            => open,                                              --              (terminated)
			av_clken                 => open,                                              --              (terminated)
			uav_clken                => '0',                                               --              (terminated)
			av_debugaccess           => open,                                              --              (terminated)
			av_outputenable          => open,                                              --              (terminated)
			uav_response             => open,                                              --              (terminated)
			av_response              => "00",                                              --              (terminated)
			uav_writeresponserequest => '0',                                               --              (terminated)
			uav_writeresponsevalid   => open,                                              --              (terminated)
			av_writeresponserequest  => open,                                              --              (terminated)
			av_writeresponsevalid    => '0'                                                --              (terminated)
		);

	lcd_control_slave_translator : component steppermotorcontrol_mm_interconnect_0_lcd_control_slave_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 8,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 25,
			AV_WRITE_WAIT_CYCLES           => 25,
			AV_SETUP_WAIT_CYCLES           => 25,
			AV_DATA_HOLD_CYCLES            => 25
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                   --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset,  --                    reset.reset
			uav_address              => lcd_control_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount           => lcd_control_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read                 => lcd_control_slave_agent_m0_read,          --                         .read
			uav_write                => lcd_control_slave_agent_m0_write,         --                         .write
			uav_waitrequest          => lcd_control_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid        => lcd_control_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable           => lcd_control_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata             => lcd_control_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata            => lcd_control_slave_agent_m0_writedata,     --                         .writedata
			uav_lock                 => lcd_control_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess          => lcd_control_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address               => lcd_control_slave_address,                --      avalon_anti_slave_0.address
			av_write                 => lcd_control_slave_write,                  --                         .write
			av_read                  => lcd_control_slave_read,                   --                         .read
			av_readdata              => lcd_control_slave_readdata,               --                         .readdata
			av_writedata             => lcd_control_slave_writedata,              --                         .writedata
			av_begintransfer         => lcd_control_slave_begintransfer,          --                         .begintransfer
			av_beginbursttransfer    => open,                                     --              (terminated)
			av_burstcount            => open,                                     --              (terminated)
			av_byteenable            => open,                                     --              (terminated)
			av_readdatavalid         => '0',                                      --              (terminated)
			av_waitrequest           => '0',                                      --              (terminated)
			av_writebyteenable       => open,                                     --              (terminated)
			av_lock                  => open,                                     --              (terminated)
			av_chipselect            => open,                                     --              (terminated)
			av_clken                 => open,                                     --              (terminated)
			uav_clken                => '0',                                      --              (terminated)
			av_debugaccess           => open,                                     --              (terminated)
			av_outputenable          => open,                                     --              (terminated)
			uav_response             => open,                                     --              (terminated)
			av_response              => "00",                                     --              (terminated)
			uav_writeresponserequest => '0',                                      --              (terminated)
			uav_writeresponsevalid   => open,                                     --              (terminated)
			av_writeresponserequest  => open,                                     --              (terminated)
			av_writeresponsevalid    => '0'                                       --              (terminated)
		);

	pio_sw_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_sw_s1_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount           => pio_sw_s1_agent_m0_burstcount,           --                         .burstcount
			uav_read                 => pio_sw_s1_agent_m0_read,                 --                         .read
			uav_write                => pio_sw_s1_agent_m0_write,                --                         .write
			uav_waitrequest          => pio_sw_s1_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid        => pio_sw_s1_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable           => pio_sw_s1_agent_m0_byteenable,           --                         .byteenable
			uav_readdata             => pio_sw_s1_agent_m0_readdata,             --                         .readdata
			uav_writedata            => pio_sw_s1_agent_m0_writedata,            --                         .writedata
			uav_lock                 => pio_sw_s1_agent_m0_lock,                 --                         .lock
			uav_debugaccess          => pio_sw_s1_agent_m0_debugaccess,          --                         .debugaccess
			av_address               => pio_sw_s1_address,                       --      avalon_anti_slave_0.address
			av_write                 => pio_sw_s1_write,                         --                         .write
			av_readdata              => pio_sw_s1_readdata,                      --                         .readdata
			av_writedata             => pio_sw_s1_writedata,                     --                         .writedata
			av_chipselect            => pio_sw_s1_chipselect,                    --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_key_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_key_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_key_s1_agent_m0_address,             -- avalon_universal_slave_0.address
			uav_burstcount           => pio_key_s1_agent_m0_burstcount,          --                         .burstcount
			uav_read                 => pio_key_s1_agent_m0_read,                --                         .read
			uav_write                => pio_key_s1_agent_m0_write,               --                         .write
			uav_waitrequest          => pio_key_s1_agent_m0_waitrequest,         --                         .waitrequest
			uav_readdatavalid        => pio_key_s1_agent_m0_readdatavalid,       --                         .readdatavalid
			uav_byteenable           => pio_key_s1_agent_m0_byteenable,          --                         .byteenable
			uav_readdata             => pio_key_s1_agent_m0_readdata,            --                         .readdata
			uav_writedata            => pio_key_s1_agent_m0_writedata,           --                         .writedata
			uav_lock                 => pio_key_s1_agent_m0_lock,                --                         .lock
			uav_debugaccess          => pio_key_s1_agent_m0_debugaccess,         --                         .debugaccess
			av_address               => pio_key_s1_address,                      --      avalon_anti_slave_0.address
			av_write                 => pio_key_s1_write,                        --                         .write
			av_readdata              => pio_key_s1_readdata,                     --                         .readdata
			av_writedata             => pio_key_s1_writedata,                    --                         .writedata
			av_chipselect            => pio_key_s1_chipselect,                   --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_hex0_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_hex0_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount           => pio_hex0_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read                 => pio_hex0_s1_agent_m0_read,               --                         .read
			uav_write                => pio_hex0_s1_agent_m0_write,              --                         .write
			uav_waitrequest          => pio_hex0_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid        => pio_hex0_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable           => pio_hex0_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata             => pio_hex0_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata            => pio_hex0_s1_agent_m0_writedata,          --                         .writedata
			uav_lock                 => pio_hex0_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess          => pio_hex0_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address               => pio_hex0_s1_address,                     --      avalon_anti_slave_0.address
			av_write                 => pio_hex0_s1_write,                       --                         .write
			av_readdata              => pio_hex0_s1_readdata,                    --                         .readdata
			av_writedata             => pio_hex0_s1_writedata,                   --                         .writedata
			av_chipselect            => pio_hex0_s1_chipselect,                  --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_hex1_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_hex1_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount           => pio_hex1_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read                 => pio_hex1_s1_agent_m0_read,               --                         .read
			uav_write                => pio_hex1_s1_agent_m0_write,              --                         .write
			uav_waitrequest          => pio_hex1_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid        => pio_hex1_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable           => pio_hex1_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata             => pio_hex1_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata            => pio_hex1_s1_agent_m0_writedata,          --                         .writedata
			uav_lock                 => pio_hex1_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess          => pio_hex1_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address               => pio_hex1_s1_address,                     --      avalon_anti_slave_0.address
			av_write                 => pio_hex1_s1_write,                       --                         .write
			av_readdata              => pio_hex1_s1_readdata,                    --                         .readdata
			av_writedata             => pio_hex1_s1_writedata,                   --                         .writedata
			av_chipselect            => pio_hex1_s1_chipselect,                  --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_hex2_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_hex2_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount           => pio_hex2_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read                 => pio_hex2_s1_agent_m0_read,               --                         .read
			uav_write                => pio_hex2_s1_agent_m0_write,              --                         .write
			uav_waitrequest          => pio_hex2_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid        => pio_hex2_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable           => pio_hex2_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata             => pio_hex2_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata            => pio_hex2_s1_agent_m0_writedata,          --                         .writedata
			uav_lock                 => pio_hex2_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess          => pio_hex2_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address               => pio_hex2_s1_address,                     --      avalon_anti_slave_0.address
			av_write                 => pio_hex2_s1_write,                       --                         .write
			av_readdata              => pio_hex2_s1_readdata,                    --                         .readdata
			av_writedata             => pio_hex2_s1_writedata,                   --                         .writedata
			av_chipselect            => pio_hex2_s1_chipselect,                  --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_hex3_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_sw_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_hex3_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount           => pio_hex3_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read                 => pio_hex3_s1_agent_m0_read,               --                         .read
			uav_write                => pio_hex3_s1_agent_m0_write,              --                         .write
			uav_waitrequest          => pio_hex3_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid        => pio_hex3_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable           => pio_hex3_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata             => pio_hex3_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata            => pio_hex3_s1_agent_m0_writedata,          --                         .writedata
			uav_lock                 => pio_hex3_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess          => pio_hex3_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address               => pio_hex3_s1_address,                     --      avalon_anti_slave_0.address
			av_write                 => pio_hex3_s1_write,                       --                         .write
			av_readdata              => pio_hex3_s1_readdata,                    --                         .readdata
			av_writedata             => pio_hex3_s1_writedata,                   --                         .writedata
			av_chipselect            => pio_hex3_s1_chipselect,                  --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	pio_led9_s1_translator : component steppermotorcontrol_mm_interconnect_0_pio_key_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 21,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => pll_100MHz_outclk0_clk,                  --                      clk.clk
			reset                    => CPU_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address              => pio_led9_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount           => pio_led9_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read                 => pio_led9_s1_agent_m0_read,               --                         .read
			uav_write                => pio_led9_s1_agent_m0_write,              --                         .write
			uav_waitrequest          => pio_led9_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid        => pio_led9_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable           => pio_led9_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata             => pio_led9_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata            => pio_led9_s1_agent_m0_writedata,          --                         .writedata
			uav_lock                 => pio_led9_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess          => pio_led9_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address               => pio_led9_s1_address,                     --      avalon_anti_slave_0.address
			av_write                 => pio_led9_s1_write,                       --                         .write
			av_readdata              => pio_led9_s1_readdata,                    --                         .readdata
			av_writedata             => pio_led9_s1_writedata,                   --                         .writedata
			av_chipselect            => pio_led9_s1_chipselect,                  --                         .chipselect
			av_read                  => open,                                    --              (terminated)
			av_begintransfer         => open,                                    --              (terminated)
			av_beginbursttransfer    => open,                                    --              (terminated)
			av_burstcount            => open,                                    --              (terminated)
			av_byteenable            => open,                                    --              (terminated)
			av_readdatavalid         => '0',                                     --              (terminated)
			av_waitrequest           => '0',                                     --              (terminated)
			av_writebyteenable       => open,                                    --              (terminated)
			av_lock                  => open,                                    --              (terminated)
			av_clken                 => open,                                    --              (terminated)
			uav_clken                => '0',                                     --              (terminated)
			av_debugaccess           => open,                                    --              (terminated)
			av_outputenable          => open,                                    --              (terminated)
			uav_response             => open,                                    --              (terminated)
			av_response              => "00",                                    --              (terminated)
			uav_writeresponserequest => '0',                                     --              (terminated)
			uav_writeresponsevalid   => open,                                    --              (terminated)
			av_writeresponserequest  => open,                                    --              (terminated)
			av_writeresponsevalid    => '0'                                      --              (terminated)
		);

	cpu_instruction_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_BEGIN_BURST           => 76,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_BURST_TYPE_H          => 73,
			PKT_BURST_TYPE_L          => 72,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_TRANS_EXCLUSIVE       => 62,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_THREAD_ID_H           => 86,
			PKT_THREAD_ID_L           => 86,
			PKT_CACHE_H               => 93,
			PKT_CACHE_L               => 90,
			PKT_DATA_SIDEBAND_H       => 75,
			PKT_DATA_SIDEBAND_L       => 75,
			PKT_QOS_H                 => 77,
			PKT_QOS_L                 => 77,
			PKT_ADDR_SIDEBAND_H       => 74,
			PKT_ADDR_SIDEBAND_L       => 74,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_DATA_W                 => 99,
			ST_CHANNEL_W              => 13,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 1,
			BURSTWRAP_VALUE           => 3,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                                                    --       clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			av_address              => cpu_instruction_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write                => cpu_instruction_master_translator_avalon_universal_master_0_write,         --          .write
			av_read                 => cpu_instruction_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata            => cpu_instruction_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata             => cpu_instruction_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest          => cpu_instruction_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid        => cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable           => cpu_instruction_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount           => cpu_instruction_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess          => cpu_instruction_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock                 => cpu_instruction_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid                => cpu_instruction_master_agent_cp_valid,                                     --        cp.valid
			cp_data                 => cpu_instruction_master_agent_cp_data,                                      --          .data
			cp_startofpacket        => cpu_instruction_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket          => cpu_instruction_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready                => cpu_instruction_master_agent_cp_ready,                                     --          .ready
			rp_valid                => cpu_instruction_master_limiter_rsp_src_valid,                              --        rp.valid
			rp_data                 => cpu_instruction_master_limiter_rsp_src_data,                               --          .data
			rp_channel              => cpu_instruction_master_limiter_rsp_src_channel,                            --          .channel
			rp_startofpacket        => cpu_instruction_master_limiter_rsp_src_startofpacket,                      --          .startofpacket
			rp_endofpacket          => cpu_instruction_master_limiter_rsp_src_endofpacket,                        --          .endofpacket
			rp_ready                => cpu_instruction_master_limiter_rsp_src_ready,                              --          .ready
			av_response             => open,                                                                      -- (terminated)
			av_writeresponserequest => '0',                                                                       -- (terminated)
			av_writeresponsevalid   => open                                                                       -- (terminated)
		);

	cpu_data_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_BEGIN_BURST           => 76,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_BURST_TYPE_H          => 73,
			PKT_BURST_TYPE_L          => 72,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_TRANS_EXCLUSIVE       => 62,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_THREAD_ID_H           => 86,
			PKT_THREAD_ID_L           => 86,
			PKT_CACHE_H               => 93,
			PKT_CACHE_L               => 90,
			PKT_DATA_SIDEBAND_H       => 75,
			PKT_DATA_SIDEBAND_L       => 75,
			PKT_QOS_H                 => 77,
			PKT_QOS_L                 => 77,
			PKT_ADDR_SIDEBAND_H       => 74,
			PKT_ADDR_SIDEBAND_L       => 74,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_DATA_W                 => 99,
			ST_CHANNEL_W              => 13,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 0,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                                             --       clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,                            -- clk_reset.reset
			av_address              => cpu_data_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write                => cpu_data_master_translator_avalon_universal_master_0_write,         --          .write
			av_read                 => cpu_data_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata            => cpu_data_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata             => cpu_data_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest          => cpu_data_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid        => cpu_data_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable           => cpu_data_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount           => cpu_data_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess          => cpu_data_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock                 => cpu_data_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid                => cpu_data_master_agent_cp_valid,                                     --        cp.valid
			cp_data                 => cpu_data_master_agent_cp_data,                                      --          .data
			cp_startofpacket        => cpu_data_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket          => cpu_data_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready                => cpu_data_master_agent_cp_ready,                                     --          .ready
			rp_valid                => rsp_mux_001_src_valid,                                              --        rp.valid
			rp_data                 => rsp_mux_001_src_data,                                               --          .data
			rp_channel              => rsp_mux_001_src_channel,                                            --          .channel
			rp_startofpacket        => rsp_mux_001_src_startofpacket,                                      --          .startofpacket
			rp_endofpacket          => rsp_mux_001_src_endofpacket,                                        --          .endofpacket
			rp_ready                => rsp_mux_001_src_ready,                                              --          .ready
			av_response             => open,                                                               -- (terminated)
			av_writeresponserequest => '0',                                                                -- (terminated)
			av_writeresponsevalid   => open                                                                -- (terminated)
		);

	cpu_jtag_debug_module_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                                 --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,                --       clk_reset.reset
			m0_address              => cpu_jtag_debug_module_agent_m0_address,                 --              m0.address
			m0_burstcount           => cpu_jtag_debug_module_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => cpu_jtag_debug_module_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => cpu_jtag_debug_module_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => cpu_jtag_debug_module_agent_m0_lock,                    --                .lock
			m0_readdata             => cpu_jtag_debug_module_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => cpu_jtag_debug_module_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => cpu_jtag_debug_module_agent_m0_read,                    --                .read
			m0_waitrequest          => cpu_jtag_debug_module_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => cpu_jtag_debug_module_agent_m0_writedata,               --                .writedata
			m0_write                => cpu_jtag_debug_module_agent_m0_write,                   --                .write
			rp_endofpacket          => cpu_jtag_debug_module_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => cpu_jtag_debug_module_agent_rp_ready,                   --                .ready
			rp_valid                => cpu_jtag_debug_module_agent_rp_valid,                   --                .valid
			rp_data                 => cpu_jtag_debug_module_agent_rp_data,                    --                .data
			rp_startofpacket        => cpu_jtag_debug_module_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_src_ready,                                      --              cp.ready
			cp_valid                => cmd_mux_src_valid,                                      --                .valid
			cp_data                 => cmd_mux_src_data,                                       --                .data
			cp_startofpacket        => cmd_mux_src_startofpacket,                              --                .startofpacket
			cp_endofpacket          => cmd_mux_src_endofpacket,                                --                .endofpacket
			cp_channel              => cmd_mux_src_channel,                                    --                .channel
			rf_sink_ready           => cpu_jtag_debug_module_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => cpu_jtag_debug_module_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => cpu_jtag_debug_module_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => cpu_jtag_debug_module_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => cpu_jtag_debug_module_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => cpu_jtag_debug_module_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => cpu_jtag_debug_module_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => cpu_jtag_debug_module_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => cpu_jtag_debug_module_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => cpu_jtag_debug_module_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => cpu_jtag_debug_module_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => cpu_jtag_debug_module_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => cpu_jtag_debug_module_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => cpu_jtag_debug_module_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                   --     (terminated)
			m0_writeresponserequest => open,                                                   --     (terminated)
			m0_writeresponsevalid   => '0'                                                     --     (terminated)
		);

	cpu_jtag_debug_module_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                                 --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,                -- clk_reset.reset
			in_data           => cpu_jtag_debug_module_agent_rf_source_data,             --        in.data
			in_valid          => cpu_jtag_debug_module_agent_rf_source_valid,            --          .valid
			in_ready          => cpu_jtag_debug_module_agent_rf_source_ready,            --          .ready
			in_startofpacket  => cpu_jtag_debug_module_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => cpu_jtag_debug_module_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => cpu_jtag_debug_module_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => cpu_jtag_debug_module_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => cpu_jtag_debug_module_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	sram_cvgx_uas_agent : component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_agent
		generic map (
			PKT_DATA_H                => 15,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 58,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 17,
			PKT_BYTEEN_L              => 16,
			PKT_ADDR_H                => 38,
			PKT_ADDR_L                => 18,
			PKT_TRANS_COMPRESSED_READ => 39,
			PKT_TRANS_POSTED          => 40,
			PKT_TRANS_WRITE           => 41,
			PKT_TRANS_READ            => 42,
			PKT_TRANS_LOCK            => 43,
			PKT_SRC_ID_H              => 63,
			PKT_SRC_ID_L              => 60,
			PKT_DEST_ID_H             => 67,
			PKT_DEST_ID_L             => 64,
			PKT_BURSTWRAP_H           => 50,
			PKT_BURSTWRAP_L           => 48,
			PKT_BYTE_CNT_H            => 47,
			PKT_BYTE_CNT_L            => 45,
			PKT_PROTECTION_H          => 71,
			PKT_PROTECTION_L          => 69,
			PKT_RESPONSE_STATUS_H     => 77,
			PKT_RESPONSE_STATUS_L     => 76,
			PKT_BURST_SIZE_H          => 53,
			PKT_BURST_SIZE_L          => 51,
			PKT_ORI_BURST_SIZE_L      => 78,
			PKT_ORI_BURST_SIZE_H      => 80,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 81,
			AVS_BURSTCOUNT_W          => 2,
			SUPPRESS_0_BYTEEN_CMD     => 1,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                            --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,           --       clk_reset.reset
			m0_address              => sram_cvgx_uas_agent_m0_address,                    --              m0.address
			m0_burstcount           => sram_cvgx_uas_agent_m0_burstcount,                 --                .burstcount
			m0_byteenable           => sram_cvgx_uas_agent_m0_byteenable,                 --                .byteenable
			m0_debugaccess          => sram_cvgx_uas_agent_m0_debugaccess,                --                .debugaccess
			m0_lock                 => sram_cvgx_uas_agent_m0_lock,                       --                .lock
			m0_readdata             => sram_cvgx_uas_agent_m0_readdata,                   --                .readdata
			m0_readdatavalid        => sram_cvgx_uas_agent_m0_readdatavalid,              --                .readdatavalid
			m0_read                 => sram_cvgx_uas_agent_m0_read,                       --                .read
			m0_waitrequest          => sram_cvgx_uas_agent_m0_waitrequest,                --                .waitrequest
			m0_writedata            => sram_cvgx_uas_agent_m0_writedata,                  --                .writedata
			m0_write                => sram_cvgx_uas_agent_m0_write,                      --                .write
			rp_endofpacket          => sram_cvgx_uas_agent_rp_endofpacket,                --              rp.endofpacket
			rp_ready                => sram_cvgx_uas_agent_rp_ready,                      --                .ready
			rp_valid                => sram_cvgx_uas_agent_rp_valid,                      --                .valid
			rp_data                 => sram_cvgx_uas_agent_rp_data,                       --                .data
			rp_startofpacket        => sram_cvgx_uas_agent_rp_startofpacket,              --                .startofpacket
			cp_ready                => sram_cvgx_uas_burst_adapter_source0_ready,         --              cp.ready
			cp_valid                => sram_cvgx_uas_burst_adapter_source0_valid,         --                .valid
			cp_data                 => sram_cvgx_uas_burst_adapter_source0_data,          --                .data
			cp_startofpacket        => sram_cvgx_uas_burst_adapter_source0_startofpacket, --                .startofpacket
			cp_endofpacket          => sram_cvgx_uas_burst_adapter_source0_endofpacket,   --                .endofpacket
			cp_channel              => sram_cvgx_uas_burst_adapter_source0_channel,       --                .channel
			rf_sink_ready           => sram_cvgx_uas_agent_rsp_fifo_out_ready,            --         rf_sink.ready
			rf_sink_valid           => sram_cvgx_uas_agent_rsp_fifo_out_valid,            --                .valid
			rf_sink_startofpacket   => sram_cvgx_uas_agent_rsp_fifo_out_startofpacket,    --                .startofpacket
			rf_sink_endofpacket     => sram_cvgx_uas_agent_rsp_fifo_out_endofpacket,      --                .endofpacket
			rf_sink_data            => sram_cvgx_uas_agent_rsp_fifo_out_data,             --                .data
			rf_source_ready         => sram_cvgx_uas_agent_rf_source_ready,               --       rf_source.ready
			rf_source_valid         => sram_cvgx_uas_agent_rf_source_valid,               --                .valid
			rf_source_startofpacket => sram_cvgx_uas_agent_rf_source_startofpacket,       --                .startofpacket
			rf_source_endofpacket   => sram_cvgx_uas_agent_rf_source_endofpacket,         --                .endofpacket
			rf_source_data          => sram_cvgx_uas_agent_rf_source_data,                --                .data
			rdata_fifo_sink_ready   => sram_cvgx_uas_agent_rdata_fifo_out_ready,          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => sram_cvgx_uas_agent_rdata_fifo_out_valid,          --                .valid
			rdata_fifo_sink_data    => sram_cvgx_uas_agent_rdata_fifo_out_data,           --                .data
			rdata_fifo_src_ready    => sram_cvgx_uas_agent_rdata_fifo_src_ready,          --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sram_cvgx_uas_agent_rdata_fifo_src_valid,          --                .valid
			rdata_fifo_src_data     => sram_cvgx_uas_agent_rdata_fifo_src_data,           --                .data
			m0_response             => "00",                                              --     (terminated)
			m0_writeresponserequest => open,                                              --     (terminated)
			m0_writeresponsevalid   => '0'                                                --     (terminated)
		);

	sram_cvgx_uas_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                         --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,        -- clk_reset.reset
			in_data           => sram_cvgx_uas_agent_rf_source_data,             --        in.data
			in_valid          => sram_cvgx_uas_agent_rf_source_valid,            --          .valid
			in_ready          => sram_cvgx_uas_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sram_cvgx_uas_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sram_cvgx_uas_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sram_cvgx_uas_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sram_cvgx_uas_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sram_cvgx_uas_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sram_cvgx_uas_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sram_cvgx_uas_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	sram_cvgx_uas_agent_rdata_fifo : component StepperMotorControl_mm_interconnect_0_SRAM_CVGX_uas_agent_rdata_fifo
		port map (
			clk       => pll_100MHz_outclk0_clk,                   --       clk.clk
			reset     => CPU_reset_n_reset_bridge_in_reset_reset,  -- clk_reset.reset
			in_data   => sram_cvgx_uas_agent_rdata_fifo_src_data,  --        in.data
			in_valid  => sram_cvgx_uas_agent_rdata_fifo_src_valid, --          .valid
			in_ready  => sram_cvgx_uas_agent_rdata_fifo_src_ready, --          .ready
			out_data  => sram_cvgx_uas_agent_rdata_fifo_out_data,  --       out.data
			out_valid => sram_cvgx_uas_agent_rdata_fifo_out_valid, --          .valid
			out_ready => sram_cvgx_uas_agent_rdata_fifo_out_ready  --          .ready
		);

	jtag_uart_avalon_jtag_slave_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,                      --       clk_reset.reset
			m0_address              => jtag_uart_avalon_jtag_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => jtag_uart_avalon_jtag_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => jtag_uart_avalon_jtag_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => jtag_uart_avalon_jtag_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => jtag_uart_avalon_jtag_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => jtag_uart_avalon_jtag_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => jtag_uart_avalon_jtag_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => jtag_uart_avalon_jtag_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => jtag_uart_avalon_jtag_slave_agent_m0_writedata,               --                .writedata
			m0_write                => jtag_uart_avalon_jtag_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => jtag_uart_avalon_jtag_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => jtag_uart_avalon_jtag_slave_agent_rp_ready,                   --                .ready
			rp_valid                => jtag_uart_avalon_jtag_slave_agent_rp_valid,                   --                .valid
			rp_data                 => jtag_uart_avalon_jtag_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => jtag_uart_avalon_jtag_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_002_src_ready,                                        --              cp.ready
			cp_valid                => cmd_mux_002_src_valid,                                        --                .valid
			cp_data                 => cmd_mux_002_src_data,                                         --                .data
			cp_startofpacket        => cmd_mux_002_src_startofpacket,                                --                .startofpacket
			cp_endofpacket          => cmd_mux_002_src_endofpacket,                                  --                .endofpacket
			cp_channel              => cmd_mux_002_src_channel,                                      --                .channel
			rf_sink_ready           => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => jtag_uart_avalon_jtag_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => jtag_uart_avalon_jtag_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => jtag_uart_avalon_jtag_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                         --     (terminated)
			m0_writeresponserequest => open,                                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                                           --     (terminated)
		);

	jtag_uart_avalon_jtag_slave_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,                      -- clk_reset.reset
			in_data           => jtag_uart_avalon_jtag_slave_agent_rf_source_data,             --        in.data
			in_valid          => jtag_uart_avalon_jtag_slave_agent_rf_source_valid,            --          .valid
			in_ready          => jtag_uart_avalon_jtag_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	rtx_timer_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                        --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,       --       clk_reset.reset
			m0_address              => rtx_timer_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => rtx_timer_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => rtx_timer_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => rtx_timer_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => rtx_timer_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => rtx_timer_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => rtx_timer_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => rtx_timer_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => rtx_timer_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => rtx_timer_s1_agent_m0_writedata,               --                .writedata
			m0_write                => rtx_timer_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => rtx_timer_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => rtx_timer_s1_agent_rp_ready,                   --                .ready
			rp_valid                => rtx_timer_s1_agent_rp_valid,                   --                .valid
			rp_data                 => rtx_timer_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => rtx_timer_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_003_src_ready,                         --              cp.ready
			cp_valid                => cmd_mux_003_src_valid,                         --                .valid
			cp_data                 => cmd_mux_003_src_data,                          --                .data
			cp_startofpacket        => cmd_mux_003_src_startofpacket,                 --                .startofpacket
			cp_endofpacket          => cmd_mux_003_src_endofpacket,                   --                .endofpacket
			cp_channel              => cmd_mux_003_src_channel,                       --                .channel
			rf_sink_ready           => rtx_timer_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => rtx_timer_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => rtx_timer_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => rtx_timer_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => rtx_timer_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => rtx_timer_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => rtx_timer_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => rtx_timer_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => rtx_timer_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => rtx_timer_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => rtx_timer_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => rtx_timer_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => rtx_timer_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => rtx_timer_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => rtx_timer_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => rtx_timer_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                          --     (terminated)
			m0_writeresponserequest => open,                                          --     (terminated)
			m0_writeresponsevalid   => '0'                                            --     (terminated)
		);

	rtx_timer_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                        --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,       -- clk_reset.reset
			in_data           => rtx_timer_s1_agent_rf_source_data,             --        in.data
			in_valid          => rtx_timer_s1_agent_rf_source_valid,            --          .valid
			in_ready          => rtx_timer_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => rtx_timer_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => rtx_timer_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => rtx_timer_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => rtx_timer_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => rtx_timer_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => rtx_timer_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => rtx_timer_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	sysid_qsys_0_control_slave_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                                      --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,                     --       clk_reset.reset
			m0_address              => sysid_qsys_0_control_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => sysid_qsys_0_control_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sysid_qsys_0_control_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sysid_qsys_0_control_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sysid_qsys_0_control_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => sysid_qsys_0_control_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sysid_qsys_0_control_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sysid_qsys_0_control_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => sysid_qsys_0_control_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sysid_qsys_0_control_slave_agent_m0_writedata,               --                .writedata
			m0_write                => sysid_qsys_0_control_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => sysid_qsys_0_control_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sysid_qsys_0_control_slave_agent_rp_ready,                   --                .ready
			rp_valid                => sysid_qsys_0_control_slave_agent_rp_valid,                   --                .valid
			rp_data                 => sysid_qsys_0_control_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => sysid_qsys_0_control_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_004_src_ready,                                       --              cp.ready
			cp_valid                => cmd_mux_004_src_valid,                                       --                .valid
			cp_data                 => cmd_mux_004_src_data,                                        --                .data
			cp_startofpacket        => cmd_mux_004_src_startofpacket,                               --                .startofpacket
			cp_endofpacket          => cmd_mux_004_src_endofpacket,                                 --                .endofpacket
			cp_channel              => cmd_mux_004_src_channel,                                     --                .channel
			rf_sink_ready           => sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sysid_qsys_0_control_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sysid_qsys_0_control_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sysid_qsys_0_control_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sysid_qsys_0_control_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sysid_qsys_0_control_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sysid_qsys_0_control_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sysid_qsys_0_control_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                        --     (terminated)
			m0_writeresponserequest => open,                                                        --     (terminated)
			m0_writeresponsevalid   => '0'                                                          --     (terminated)
		);

	sysid_qsys_0_control_slave_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                                      --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,                     -- clk_reset.reset
			in_data           => sysid_qsys_0_control_slave_agent_rf_source_data,             --        in.data
			in_valid          => sysid_qsys_0_control_slave_agent_rf_source_valid,            --          .valid
			in_ready          => sysid_qsys_0_control_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sysid_qsys_0_control_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sysid_qsys_0_control_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sysid_qsys_0_control_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	lcd_control_slave_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                             --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,            --       clk_reset.reset
			m0_address              => lcd_control_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => lcd_control_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => lcd_control_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => lcd_control_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => lcd_control_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => lcd_control_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => lcd_control_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => lcd_control_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => lcd_control_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => lcd_control_slave_agent_m0_writedata,               --                .writedata
			m0_write                => lcd_control_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => lcd_control_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => lcd_control_slave_agent_rp_ready,                   --                .ready
			rp_valid                => lcd_control_slave_agent_rp_valid,                   --                .valid
			rp_data                 => lcd_control_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => lcd_control_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_005_src_ready,                              --              cp.ready
			cp_valid                => cmd_mux_005_src_valid,                              --                .valid
			cp_data                 => cmd_mux_005_src_data,                               --                .data
			cp_startofpacket        => cmd_mux_005_src_startofpacket,                      --                .startofpacket
			cp_endofpacket          => cmd_mux_005_src_endofpacket,                        --                .endofpacket
			cp_channel              => cmd_mux_005_src_channel,                            --                .channel
			rf_sink_ready           => lcd_control_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => lcd_control_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => lcd_control_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => lcd_control_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => lcd_control_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => lcd_control_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => lcd_control_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => lcd_control_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => lcd_control_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => lcd_control_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => lcd_control_slave_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => lcd_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => lcd_control_slave_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => lcd_control_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => lcd_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => lcd_control_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                               --     (terminated)
			m0_writeresponserequest => open,                                               --     (terminated)
			m0_writeresponsevalid   => '0'                                                 --     (terminated)
		);

	lcd_control_slave_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                             --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,            -- clk_reset.reset
			in_data           => lcd_control_slave_agent_rf_source_data,             --        in.data
			in_valid          => lcd_control_slave_agent_rf_source_valid,            --          .valid
			in_ready          => lcd_control_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => lcd_control_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => lcd_control_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => lcd_control_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => lcd_control_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => lcd_control_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => lcd_control_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => lcd_control_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_sw_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                     --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => pio_sw_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_sw_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_sw_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_sw_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_sw_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_sw_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_sw_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_sw_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_sw_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_sw_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_sw_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_sw_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_sw_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_sw_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_sw_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_sw_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_006_src_ready,                      --              cp.ready
			cp_valid                => cmd_mux_006_src_valid,                      --                .valid
			cp_data                 => cmd_mux_006_src_data,                       --                .data
			cp_startofpacket        => cmd_mux_006_src_startofpacket,              --                .startofpacket
			cp_endofpacket          => cmd_mux_006_src_endofpacket,                --                .endofpacket
			cp_channel              => cmd_mux_006_src_channel,                    --                .channel
			rf_sink_ready           => pio_sw_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_sw_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_sw_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_sw_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_sw_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_sw_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_sw_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_sw_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_sw_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_sw_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_sw_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_sw_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_sw_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_sw_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_sw_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_sw_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                       --     (terminated)
			m0_writeresponserequest => open,                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                         --     (terminated)
		);

	pio_sw_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                     --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => pio_sw_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_sw_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_sw_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_sw_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_sw_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_sw_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_sw_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_sw_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_sw_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_sw_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_key_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                      --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,     --       clk_reset.reset
			m0_address              => pio_key_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_key_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_key_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_key_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_key_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_key_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_key_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_key_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_key_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_key_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_key_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_key_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_key_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_key_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_key_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_key_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_007_src_ready,                       --              cp.ready
			cp_valid                => cmd_mux_007_src_valid,                       --                .valid
			cp_data                 => cmd_mux_007_src_data,                        --                .data
			cp_startofpacket        => cmd_mux_007_src_startofpacket,               --                .startofpacket
			cp_endofpacket          => cmd_mux_007_src_endofpacket,                 --                .endofpacket
			cp_channel              => cmd_mux_007_src_channel,                     --                .channel
			rf_sink_ready           => pio_key_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_key_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_key_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_key_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_key_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_key_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_key_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_key_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_key_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_key_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_key_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_key_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_key_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_key_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_key_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_key_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                        --     (terminated)
			m0_writeresponserequest => open,                                        --     (terminated)
			m0_writeresponsevalid   => '0'                                          --     (terminated)
		);

	pio_key_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                      --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,     -- clk_reset.reset
			in_data           => pio_key_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_key_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_key_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_key_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_key_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_key_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_key_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_key_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_key_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_key_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_hex0_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => pio_hex0_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_hex0_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_hex0_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_hex0_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_hex0_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_hex0_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_hex0_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_hex0_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_hex0_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_hex0_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_hex0_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_hex0_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_hex0_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_hex0_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_hex0_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_hex0_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_008_src_ready,                        --              cp.ready
			cp_valid                => cmd_mux_008_src_valid,                        --                .valid
			cp_data                 => cmd_mux_008_src_data,                         --                .data
			cp_startofpacket        => cmd_mux_008_src_startofpacket,                --                .startofpacket
			cp_endofpacket          => cmd_mux_008_src_endofpacket,                  --                .endofpacket
			cp_channel              => cmd_mux_008_src_channel,                      --                .channel
			rf_sink_ready           => pio_hex0_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_hex0_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_hex0_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_hex0_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_hex0_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_hex0_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_hex0_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_hex0_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_hex0_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_hex0_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_hex0_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_hex0_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_hex0_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_hex0_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_hex0_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_hex0_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                         --     (terminated)
			m0_writeresponserequest => open,                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                           --     (terminated)
		);

	pio_hex0_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => pio_hex0_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_hex0_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_hex0_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_hex0_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_hex0_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_hex0_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_hex0_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_hex0_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_hex0_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_hex0_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_hex1_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => pio_hex1_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_hex1_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_hex1_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_hex1_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_hex1_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_hex1_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_hex1_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_hex1_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_hex1_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_hex1_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_hex1_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_hex1_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_hex1_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_hex1_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_hex1_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_hex1_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_009_src_ready,                        --              cp.ready
			cp_valid                => cmd_mux_009_src_valid,                        --                .valid
			cp_data                 => cmd_mux_009_src_data,                         --                .data
			cp_startofpacket        => cmd_mux_009_src_startofpacket,                --                .startofpacket
			cp_endofpacket          => cmd_mux_009_src_endofpacket,                  --                .endofpacket
			cp_channel              => cmd_mux_009_src_channel,                      --                .channel
			rf_sink_ready           => pio_hex1_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_hex1_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_hex1_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_hex1_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_hex1_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_hex1_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_hex1_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_hex1_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_hex1_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_hex1_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_hex1_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_hex1_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_hex1_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_hex1_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_hex1_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_hex1_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                         --     (terminated)
			m0_writeresponserequest => open,                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                           --     (terminated)
		);

	pio_hex1_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => pio_hex1_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_hex1_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_hex1_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_hex1_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_hex1_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_hex1_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_hex1_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_hex1_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_hex1_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_hex1_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_hex2_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => pio_hex2_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_hex2_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_hex2_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_hex2_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_hex2_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_hex2_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_hex2_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_hex2_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_hex2_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_hex2_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_hex2_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_hex2_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_hex2_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_hex2_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_hex2_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_hex2_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_010_src_ready,                        --              cp.ready
			cp_valid                => cmd_mux_010_src_valid,                        --                .valid
			cp_data                 => cmd_mux_010_src_data,                         --                .data
			cp_startofpacket        => cmd_mux_010_src_startofpacket,                --                .startofpacket
			cp_endofpacket          => cmd_mux_010_src_endofpacket,                  --                .endofpacket
			cp_channel              => cmd_mux_010_src_channel,                      --                .channel
			rf_sink_ready           => pio_hex2_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_hex2_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_hex2_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_hex2_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_hex2_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_hex2_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_hex2_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_hex2_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_hex2_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_hex2_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_hex2_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_hex2_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_hex2_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_hex2_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_hex2_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_hex2_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                         --     (terminated)
			m0_writeresponserequest => open,                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                           --     (terminated)
		);

	pio_hex2_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => pio_hex2_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_hex2_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_hex2_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_hex2_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_hex2_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_hex2_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_hex2_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_hex2_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_hex2_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_hex2_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_hex3_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => pio_hex3_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_hex3_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_hex3_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_hex3_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_hex3_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_hex3_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_hex3_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_hex3_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_hex3_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_hex3_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_hex3_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_hex3_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_hex3_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_hex3_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_hex3_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_hex3_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_011_src_ready,                        --              cp.ready
			cp_valid                => cmd_mux_011_src_valid,                        --                .valid
			cp_data                 => cmd_mux_011_src_data,                         --                .data
			cp_startofpacket        => cmd_mux_011_src_startofpacket,                --                .startofpacket
			cp_endofpacket          => cmd_mux_011_src_endofpacket,                  --                .endofpacket
			cp_channel              => cmd_mux_011_src_channel,                      --                .channel
			rf_sink_ready           => pio_hex3_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_hex3_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_hex3_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_hex3_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_hex3_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_hex3_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_hex3_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_hex3_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_hex3_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_hex3_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_hex3_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_hex3_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_hex3_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_hex3_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_hex3_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_hex3_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                         --     (terminated)
			m0_writeresponserequest => open,                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                           --     (terminated)
		);

	pio_hex3_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => pio_hex3_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_hex3_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_hex3_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_hex3_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_hex3_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_hex3_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_hex3_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_hex3_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_hex3_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_hex3_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	pio_led9_s1_agent : component steppermotorcontrol_mm_interconnect_0_cpu_jtag_debug_module_agent
		generic map (
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BEGIN_BURST           => 76,
			PKT_SYMBOL_W              => 8,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_ADDR_H                => 56,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 57,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			PKT_TRANS_READ            => 60,
			PKT_TRANS_LOCK            => 61,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_BURSTWRAP_H           => 68,
			PKT_BURSTWRAP_L           => 66,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_PROTECTION_H          => 89,
			PKT_PROTECTION_L          => 87,
			PKT_RESPONSE_STATUS_H     => 95,
			PKT_RESPONSE_STATUS_L     => 94,
			PKT_BURST_SIZE_H          => 71,
			PKT_BURST_SIZE_L          => 69,
			PKT_ORI_BURST_SIZE_L      => 96,
			PKT_ORI_BURST_SIZE_H      => 98,
			ST_CHANNEL_W              => 13,
			ST_DATA_W                 => 99,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => pll_100MHz_outclk0_clk,                       --             clk.clk
			reset                   => CPU_reset_n_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => pio_led9_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => pio_led9_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => pio_led9_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => pio_led9_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => pio_led9_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => pio_led9_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => pio_led9_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => pio_led9_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => pio_led9_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => pio_led9_s1_agent_m0_writedata,               --                .writedata
			m0_write                => pio_led9_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => pio_led9_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => pio_led9_s1_agent_rp_ready,                   --                .ready
			rp_valid                => pio_led9_s1_agent_rp_valid,                   --                .valid
			rp_data                 => pio_led9_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => pio_led9_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_012_src_ready,                        --              cp.ready
			cp_valid                => cmd_mux_012_src_valid,                        --                .valid
			cp_data                 => cmd_mux_012_src_data,                         --                .data
			cp_startofpacket        => cmd_mux_012_src_startofpacket,                --                .startofpacket
			cp_endofpacket          => cmd_mux_012_src_endofpacket,                  --                .endofpacket
			cp_channel              => cmd_mux_012_src_channel,                      --                .channel
			rf_sink_ready           => pio_led9_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => pio_led9_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => pio_led9_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => pio_led9_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => pio_led9_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => pio_led9_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => pio_led9_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => pio_led9_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => pio_led9_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => pio_led9_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => pio_led9_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => pio_led9_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => pio_led9_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => pio_led9_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => pio_led9_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => pio_led9_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                         --     (terminated)
			m0_writeresponserequest => open,                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                           --     (terminated)
		);

	pio_led9_s1_agent_rsp_fifo : component StepperMotorControl_mm_interconnect_0_CPU_jtag_debug_module_agent_rsp_fifo
		port map (
			clk               => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset             => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => pio_led9_s1_agent_rf_source_data,             --        in.data
			in_valid          => pio_led9_s1_agent_rf_source_valid,            --          .valid
			in_ready          => pio_led9_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => pio_led9_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => pio_led9_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => pio_led9_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => pio_led9_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => pio_led9_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => pio_led9_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => pio_led9_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	router : component StepperMotorControl_mm_interconnect_0_router
		port map (
			sink_ready         => cpu_instruction_master_agent_cp_ready,         --      sink.ready
			sink_valid         => cpu_instruction_master_agent_cp_valid,         --          .valid
			sink_data          => cpu_instruction_master_agent_cp_data,          --          .data
			sink_startofpacket => cpu_instruction_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => cpu_instruction_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                        --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,       -- clk_reset.reset
			src_ready          => router_src_ready,                              --       src.ready
			src_valid          => router_src_valid,                              --          .valid
			src_data           => router_src_data,                               --          .data
			src_channel        => router_src_channel,                            --          .channel
			src_startofpacket  => router_src_startofpacket,                      --          .startofpacket
			src_endofpacket    => router_src_endofpacket                         --          .endofpacket
		);

	router_001 : component StepperMotorControl_mm_interconnect_0_router_001
		port map (
			sink_ready         => cpu_data_master_agent_cp_ready,          --      sink.ready
			sink_valid         => cpu_data_master_agent_cp_valid,          --          .valid
			sink_data          => cpu_data_master_agent_cp_data,           --          .data
			sink_startofpacket => cpu_data_master_agent_cp_startofpacket,  --          .startofpacket
			sink_endofpacket   => cpu_data_master_agent_cp_endofpacket,    --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_001_src_ready,                    --       src.ready
			src_valid          => router_001_src_valid,                    --          .valid
			src_data           => router_001_src_data,                     --          .data
			src_channel        => router_001_src_channel,                  --          .channel
			src_startofpacket  => router_001_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_001_src_endofpacket               --          .endofpacket
		);

	router_002 : component StepperMotorControl_mm_interconnect_0_router_002
		port map (
			sink_ready         => cpu_jtag_debug_module_agent_rp_ready,         --      sink.ready
			sink_valid         => cpu_jtag_debug_module_agent_rp_valid,         --          .valid
			sink_data          => cpu_jtag_debug_module_agent_rp_data,          --          .data
			sink_startofpacket => cpu_jtag_debug_module_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => cpu_jtag_debug_module_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                       --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			src_ready          => router_002_src_ready,                         --       src.ready
			src_valid          => router_002_src_valid,                         --          .valid
			src_data           => router_002_src_data,                          --          .data
			src_channel        => router_002_src_channel,                       --          .channel
			src_startofpacket  => router_002_src_startofpacket,                 --          .startofpacket
			src_endofpacket    => router_002_src_endofpacket                    --          .endofpacket
		);

	router_003 : component StepperMotorControl_mm_interconnect_0_router_003
		port map (
			sink_ready         => sram_cvgx_uas_agent_rp_ready,            --      sink.ready
			sink_valid         => sram_cvgx_uas_agent_rp_valid,            --          .valid
			sink_data          => sram_cvgx_uas_agent_rp_data,             --          .data
			sink_startofpacket => sram_cvgx_uas_agent_rp_startofpacket,    --          .startofpacket
			sink_endofpacket   => sram_cvgx_uas_agent_rp_endofpacket,      --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_003_src_ready,                    --       src.ready
			src_valid          => router_003_src_valid,                    --          .valid
			src_data           => router_003_src_data,                     --          .data
			src_channel        => router_003_src_channel,                  --          .channel
			src_startofpacket  => router_003_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_003_src_endofpacket               --          .endofpacket
		);

	router_004 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => jtag_uart_avalon_jtag_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => jtag_uart_avalon_jtag_slave_agent_rp_valid,         --          .valid
			sink_data          => jtag_uart_avalon_jtag_slave_agent_rp_data,          --          .data
			sink_startofpacket => jtag_uart_avalon_jtag_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => jtag_uart_avalon_jtag_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                             --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,            -- clk_reset.reset
			src_ready          => router_004_src_ready,                               --       src.ready
			src_valid          => router_004_src_valid,                               --          .valid
			src_data           => router_004_src_data,                                --          .data
			src_channel        => router_004_src_channel,                             --          .channel
			src_startofpacket  => router_004_src_startofpacket,                       --          .startofpacket
			src_endofpacket    => router_004_src_endofpacket                          --          .endofpacket
		);

	router_005 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => rtx_timer_s1_agent_rp_ready,             --      sink.ready
			sink_valid         => rtx_timer_s1_agent_rp_valid,             --          .valid
			sink_data          => rtx_timer_s1_agent_rp_data,              --          .data
			sink_startofpacket => rtx_timer_s1_agent_rp_startofpacket,     --          .startofpacket
			sink_endofpacket   => rtx_timer_s1_agent_rp_endofpacket,       --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_005_src_ready,                    --       src.ready
			src_valid          => router_005_src_valid,                    --          .valid
			src_data           => router_005_src_data,                     --          .data
			src_channel        => router_005_src_channel,                  --          .channel
			src_startofpacket  => router_005_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_005_src_endofpacket               --          .endofpacket
		);

	router_006 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => sysid_qsys_0_control_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => sysid_qsys_0_control_slave_agent_rp_valid,         --          .valid
			sink_data          => sysid_qsys_0_control_slave_agent_rp_data,          --          .data
			sink_startofpacket => sysid_qsys_0_control_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => sysid_qsys_0_control_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                            --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,           -- clk_reset.reset
			src_ready          => router_006_src_ready,                              --       src.ready
			src_valid          => router_006_src_valid,                              --          .valid
			src_data           => router_006_src_data,                               --          .data
			src_channel        => router_006_src_channel,                            --          .channel
			src_startofpacket  => router_006_src_startofpacket,                      --          .startofpacket
			src_endofpacket    => router_006_src_endofpacket                         --          .endofpacket
		);

	router_007 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => lcd_control_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => lcd_control_slave_agent_rp_valid,         --          .valid
			sink_data          => lcd_control_slave_agent_rp_data,          --          .data
			sink_startofpacket => lcd_control_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => lcd_control_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                   --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_007_src_ready,                     --       src.ready
			src_valid          => router_007_src_valid,                     --          .valid
			src_data           => router_007_src_data,                      --          .data
			src_channel        => router_007_src_channel,                   --          .channel
			src_startofpacket  => router_007_src_startofpacket,             --          .startofpacket
			src_endofpacket    => router_007_src_endofpacket                --          .endofpacket
		);

	router_008 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_sw_s1_agent_rp_ready,                --      sink.ready
			sink_valid         => pio_sw_s1_agent_rp_valid,                --          .valid
			sink_data          => pio_sw_s1_agent_rp_data,                 --          .data
			sink_startofpacket => pio_sw_s1_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => pio_sw_s1_agent_rp_endofpacket,          --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_008_src_ready,                    --       src.ready
			src_valid          => router_008_src_valid,                    --          .valid
			src_data           => router_008_src_data,                     --          .data
			src_channel        => router_008_src_channel,                  --          .channel
			src_startofpacket  => router_008_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_008_src_endofpacket               --          .endofpacket
		);

	router_009 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_key_s1_agent_rp_ready,               --      sink.ready
			sink_valid         => pio_key_s1_agent_rp_valid,               --          .valid
			sink_data          => pio_key_s1_agent_rp_data,                --          .data
			sink_startofpacket => pio_key_s1_agent_rp_startofpacket,       --          .startofpacket
			sink_endofpacket   => pio_key_s1_agent_rp_endofpacket,         --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_009_src_ready,                    --       src.ready
			src_valid          => router_009_src_valid,                    --          .valid
			src_data           => router_009_src_data,                     --          .data
			src_channel        => router_009_src_channel,                  --          .channel
			src_startofpacket  => router_009_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_009_src_endofpacket               --          .endofpacket
		);

	router_010 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_hex0_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => pio_hex0_s1_agent_rp_valid,              --          .valid
			sink_data          => pio_hex0_s1_agent_rp_data,               --          .data
			sink_startofpacket => pio_hex0_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => pio_hex0_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_010_src_ready,                    --       src.ready
			src_valid          => router_010_src_valid,                    --          .valid
			src_data           => router_010_src_data,                     --          .data
			src_channel        => router_010_src_channel,                  --          .channel
			src_startofpacket  => router_010_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_010_src_endofpacket               --          .endofpacket
		);

	router_011 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_hex1_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => pio_hex1_s1_agent_rp_valid,              --          .valid
			sink_data          => pio_hex1_s1_agent_rp_data,               --          .data
			sink_startofpacket => pio_hex1_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => pio_hex1_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_011_src_ready,                    --       src.ready
			src_valid          => router_011_src_valid,                    --          .valid
			src_data           => router_011_src_data,                     --          .data
			src_channel        => router_011_src_channel,                  --          .channel
			src_startofpacket  => router_011_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_011_src_endofpacket               --          .endofpacket
		);

	router_012 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_hex2_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => pio_hex2_s1_agent_rp_valid,              --          .valid
			sink_data          => pio_hex2_s1_agent_rp_data,               --          .data
			sink_startofpacket => pio_hex2_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => pio_hex2_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_012_src_ready,                    --       src.ready
			src_valid          => router_012_src_valid,                    --          .valid
			src_data           => router_012_src_data,                     --          .data
			src_channel        => router_012_src_channel,                  --          .channel
			src_startofpacket  => router_012_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_012_src_endofpacket               --          .endofpacket
		);

	router_013 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_hex3_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => pio_hex3_s1_agent_rp_valid,              --          .valid
			sink_data          => pio_hex3_s1_agent_rp_data,               --          .data
			sink_startofpacket => pio_hex3_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => pio_hex3_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_013_src_ready,                    --       src.ready
			src_valid          => router_013_src_valid,                    --          .valid
			src_data           => router_013_src_data,                     --          .data
			src_channel        => router_013_src_channel,                  --          .channel
			src_startofpacket  => router_013_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_013_src_endofpacket               --          .endofpacket
		);

	router_014 : component StepperMotorControl_mm_interconnect_0_router_004
		port map (
			sink_ready         => pio_led9_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => pio_led9_s1_agent_rp_valid,              --          .valid
			sink_data          => pio_led9_s1_agent_rp_data,               --          .data
			sink_startofpacket => pio_led9_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => pio_led9_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_014_src_ready,                    --       src.ready
			src_valid          => router_014_src_valid,                    --          .valid
			src_data           => router_014_src_data,                     --          .data
			src_channel        => router_014_src_channel,                  --          .channel
			src_startofpacket  => router_014_src_startofpacket,            --          .startofpacket
			src_endofpacket    => router_014_src_endofpacket               --          .endofpacket
		);

	cpu_instruction_master_limiter : component altera_merlin_traffic_limiter
		generic map (
			PKT_DEST_ID_H             => 85,
			PKT_DEST_ID_L             => 82,
			PKT_SRC_ID_H              => 81,
			PKT_SRC_ID_L              => 78,
			PKT_TRANS_POSTED          => 58,
			PKT_TRANS_WRITE           => 59,
			MAX_OUTSTANDING_RESPONSES => 5,
			PIPELINED                 => 0,
			ST_DATA_W                 => 99,
			ST_CHANNEL_W              => 13,
			VALID_WIDTH               => 13,
			ENFORCE_ORDER             => 1,
			PREVENT_HAZARDS           => 0,
			PKT_BYTE_CNT_H            => 65,
			PKT_BYTE_CNT_L            => 63,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			REORDER                   => 0
		)
		port map (
			clk                    => pll_100MHz_outclk0_clk,                               --       clk.clk
			reset                  => CPU_reset_n_reset_bridge_in_reset_reset,              -- clk_reset.reset
			cmd_sink_ready         => router_src_ready,                                     --  cmd_sink.ready
			cmd_sink_valid         => router_src_valid,                                     --          .valid
			cmd_sink_data          => router_src_data,                                      --          .data
			cmd_sink_channel       => router_src_channel,                                   --          .channel
			cmd_sink_startofpacket => router_src_startofpacket,                             --          .startofpacket
			cmd_sink_endofpacket   => router_src_endofpacket,                               --          .endofpacket
			cmd_src_ready          => cpu_instruction_master_limiter_cmd_src_ready,         --   cmd_src.ready
			cmd_src_data           => cpu_instruction_master_limiter_cmd_src_data,          --          .data
			cmd_src_channel        => cpu_instruction_master_limiter_cmd_src_channel,       --          .channel
			cmd_src_startofpacket  => cpu_instruction_master_limiter_cmd_src_startofpacket, --          .startofpacket
			cmd_src_endofpacket    => cpu_instruction_master_limiter_cmd_src_endofpacket,   --          .endofpacket
			rsp_sink_ready         => rsp_mux_src_ready,                                    --  rsp_sink.ready
			rsp_sink_valid         => rsp_mux_src_valid,                                    --          .valid
			rsp_sink_channel       => rsp_mux_src_channel,                                  --          .channel
			rsp_sink_data          => rsp_mux_src_data,                                     --          .data
			rsp_sink_startofpacket => rsp_mux_src_startofpacket,                            --          .startofpacket
			rsp_sink_endofpacket   => rsp_mux_src_endofpacket,                              --          .endofpacket
			rsp_src_ready          => cpu_instruction_master_limiter_rsp_src_ready,         --   rsp_src.ready
			rsp_src_valid          => cpu_instruction_master_limiter_rsp_src_valid,         --          .valid
			rsp_src_data           => cpu_instruction_master_limiter_rsp_src_data,          --          .data
			rsp_src_channel        => cpu_instruction_master_limiter_rsp_src_channel,       --          .channel
			rsp_src_startofpacket  => cpu_instruction_master_limiter_rsp_src_startofpacket, --          .startofpacket
			rsp_src_endofpacket    => cpu_instruction_master_limiter_rsp_src_endofpacket,   --          .endofpacket
			cmd_src_valid          => cpu_instruction_master_limiter_cmd_valid_data         -- cmd_valid.data
		);

	sram_cvgx_uas_burst_adapter : component altera_merlin_burst_adapter
		generic map (
			PKT_ADDR_H                => 38,
			PKT_ADDR_L                => 18,
			PKT_BEGIN_BURST           => 58,
			PKT_BYTE_CNT_H            => 47,
			PKT_BYTE_CNT_L            => 45,
			PKT_BYTEEN_H              => 17,
			PKT_BYTEEN_L              => 16,
			PKT_BURST_SIZE_H          => 53,
			PKT_BURST_SIZE_L          => 51,
			PKT_BURST_TYPE_H          => 55,
			PKT_BURST_TYPE_L          => 54,
			PKT_BURSTWRAP_H           => 50,
			PKT_BURSTWRAP_L           => 48,
			PKT_TRANS_COMPRESSED_READ => 39,
			PKT_TRANS_WRITE           => 41,
			PKT_TRANS_READ            => 42,
			OUT_NARROW_SIZE           => 0,
			IN_NARROW_SIZE            => 0,
			OUT_FIXED                 => 0,
			OUT_COMPLETE_WRAP         => 0,
			ST_DATA_W                 => 81,
			ST_CHANNEL_W              => 13,
			OUT_BYTE_CNT_H            => 46,
			OUT_BURSTWRAP_H           => 50,
			COMPRESSED_READ_SUPPORT   => 0,
			BYTEENABLE_SYNTHESIS      => 1,
			PIPE_INPUTS               => 0,
			NO_WRAP_SUPPORT           => 0,
			INCOMPLETE_WRAP_SUPPORT   => 0,
			BURSTWRAP_CONST_MASK      => 3,
			BURSTWRAP_CONST_VALUE     => 3,
			ADAPTER_VERSION           => "13.1"
		)
		port map (
			clk                   => pll_100MHz_outclk0_clk,                            --       cr0.clk
			reset                 => CPU_reset_n_reset_bridge_in_reset_reset,           -- cr0_reset.reset
			sink0_valid           => sram_cvgx_uas_cmd_width_adapter_src_valid,         --     sink0.valid
			sink0_data            => sram_cvgx_uas_cmd_width_adapter_src_data,          --          .data
			sink0_channel         => sram_cvgx_uas_cmd_width_adapter_src_channel,       --          .channel
			sink0_startofpacket   => sram_cvgx_uas_cmd_width_adapter_src_startofpacket, --          .startofpacket
			sink0_endofpacket     => sram_cvgx_uas_cmd_width_adapter_src_endofpacket,   --          .endofpacket
			sink0_ready           => sram_cvgx_uas_cmd_width_adapter_src_ready,         --          .ready
			source0_valid         => sram_cvgx_uas_burst_adapter_source0_valid,         --   source0.valid
			source0_data          => sram_cvgx_uas_burst_adapter_source0_data,          --          .data
			source0_channel       => sram_cvgx_uas_burst_adapter_source0_channel,       --          .channel
			source0_startofpacket => sram_cvgx_uas_burst_adapter_source0_startofpacket, --          .startofpacket
			source0_endofpacket   => sram_cvgx_uas_burst_adapter_source0_endofpacket,   --          .endofpacket
			source0_ready         => sram_cvgx_uas_burst_adapter_source0_ready          --          .ready
		);

	cmd_demux : component StepperMotorControl_mm_interconnect_0_cmd_demux
		port map (
			clk                => pll_100MHz_outclk0_clk,                               --        clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,              --  clk_reset.reset
			sink_ready         => cpu_instruction_master_limiter_cmd_src_ready,         --       sink.ready
			sink_channel       => cpu_instruction_master_limiter_cmd_src_channel,       --           .channel
			sink_data          => cpu_instruction_master_limiter_cmd_src_data,          --           .data
			sink_startofpacket => cpu_instruction_master_limiter_cmd_src_startofpacket, --           .startofpacket
			sink_endofpacket   => cpu_instruction_master_limiter_cmd_src_endofpacket,   --           .endofpacket
			sink_valid         => cpu_instruction_master_limiter_cmd_valid_data,        -- sink_valid.data
			src0_ready         => cmd_demux_src0_ready,                                 --       src0.ready
			src0_valid         => cmd_demux_src0_valid,                                 --           .valid
			src0_data          => cmd_demux_src0_data,                                  --           .data
			src0_channel       => cmd_demux_src0_channel,                               --           .channel
			src0_startofpacket => cmd_demux_src0_startofpacket,                         --           .startofpacket
			src0_endofpacket   => cmd_demux_src0_endofpacket,                           --           .endofpacket
			src1_ready         => cmd_demux_src1_ready,                                 --       src1.ready
			src1_valid         => cmd_demux_src1_valid,                                 --           .valid
			src1_data          => cmd_demux_src1_data,                                  --           .data
			src1_channel       => cmd_demux_src1_channel,                               --           .channel
			src1_startofpacket => cmd_demux_src1_startofpacket,                         --           .startofpacket
			src1_endofpacket   => cmd_demux_src1_endofpacket                            --           .endofpacket
		);

	cmd_demux_001 : component StepperMotorControl_mm_interconnect_0_cmd_demux_001
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready          => router_001_src_ready,                    --      sink.ready
			sink_channel        => router_001_src_channel,                  --          .channel
			sink_data           => router_001_src_data,                     --          .data
			sink_startofpacket  => router_001_src_startofpacket,            --          .startofpacket
			sink_endofpacket    => router_001_src_endofpacket,              --          .endofpacket
			sink_valid(0)       => router_001_src_valid,                    --          .valid
			src0_ready          => cmd_demux_001_src0_ready,                --      src0.ready
			src0_valid          => cmd_demux_001_src0_valid,                --          .valid
			src0_data           => cmd_demux_001_src0_data,                 --          .data
			src0_channel        => cmd_demux_001_src0_channel,              --          .channel
			src0_startofpacket  => cmd_demux_001_src0_startofpacket,        --          .startofpacket
			src0_endofpacket    => cmd_demux_001_src0_endofpacket,          --          .endofpacket
			src1_ready          => cmd_demux_001_src1_ready,                --      src1.ready
			src1_valid          => cmd_demux_001_src1_valid,                --          .valid
			src1_data           => cmd_demux_001_src1_data,                 --          .data
			src1_channel        => cmd_demux_001_src1_channel,              --          .channel
			src1_startofpacket  => cmd_demux_001_src1_startofpacket,        --          .startofpacket
			src1_endofpacket    => cmd_demux_001_src1_endofpacket,          --          .endofpacket
			src2_ready          => cmd_demux_001_src2_ready,                --      src2.ready
			src2_valid          => cmd_demux_001_src2_valid,                --          .valid
			src2_data           => cmd_demux_001_src2_data,                 --          .data
			src2_channel        => cmd_demux_001_src2_channel,              --          .channel
			src2_startofpacket  => cmd_demux_001_src2_startofpacket,        --          .startofpacket
			src2_endofpacket    => cmd_demux_001_src2_endofpacket,          --          .endofpacket
			src3_ready          => cmd_demux_001_src3_ready,                --      src3.ready
			src3_valid          => cmd_demux_001_src3_valid,                --          .valid
			src3_data           => cmd_demux_001_src3_data,                 --          .data
			src3_channel        => cmd_demux_001_src3_channel,              --          .channel
			src3_startofpacket  => cmd_demux_001_src3_startofpacket,        --          .startofpacket
			src3_endofpacket    => cmd_demux_001_src3_endofpacket,          --          .endofpacket
			src4_ready          => cmd_demux_001_src4_ready,                --      src4.ready
			src4_valid          => cmd_demux_001_src4_valid,                --          .valid
			src4_data           => cmd_demux_001_src4_data,                 --          .data
			src4_channel        => cmd_demux_001_src4_channel,              --          .channel
			src4_startofpacket  => cmd_demux_001_src4_startofpacket,        --          .startofpacket
			src4_endofpacket    => cmd_demux_001_src4_endofpacket,          --          .endofpacket
			src5_ready          => cmd_demux_001_src5_ready,                --      src5.ready
			src5_valid          => cmd_demux_001_src5_valid,                --          .valid
			src5_data           => cmd_demux_001_src5_data,                 --          .data
			src5_channel        => cmd_demux_001_src5_channel,              --          .channel
			src5_startofpacket  => cmd_demux_001_src5_startofpacket,        --          .startofpacket
			src5_endofpacket    => cmd_demux_001_src5_endofpacket,          --          .endofpacket
			src6_ready          => cmd_demux_001_src6_ready,                --      src6.ready
			src6_valid          => cmd_demux_001_src6_valid,                --          .valid
			src6_data           => cmd_demux_001_src6_data,                 --          .data
			src6_channel        => cmd_demux_001_src6_channel,              --          .channel
			src6_startofpacket  => cmd_demux_001_src6_startofpacket,        --          .startofpacket
			src6_endofpacket    => cmd_demux_001_src6_endofpacket,          --          .endofpacket
			src7_ready          => cmd_demux_001_src7_ready,                --      src7.ready
			src7_valid          => cmd_demux_001_src7_valid,                --          .valid
			src7_data           => cmd_demux_001_src7_data,                 --          .data
			src7_channel        => cmd_demux_001_src7_channel,              --          .channel
			src7_startofpacket  => cmd_demux_001_src7_startofpacket,        --          .startofpacket
			src7_endofpacket    => cmd_demux_001_src7_endofpacket,          --          .endofpacket
			src8_ready          => cmd_demux_001_src8_ready,                --      src8.ready
			src8_valid          => cmd_demux_001_src8_valid,                --          .valid
			src8_data           => cmd_demux_001_src8_data,                 --          .data
			src8_channel        => cmd_demux_001_src8_channel,              --          .channel
			src8_startofpacket  => cmd_demux_001_src8_startofpacket,        --          .startofpacket
			src8_endofpacket    => cmd_demux_001_src8_endofpacket,          --          .endofpacket
			src9_ready          => cmd_demux_001_src9_ready,                --      src9.ready
			src9_valid          => cmd_demux_001_src9_valid,                --          .valid
			src9_data           => cmd_demux_001_src9_data,                 --          .data
			src9_channel        => cmd_demux_001_src9_channel,              --          .channel
			src9_startofpacket  => cmd_demux_001_src9_startofpacket,        --          .startofpacket
			src9_endofpacket    => cmd_demux_001_src9_endofpacket,          --          .endofpacket
			src10_ready         => cmd_demux_001_src10_ready,               --     src10.ready
			src10_valid         => cmd_demux_001_src10_valid,               --          .valid
			src10_data          => cmd_demux_001_src10_data,                --          .data
			src10_channel       => cmd_demux_001_src10_channel,             --          .channel
			src10_startofpacket => cmd_demux_001_src10_startofpacket,       --          .startofpacket
			src10_endofpacket   => cmd_demux_001_src10_endofpacket,         --          .endofpacket
			src11_ready         => cmd_demux_001_src11_ready,               --     src11.ready
			src11_valid         => cmd_demux_001_src11_valid,               --          .valid
			src11_data          => cmd_demux_001_src11_data,                --          .data
			src11_channel       => cmd_demux_001_src11_channel,             --          .channel
			src11_startofpacket => cmd_demux_001_src11_startofpacket,       --          .startofpacket
			src11_endofpacket   => cmd_demux_001_src11_endofpacket,         --          .endofpacket
			src12_ready         => cmd_demux_001_src12_ready,               --     src12.ready
			src12_valid         => cmd_demux_001_src12_valid,               --          .valid
			src12_data          => cmd_demux_001_src12_data,                --          .data
			src12_channel       => cmd_demux_001_src12_channel,             --          .channel
			src12_startofpacket => cmd_demux_001_src12_startofpacket,       --          .startofpacket
			src12_endofpacket   => cmd_demux_001_src12_endofpacket          --          .endofpacket
		);

	cmd_mux : component StepperMotorControl_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_src_ready,                       --       src.ready
			src_valid           => cmd_mux_src_valid,                       --          .valid
			src_data            => cmd_mux_src_data,                        --          .data
			src_channel         => cmd_mux_src_channel,                     --          .channel
			src_startofpacket   => cmd_mux_src_startofpacket,               --          .startofpacket
			src_endofpacket     => cmd_mux_src_endofpacket,                 --          .endofpacket
			sink0_ready         => cmd_demux_src0_ready,                    --     sink0.ready
			sink0_valid         => cmd_demux_src0_valid,                    --          .valid
			sink0_channel       => cmd_demux_src0_channel,                  --          .channel
			sink0_data          => cmd_demux_src0_data,                     --          .data
			sink0_startofpacket => cmd_demux_src0_startofpacket,            --          .startofpacket
			sink0_endofpacket   => cmd_demux_src0_endofpacket,              --          .endofpacket
			sink1_ready         => cmd_demux_001_src0_ready,                --     sink1.ready
			sink1_valid         => cmd_demux_001_src0_valid,                --          .valid
			sink1_channel       => cmd_demux_001_src0_channel,              --          .channel
			sink1_data          => cmd_demux_001_src0_data,                 --          .data
			sink1_startofpacket => cmd_demux_001_src0_startofpacket,        --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src0_endofpacket           --          .endofpacket
		);

	cmd_mux_001 : component StepperMotorControl_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_001_src_ready,                   --       src.ready
			src_valid           => cmd_mux_001_src_valid,                   --          .valid
			src_data            => cmd_mux_001_src_data,                    --          .data
			src_channel         => cmd_mux_001_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_001_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_001_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_src1_ready,                    --     sink0.ready
			sink0_valid         => cmd_demux_src1_valid,                    --          .valid
			sink0_channel       => cmd_demux_src1_channel,                  --          .channel
			sink0_data          => cmd_demux_src1_data,                     --          .data
			sink0_startofpacket => cmd_demux_src1_startofpacket,            --          .startofpacket
			sink0_endofpacket   => cmd_demux_src1_endofpacket,              --          .endofpacket
			sink1_ready         => cmd_demux_001_src1_ready,                --     sink1.ready
			sink1_valid         => cmd_demux_001_src1_valid,                --          .valid
			sink1_channel       => cmd_demux_001_src1_channel,              --          .channel
			sink1_data          => cmd_demux_001_src1_data,                 --          .data
			sink1_startofpacket => cmd_demux_001_src1_startofpacket,        --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src1_endofpacket           --          .endofpacket
		);

	cmd_mux_002 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_002_src_ready,                   --       src.ready
			src_valid           => cmd_mux_002_src_valid,                   --          .valid
			src_data            => cmd_mux_002_src_data,                    --          .data
			src_channel         => cmd_mux_002_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_002_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_002_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src2_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src2_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src2_channel,              --          .channel
			sink0_data          => cmd_demux_001_src2_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src2_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src2_endofpacket           --          .endofpacket
		);

	cmd_mux_003 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_003_src_ready,                   --       src.ready
			src_valid           => cmd_mux_003_src_valid,                   --          .valid
			src_data            => cmd_mux_003_src_data,                    --          .data
			src_channel         => cmd_mux_003_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_003_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_003_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src3_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src3_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src3_channel,              --          .channel
			sink0_data          => cmd_demux_001_src3_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src3_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src3_endofpacket           --          .endofpacket
		);

	cmd_mux_004 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_004_src_ready,                   --       src.ready
			src_valid           => cmd_mux_004_src_valid,                   --          .valid
			src_data            => cmd_mux_004_src_data,                    --          .data
			src_channel         => cmd_mux_004_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_004_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_004_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src4_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src4_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src4_channel,              --          .channel
			sink0_data          => cmd_demux_001_src4_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src4_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src4_endofpacket           --          .endofpacket
		);

	cmd_mux_005 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_005_src_ready,                   --       src.ready
			src_valid           => cmd_mux_005_src_valid,                   --          .valid
			src_data            => cmd_mux_005_src_data,                    --          .data
			src_channel         => cmd_mux_005_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_005_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_005_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src5_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src5_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src5_channel,              --          .channel
			sink0_data          => cmd_demux_001_src5_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src5_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src5_endofpacket           --          .endofpacket
		);

	cmd_mux_006 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_006_src_ready,                   --       src.ready
			src_valid           => cmd_mux_006_src_valid,                   --          .valid
			src_data            => cmd_mux_006_src_data,                    --          .data
			src_channel         => cmd_mux_006_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_006_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_006_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src6_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src6_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src6_channel,              --          .channel
			sink0_data          => cmd_demux_001_src6_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src6_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src6_endofpacket           --          .endofpacket
		);

	cmd_mux_007 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_007_src_ready,                   --       src.ready
			src_valid           => cmd_mux_007_src_valid,                   --          .valid
			src_data            => cmd_mux_007_src_data,                    --          .data
			src_channel         => cmd_mux_007_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_007_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_007_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src7_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src7_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src7_channel,              --          .channel
			sink0_data          => cmd_demux_001_src7_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src7_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src7_endofpacket           --          .endofpacket
		);

	cmd_mux_008 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_008_src_ready,                   --       src.ready
			src_valid           => cmd_mux_008_src_valid,                   --          .valid
			src_data            => cmd_mux_008_src_data,                    --          .data
			src_channel         => cmd_mux_008_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_008_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_008_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src8_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src8_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src8_channel,              --          .channel
			sink0_data          => cmd_demux_001_src8_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src8_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src8_endofpacket           --          .endofpacket
		);

	cmd_mux_009 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_009_src_ready,                   --       src.ready
			src_valid           => cmd_mux_009_src_valid,                   --          .valid
			src_data            => cmd_mux_009_src_data,                    --          .data
			src_channel         => cmd_mux_009_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_009_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_009_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src9_ready,                --     sink0.ready
			sink0_valid         => cmd_demux_001_src9_valid,                --          .valid
			sink0_channel       => cmd_demux_001_src9_channel,              --          .channel
			sink0_data          => cmd_demux_001_src9_data,                 --          .data
			sink0_startofpacket => cmd_demux_001_src9_startofpacket,        --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src9_endofpacket           --          .endofpacket
		);

	cmd_mux_010 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_010_src_ready,                   --       src.ready
			src_valid           => cmd_mux_010_src_valid,                   --          .valid
			src_data            => cmd_mux_010_src_data,                    --          .data
			src_channel         => cmd_mux_010_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_010_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_010_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src10_ready,               --     sink0.ready
			sink0_valid         => cmd_demux_001_src10_valid,               --          .valid
			sink0_channel       => cmd_demux_001_src10_channel,             --          .channel
			sink0_data          => cmd_demux_001_src10_data,                --          .data
			sink0_startofpacket => cmd_demux_001_src10_startofpacket,       --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src10_endofpacket          --          .endofpacket
		);

	cmd_mux_011 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_011_src_ready,                   --       src.ready
			src_valid           => cmd_mux_011_src_valid,                   --          .valid
			src_data            => cmd_mux_011_src_data,                    --          .data
			src_channel         => cmd_mux_011_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_011_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_011_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src11_ready,               --     sink0.ready
			sink0_valid         => cmd_demux_001_src11_valid,               --          .valid
			sink0_channel       => cmd_demux_001_src11_channel,             --          .channel
			sink0_data          => cmd_demux_001_src11_data,                --          .data
			sink0_startofpacket => cmd_demux_001_src11_startofpacket,       --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src11_endofpacket          --          .endofpacket
		);

	cmd_mux_012 : component StepperMotorControl_mm_interconnect_0_cmd_mux_002
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_012_src_ready,                   --       src.ready
			src_valid           => cmd_mux_012_src_valid,                   --          .valid
			src_data            => cmd_mux_012_src_data,                    --          .data
			src_channel         => cmd_mux_012_src_channel,                 --          .channel
			src_startofpacket   => cmd_mux_012_src_startofpacket,           --          .startofpacket
			src_endofpacket     => cmd_mux_012_src_endofpacket,             --          .endofpacket
			sink0_ready         => cmd_demux_001_src12_ready,               --     sink0.ready
			sink0_valid         => cmd_demux_001_src12_valid,               --          .valid
			sink0_channel       => cmd_demux_001_src12_channel,             --          .channel
			sink0_data          => cmd_demux_001_src12_data,                --          .data
			sink0_startofpacket => cmd_demux_001_src12_startofpacket,       --          .startofpacket
			sink0_endofpacket   => cmd_demux_001_src12_endofpacket          --          .endofpacket
		);

	rsp_demux : component StepperMotorControl_mm_interconnect_0_rsp_demux
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_002_src_ready,                    --      sink.ready
			sink_channel       => router_002_src_channel,                  --          .channel
			sink_data          => router_002_src_data,                     --          .data
			sink_startofpacket => router_002_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_002_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_002_src_valid,                    --          .valid
			src0_ready         => rsp_demux_src0_ready,                    --      src0.ready
			src0_valid         => rsp_demux_src0_valid,                    --          .valid
			src0_data          => rsp_demux_src0_data,                     --          .data
			src0_channel       => rsp_demux_src0_channel,                  --          .channel
			src0_startofpacket => rsp_demux_src0_startofpacket,            --          .startofpacket
			src0_endofpacket   => rsp_demux_src0_endofpacket,              --          .endofpacket
			src1_ready         => rsp_demux_src1_ready,                    --      src1.ready
			src1_valid         => rsp_demux_src1_valid,                    --          .valid
			src1_data          => rsp_demux_src1_data,                     --          .data
			src1_channel       => rsp_demux_src1_channel,                  --          .channel
			src1_startofpacket => rsp_demux_src1_startofpacket,            --          .startofpacket
			src1_endofpacket   => rsp_demux_src1_endofpacket               --          .endofpacket
		);

	rsp_demux_001 : component StepperMotorControl_mm_interconnect_0_rsp_demux
		port map (
			clk                => pll_100MHz_outclk0_clk,                            --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset,           -- clk_reset.reset
			sink_ready         => sram_cvgx_uas_rsp_width_adapter_src_ready,         --      sink.ready
			sink_channel       => sram_cvgx_uas_rsp_width_adapter_src_channel,       --          .channel
			sink_data          => sram_cvgx_uas_rsp_width_adapter_src_data,          --          .data
			sink_startofpacket => sram_cvgx_uas_rsp_width_adapter_src_startofpacket, --          .startofpacket
			sink_endofpacket   => sram_cvgx_uas_rsp_width_adapter_src_endofpacket,   --          .endofpacket
			sink_valid(0)      => sram_cvgx_uas_rsp_width_adapter_src_valid,         --          .valid
			src0_ready         => rsp_demux_001_src0_ready,                          --      src0.ready
			src0_valid         => rsp_demux_001_src0_valid,                          --          .valid
			src0_data          => rsp_demux_001_src0_data,                           --          .data
			src0_channel       => rsp_demux_001_src0_channel,                        --          .channel
			src0_startofpacket => rsp_demux_001_src0_startofpacket,                  --          .startofpacket
			src0_endofpacket   => rsp_demux_001_src0_endofpacket,                    --          .endofpacket
			src1_ready         => rsp_demux_001_src1_ready,                          --      src1.ready
			src1_valid         => rsp_demux_001_src1_valid,                          --          .valid
			src1_data          => rsp_demux_001_src1_data,                           --          .data
			src1_channel       => rsp_demux_001_src1_channel,                        --          .channel
			src1_startofpacket => rsp_demux_001_src1_startofpacket,                  --          .startofpacket
			src1_endofpacket   => rsp_demux_001_src1_endofpacket                     --          .endofpacket
		);

	rsp_demux_002 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_004_src_ready,                    --      sink.ready
			sink_channel       => router_004_src_channel,                  --          .channel
			sink_data          => router_004_src_data,                     --          .data
			sink_startofpacket => router_004_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_004_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_004_src_valid,                    --          .valid
			src0_ready         => rsp_demux_002_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_002_src0_valid,                --          .valid
			src0_data          => rsp_demux_002_src0_data,                 --          .data
			src0_channel       => rsp_demux_002_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_002_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_002_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_003 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_005_src_ready,                    --      sink.ready
			sink_channel       => router_005_src_channel,                  --          .channel
			sink_data          => router_005_src_data,                     --          .data
			sink_startofpacket => router_005_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_005_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_005_src_valid,                    --          .valid
			src0_ready         => rsp_demux_003_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_003_src0_valid,                --          .valid
			src0_data          => rsp_demux_003_src0_data,                 --          .data
			src0_channel       => rsp_demux_003_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_003_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_003_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_004 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_006_src_ready,                    --      sink.ready
			sink_channel       => router_006_src_channel,                  --          .channel
			sink_data          => router_006_src_data,                     --          .data
			sink_startofpacket => router_006_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_006_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_006_src_valid,                    --          .valid
			src0_ready         => rsp_demux_004_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_004_src0_valid,                --          .valid
			src0_data          => rsp_demux_004_src0_data,                 --          .data
			src0_channel       => rsp_demux_004_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_004_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_004_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_005 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_007_src_ready,                    --      sink.ready
			sink_channel       => router_007_src_channel,                  --          .channel
			sink_data          => router_007_src_data,                     --          .data
			sink_startofpacket => router_007_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_007_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_007_src_valid,                    --          .valid
			src0_ready         => rsp_demux_005_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_005_src0_valid,                --          .valid
			src0_data          => rsp_demux_005_src0_data,                 --          .data
			src0_channel       => rsp_demux_005_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_005_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_005_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_006 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_008_src_ready,                    --      sink.ready
			sink_channel       => router_008_src_channel,                  --          .channel
			sink_data          => router_008_src_data,                     --          .data
			sink_startofpacket => router_008_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_008_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_008_src_valid,                    --          .valid
			src0_ready         => rsp_demux_006_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_006_src0_valid,                --          .valid
			src0_data          => rsp_demux_006_src0_data,                 --          .data
			src0_channel       => rsp_demux_006_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_006_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_006_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_007 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_009_src_ready,                    --      sink.ready
			sink_channel       => router_009_src_channel,                  --          .channel
			sink_data          => router_009_src_data,                     --          .data
			sink_startofpacket => router_009_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_009_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_009_src_valid,                    --          .valid
			src0_ready         => rsp_demux_007_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_007_src0_valid,                --          .valid
			src0_data          => rsp_demux_007_src0_data,                 --          .data
			src0_channel       => rsp_demux_007_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_007_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_007_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_008 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_010_src_ready,                    --      sink.ready
			sink_channel       => router_010_src_channel,                  --          .channel
			sink_data          => router_010_src_data,                     --          .data
			sink_startofpacket => router_010_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_010_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_010_src_valid,                    --          .valid
			src0_ready         => rsp_demux_008_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_008_src0_valid,                --          .valid
			src0_data          => rsp_demux_008_src0_data,                 --          .data
			src0_channel       => rsp_demux_008_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_008_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_008_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_009 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_011_src_ready,                    --      sink.ready
			sink_channel       => router_011_src_channel,                  --          .channel
			sink_data          => router_011_src_data,                     --          .data
			sink_startofpacket => router_011_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_011_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_011_src_valid,                    --          .valid
			src0_ready         => rsp_demux_009_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_009_src0_valid,                --          .valid
			src0_data          => rsp_demux_009_src0_data,                 --          .data
			src0_channel       => rsp_demux_009_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_009_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_009_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_010 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_012_src_ready,                    --      sink.ready
			sink_channel       => router_012_src_channel,                  --          .channel
			sink_data          => router_012_src_data,                     --          .data
			sink_startofpacket => router_012_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_012_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_012_src_valid,                    --          .valid
			src0_ready         => rsp_demux_010_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_010_src0_valid,                --          .valid
			src0_data          => rsp_demux_010_src0_data,                 --          .data
			src0_channel       => rsp_demux_010_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_010_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_010_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_011 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_013_src_ready,                    --      sink.ready
			sink_channel       => router_013_src_channel,                  --          .channel
			sink_data          => router_013_src_data,                     --          .data
			sink_startofpacket => router_013_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_013_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_013_src_valid,                    --          .valid
			src0_ready         => rsp_demux_011_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_011_src0_valid,                --          .valid
			src0_data          => rsp_demux_011_src0_data,                 --          .data
			src0_channel       => rsp_demux_011_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_011_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_011_src0_endofpacket           --          .endofpacket
		);

	rsp_demux_012 : component StepperMotorControl_mm_interconnect_0_rsp_demux_002
		port map (
			clk                => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset              => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_014_src_ready,                    --      sink.ready
			sink_channel       => router_014_src_channel,                  --          .channel
			sink_data          => router_014_src_data,                     --          .data
			sink_startofpacket => router_014_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_014_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_014_src_valid,                    --          .valid
			src0_ready         => rsp_demux_012_src0_ready,                --      src0.ready
			src0_valid         => rsp_demux_012_src0_valid,                --          .valid
			src0_data          => rsp_demux_012_src0_data,                 --          .data
			src0_channel       => rsp_demux_012_src0_channel,              --          .channel
			src0_startofpacket => rsp_demux_012_src0_startofpacket,        --          .startofpacket
			src0_endofpacket   => rsp_demux_012_src0_endofpacket           --          .endofpacket
		);

	rsp_mux : component StepperMotorControl_mm_interconnect_0_rsp_mux
		port map (
			clk                 => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset               => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_src_ready,                       --       src.ready
			src_valid           => rsp_mux_src_valid,                       --          .valid
			src_data            => rsp_mux_src_data,                        --          .data
			src_channel         => rsp_mux_src_channel,                     --          .channel
			src_startofpacket   => rsp_mux_src_startofpacket,               --          .startofpacket
			src_endofpacket     => rsp_mux_src_endofpacket,                 --          .endofpacket
			sink0_ready         => rsp_demux_src0_ready,                    --     sink0.ready
			sink0_valid         => rsp_demux_src0_valid,                    --          .valid
			sink0_channel       => rsp_demux_src0_channel,                  --          .channel
			sink0_data          => rsp_demux_src0_data,                     --          .data
			sink0_startofpacket => rsp_demux_src0_startofpacket,            --          .startofpacket
			sink0_endofpacket   => rsp_demux_src0_endofpacket,              --          .endofpacket
			sink1_ready         => rsp_demux_001_src0_ready,                --     sink1.ready
			sink1_valid         => rsp_demux_001_src0_valid,                --          .valid
			sink1_channel       => rsp_demux_001_src0_channel,              --          .channel
			sink1_data          => rsp_demux_001_src0_data,                 --          .data
			sink1_startofpacket => rsp_demux_001_src0_startofpacket,        --          .startofpacket
			sink1_endofpacket   => rsp_demux_001_src0_endofpacket           --          .endofpacket
		);

	rsp_mux_001 : component StepperMotorControl_mm_interconnect_0_rsp_mux_001
		port map (
			clk                  => pll_100MHz_outclk0_clk,                  --       clk.clk
			reset                => CPU_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready            => rsp_mux_001_src_ready,                   --       src.ready
			src_valid            => rsp_mux_001_src_valid,                   --          .valid
			src_data             => rsp_mux_001_src_data,                    --          .data
			src_channel          => rsp_mux_001_src_channel,                 --          .channel
			src_startofpacket    => rsp_mux_001_src_startofpacket,           --          .startofpacket
			src_endofpacket      => rsp_mux_001_src_endofpacket,             --          .endofpacket
			sink0_ready          => rsp_demux_src1_ready,                    --     sink0.ready
			sink0_valid          => rsp_demux_src1_valid,                    --          .valid
			sink0_channel        => rsp_demux_src1_channel,                  --          .channel
			sink0_data           => rsp_demux_src1_data,                     --          .data
			sink0_startofpacket  => rsp_demux_src1_startofpacket,            --          .startofpacket
			sink0_endofpacket    => rsp_demux_src1_endofpacket,              --          .endofpacket
			sink1_ready          => rsp_demux_001_src1_ready,                --     sink1.ready
			sink1_valid          => rsp_demux_001_src1_valid,                --          .valid
			sink1_channel        => rsp_demux_001_src1_channel,              --          .channel
			sink1_data           => rsp_demux_001_src1_data,                 --          .data
			sink1_startofpacket  => rsp_demux_001_src1_startofpacket,        --          .startofpacket
			sink1_endofpacket    => rsp_demux_001_src1_endofpacket,          --          .endofpacket
			sink2_ready          => rsp_demux_002_src0_ready,                --     sink2.ready
			sink2_valid          => rsp_demux_002_src0_valid,                --          .valid
			sink2_channel        => rsp_demux_002_src0_channel,              --          .channel
			sink2_data           => rsp_demux_002_src0_data,                 --          .data
			sink2_startofpacket  => rsp_demux_002_src0_startofpacket,        --          .startofpacket
			sink2_endofpacket    => rsp_demux_002_src0_endofpacket,          --          .endofpacket
			sink3_ready          => rsp_demux_003_src0_ready,                --     sink3.ready
			sink3_valid          => rsp_demux_003_src0_valid,                --          .valid
			sink3_channel        => rsp_demux_003_src0_channel,              --          .channel
			sink3_data           => rsp_demux_003_src0_data,                 --          .data
			sink3_startofpacket  => rsp_demux_003_src0_startofpacket,        --          .startofpacket
			sink3_endofpacket    => rsp_demux_003_src0_endofpacket,          --          .endofpacket
			sink4_ready          => rsp_demux_004_src0_ready,                --     sink4.ready
			sink4_valid          => rsp_demux_004_src0_valid,                --          .valid
			sink4_channel        => rsp_demux_004_src0_channel,              --          .channel
			sink4_data           => rsp_demux_004_src0_data,                 --          .data
			sink4_startofpacket  => rsp_demux_004_src0_startofpacket,        --          .startofpacket
			sink4_endofpacket    => rsp_demux_004_src0_endofpacket,          --          .endofpacket
			sink5_ready          => rsp_demux_005_src0_ready,                --     sink5.ready
			sink5_valid          => rsp_demux_005_src0_valid,                --          .valid
			sink5_channel        => rsp_demux_005_src0_channel,              --          .channel
			sink5_data           => rsp_demux_005_src0_data,                 --          .data
			sink5_startofpacket  => rsp_demux_005_src0_startofpacket,        --          .startofpacket
			sink5_endofpacket    => rsp_demux_005_src0_endofpacket,          --          .endofpacket
			sink6_ready          => rsp_demux_006_src0_ready,                --     sink6.ready
			sink6_valid          => rsp_demux_006_src0_valid,                --          .valid
			sink6_channel        => rsp_demux_006_src0_channel,              --          .channel
			sink6_data           => rsp_demux_006_src0_data,                 --          .data
			sink6_startofpacket  => rsp_demux_006_src0_startofpacket,        --          .startofpacket
			sink6_endofpacket    => rsp_demux_006_src0_endofpacket,          --          .endofpacket
			sink7_ready          => rsp_demux_007_src0_ready,                --     sink7.ready
			sink7_valid          => rsp_demux_007_src0_valid,                --          .valid
			sink7_channel        => rsp_demux_007_src0_channel,              --          .channel
			sink7_data           => rsp_demux_007_src0_data,                 --          .data
			sink7_startofpacket  => rsp_demux_007_src0_startofpacket,        --          .startofpacket
			sink7_endofpacket    => rsp_demux_007_src0_endofpacket,          --          .endofpacket
			sink8_ready          => rsp_demux_008_src0_ready,                --     sink8.ready
			sink8_valid          => rsp_demux_008_src0_valid,                --          .valid
			sink8_channel        => rsp_demux_008_src0_channel,              --          .channel
			sink8_data           => rsp_demux_008_src0_data,                 --          .data
			sink8_startofpacket  => rsp_demux_008_src0_startofpacket,        --          .startofpacket
			sink8_endofpacket    => rsp_demux_008_src0_endofpacket,          --          .endofpacket
			sink9_ready          => rsp_demux_009_src0_ready,                --     sink9.ready
			sink9_valid          => rsp_demux_009_src0_valid,                --          .valid
			sink9_channel        => rsp_demux_009_src0_channel,              --          .channel
			sink9_data           => rsp_demux_009_src0_data,                 --          .data
			sink9_startofpacket  => rsp_demux_009_src0_startofpacket,        --          .startofpacket
			sink9_endofpacket    => rsp_demux_009_src0_endofpacket,          --          .endofpacket
			sink10_ready         => rsp_demux_010_src0_ready,                --    sink10.ready
			sink10_valid         => rsp_demux_010_src0_valid,                --          .valid
			sink10_channel       => rsp_demux_010_src0_channel,              --          .channel
			sink10_data          => rsp_demux_010_src0_data,                 --          .data
			sink10_startofpacket => rsp_demux_010_src0_startofpacket,        --          .startofpacket
			sink10_endofpacket   => rsp_demux_010_src0_endofpacket,          --          .endofpacket
			sink11_ready         => rsp_demux_011_src0_ready,                --    sink11.ready
			sink11_valid         => rsp_demux_011_src0_valid,                --          .valid
			sink11_channel       => rsp_demux_011_src0_channel,              --          .channel
			sink11_data          => rsp_demux_011_src0_data,                 --          .data
			sink11_startofpacket => rsp_demux_011_src0_startofpacket,        --          .startofpacket
			sink11_endofpacket   => rsp_demux_011_src0_endofpacket,          --          .endofpacket
			sink12_ready         => rsp_demux_012_src0_ready,                --    sink12.ready
			sink12_valid         => rsp_demux_012_src0_valid,                --          .valid
			sink12_channel       => rsp_demux_012_src0_channel,              --          .channel
			sink12_data          => rsp_demux_012_src0_data,                 --          .data
			sink12_startofpacket => rsp_demux_012_src0_startofpacket,        --          .startofpacket
			sink12_endofpacket   => rsp_demux_012_src0_endofpacket           --          .endofpacket
		);

	sram_cvgx_uas_rsp_width_adapter : component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_rsp_width_adapter
		generic map (
			IN_PKT_ADDR_H                 => 38,
			IN_PKT_ADDR_L                 => 18,
			IN_PKT_DATA_H                 => 15,
			IN_PKT_DATA_L                 => 0,
			IN_PKT_BYTEEN_H               => 17,
			IN_PKT_BYTEEN_L               => 16,
			IN_PKT_BYTE_CNT_H             => 47,
			IN_PKT_BYTE_CNT_L             => 45,
			IN_PKT_TRANS_COMPRESSED_READ  => 39,
			IN_PKT_BURSTWRAP_H            => 50,
			IN_PKT_BURSTWRAP_L            => 48,
			IN_PKT_BURST_SIZE_H           => 53,
			IN_PKT_BURST_SIZE_L           => 51,
			IN_PKT_RESPONSE_STATUS_H      => 77,
			IN_PKT_RESPONSE_STATUS_L      => 76,
			IN_PKT_TRANS_EXCLUSIVE        => 44,
			IN_PKT_BURST_TYPE_H           => 55,
			IN_PKT_BURST_TYPE_L           => 54,
			IN_PKT_ORI_BURST_SIZE_L       => 78,
			IN_PKT_ORI_BURST_SIZE_H       => 80,
			IN_ST_DATA_W                  => 81,
			OUT_PKT_ADDR_H                => 56,
			OUT_PKT_ADDR_L                => 36,
			OUT_PKT_DATA_H                => 31,
			OUT_PKT_DATA_L                => 0,
			OUT_PKT_BYTEEN_H              => 35,
			OUT_PKT_BYTEEN_L              => 32,
			OUT_PKT_BYTE_CNT_H            => 65,
			OUT_PKT_BYTE_CNT_L            => 63,
			OUT_PKT_TRANS_COMPRESSED_READ => 57,
			OUT_PKT_BURST_SIZE_H          => 71,
			OUT_PKT_BURST_SIZE_L          => 69,
			OUT_PKT_RESPONSE_STATUS_H     => 95,
			OUT_PKT_RESPONSE_STATUS_L     => 94,
			OUT_PKT_TRANS_EXCLUSIVE       => 62,
			OUT_PKT_BURST_TYPE_H          => 73,
			OUT_PKT_BURST_TYPE_L          => 72,
			OUT_PKT_ORI_BURST_SIZE_L      => 96,
			OUT_PKT_ORI_BURST_SIZE_H      => 98,
			OUT_ST_DATA_W                 => 99,
			ST_CHANNEL_W                  => 13,
			OPTIMIZE_FOR_RSP              => 1,
			RESPONSE_PATH                 => 1,
			CONSTANT_BURST_SIZE           => 1,
			PACKING                       => 1,
			ENABLE_ADDRESS_ALIGNMENT      => 0
		)
		port map (
			clk                  => pll_100MHz_outclk0_clk,                            --       clk.clk
			reset                => CPU_reset_n_reset_bridge_in_reset_reset,           -- clk_reset.reset
			in_valid             => router_003_src_valid,                              --      sink.valid
			in_channel           => router_003_src_channel,                            --          .channel
			in_startofpacket     => router_003_src_startofpacket,                      --          .startofpacket
			in_endofpacket       => router_003_src_endofpacket,                        --          .endofpacket
			in_ready             => router_003_src_ready,                              --          .ready
			in_data              => router_003_src_data,                               --          .data
			out_endofpacket      => sram_cvgx_uas_rsp_width_adapter_src_endofpacket,   --       src.endofpacket
			out_data             => sram_cvgx_uas_rsp_width_adapter_src_data,          --          .data
			out_channel          => sram_cvgx_uas_rsp_width_adapter_src_channel,       --          .channel
			out_valid            => sram_cvgx_uas_rsp_width_adapter_src_valid,         --          .valid
			out_ready            => sram_cvgx_uas_rsp_width_adapter_src_ready,         --          .ready
			out_startofpacket    => sram_cvgx_uas_rsp_width_adapter_src_startofpacket, --          .startofpacket
			in_command_size_data => "000"                                              -- (terminated)
		);

	sram_cvgx_uas_cmd_width_adapter : component steppermotorcontrol_mm_interconnect_0_sram_cvgx_uas_cmd_width_adapter
		generic map (
			IN_PKT_ADDR_H                 => 56,
			IN_PKT_ADDR_L                 => 36,
			IN_PKT_DATA_H                 => 31,
			IN_PKT_DATA_L                 => 0,
			IN_PKT_BYTEEN_H               => 35,
			IN_PKT_BYTEEN_L               => 32,
			IN_PKT_BYTE_CNT_H             => 65,
			IN_PKT_BYTE_CNT_L             => 63,
			IN_PKT_TRANS_COMPRESSED_READ  => 57,
			IN_PKT_BURSTWRAP_H            => 68,
			IN_PKT_BURSTWRAP_L            => 66,
			IN_PKT_BURST_SIZE_H           => 71,
			IN_PKT_BURST_SIZE_L           => 69,
			IN_PKT_RESPONSE_STATUS_H      => 95,
			IN_PKT_RESPONSE_STATUS_L      => 94,
			IN_PKT_TRANS_EXCLUSIVE        => 62,
			IN_PKT_BURST_TYPE_H           => 73,
			IN_PKT_BURST_TYPE_L           => 72,
			IN_PKT_ORI_BURST_SIZE_L       => 96,
			IN_PKT_ORI_BURST_SIZE_H       => 98,
			IN_ST_DATA_W                  => 99,
			OUT_PKT_ADDR_H                => 38,
			OUT_PKT_ADDR_L                => 18,
			OUT_PKT_DATA_H                => 15,
			OUT_PKT_DATA_L                => 0,
			OUT_PKT_BYTEEN_H              => 17,
			OUT_PKT_BYTEEN_L              => 16,
			OUT_PKT_BYTE_CNT_H            => 47,
			OUT_PKT_BYTE_CNT_L            => 45,
			OUT_PKT_TRANS_COMPRESSED_READ => 39,
			OUT_PKT_BURST_SIZE_H          => 53,
			OUT_PKT_BURST_SIZE_L          => 51,
			OUT_PKT_RESPONSE_STATUS_H     => 77,
			OUT_PKT_RESPONSE_STATUS_L     => 76,
			OUT_PKT_TRANS_EXCLUSIVE       => 44,
			OUT_PKT_BURST_TYPE_H          => 55,
			OUT_PKT_BURST_TYPE_L          => 54,
			OUT_PKT_ORI_BURST_SIZE_L      => 78,
			OUT_PKT_ORI_BURST_SIZE_H      => 80,
			OUT_ST_DATA_W                 => 81,
			ST_CHANNEL_W                  => 13,
			OPTIMIZE_FOR_RSP              => 0,
			RESPONSE_PATH                 => 0,
			CONSTANT_BURST_SIZE           => 1,
			PACKING                       => 1,
			ENABLE_ADDRESS_ALIGNMENT      => 0
		)
		port map (
			clk                  => pll_100MHz_outclk0_clk,                            --       clk.clk
			reset                => CPU_reset_n_reset_bridge_in_reset_reset,           -- clk_reset.reset
			in_valid             => cmd_mux_001_src_valid,                             --      sink.valid
			in_channel           => cmd_mux_001_src_channel,                           --          .channel
			in_startofpacket     => cmd_mux_001_src_startofpacket,                     --          .startofpacket
			in_endofpacket       => cmd_mux_001_src_endofpacket,                       --          .endofpacket
			in_ready             => cmd_mux_001_src_ready,                             --          .ready
			in_data              => cmd_mux_001_src_data,                              --          .data
			out_endofpacket      => sram_cvgx_uas_cmd_width_adapter_src_endofpacket,   --       src.endofpacket
			out_data             => sram_cvgx_uas_cmd_width_adapter_src_data,          --          .data
			out_channel          => sram_cvgx_uas_cmd_width_adapter_src_channel,       --          .channel
			out_valid            => sram_cvgx_uas_cmd_width_adapter_src_valid,         --          .valid
			out_ready            => sram_cvgx_uas_cmd_width_adapter_src_ready,         --          .ready
			out_startofpacket    => sram_cvgx_uas_cmd_width_adapter_src_startofpacket, --          .startofpacket
			in_command_size_data => "000"                                              -- (terminated)
		);

end architecture rtl; -- of StepperMotorControl_mm_interconnect_0
